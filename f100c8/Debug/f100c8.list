
f100c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007530  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08007700  08007700  00017700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007808  08007808  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  08007808  08007808  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007808  08007808  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007808  08007808  00017808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800780c  0800780c  0001780c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08007810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a38  20000108  08007918  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b40  08007918  00020b40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc41  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002289  00000000  00000000  0002ddb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  00030040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000acc  00000000  00000000  00030de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011fb0  00000000  00000000  000318ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fd2d  00000000  00000000  0004385c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006b9d9  00000000  00000000  00053589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041e4  00000000  00000000  000bef64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000c3148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000108 	.word	0x20000108
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080076e8 	.word	0x080076e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000010c 	.word	0x2000010c
 800020c:	080076e8 	.word	0x080076e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <pinit>:
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim16;
extern TIM_HandleTypeDef htim17;


void pinit(void){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

	  M[0].Channel=TIM_CHANNEL_1;  M[0].Duty=0;   M[0].Tımer=htim1;
 8000224:	4b85      	ldr	r3, [pc, #532]	; (800043c <pinit+0x21c>)
 8000226:	2200      	movs	r2, #0
 8000228:	649a      	str	r2, [r3, #72]	; 0x48
 800022a:	4b84      	ldr	r3, [pc, #528]	; (800043c <pinit+0x21c>)
 800022c:	2200      	movs	r2, #0
 800022e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000230:	4a82      	ldr	r2, [pc, #520]	; (800043c <pinit+0x21c>)
 8000232:	4b83      	ldr	r3, [pc, #524]	; (8000440 <pinit+0x220>)
 8000234:	4610      	mov	r0, r2
 8000236:	4619      	mov	r1, r3
 8000238:	2348      	movs	r3, #72	; 0x48
 800023a:	461a      	mov	r2, r3
 800023c:	f006 faf1 	bl	8006822 <memcpy>
	  M[1].Channel=TIM_CHANNEL_2;  M[1].Duty=0;   M[1].Tımer=htim1;
 8000240:	4b7e      	ldr	r3, [pc, #504]	; (800043c <pinit+0x21c>)
 8000242:	2204      	movs	r2, #4
 8000244:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8000248:	4b7c      	ldr	r3, [pc, #496]	; (800043c <pinit+0x21c>)
 800024a:	2200      	movs	r2, #0
 800024c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8000250:	4b7a      	ldr	r3, [pc, #488]	; (800043c <pinit+0x21c>)
 8000252:	4a7b      	ldr	r2, [pc, #492]	; (8000440 <pinit+0x220>)
 8000254:	3350      	adds	r3, #80	; 0x50
 8000256:	4611      	mov	r1, r2
 8000258:	2248      	movs	r2, #72	; 0x48
 800025a:	4618      	mov	r0, r3
 800025c:	f006 fae1 	bl	8006822 <memcpy>
	  M[2].Channel=TIM_CHANNEL_3;  M[2].Duty=0;   M[2].Tımer=htim1;
 8000260:	4b76      	ldr	r3, [pc, #472]	; (800043c <pinit+0x21c>)
 8000262:	2208      	movs	r2, #8
 8000264:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000268:	4b74      	ldr	r3, [pc, #464]	; (800043c <pinit+0x21c>)
 800026a:	2200      	movs	r2, #0
 800026c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8000270:	4b72      	ldr	r3, [pc, #456]	; (800043c <pinit+0x21c>)
 8000272:	4a73      	ldr	r2, [pc, #460]	; (8000440 <pinit+0x220>)
 8000274:	33a0      	adds	r3, #160	; 0xa0
 8000276:	4611      	mov	r1, r2
 8000278:	2248      	movs	r2, #72	; 0x48
 800027a:	4618      	mov	r0, r3
 800027c:	f006 fad1 	bl	8006822 <memcpy>
	  M[3].Channel=TIM_CHANNEL_4;  M[3].Duty=0;   M[3].Tımer=htim1;//
 8000280:	4b6e      	ldr	r3, [pc, #440]	; (800043c <pinit+0x21c>)
 8000282:	220c      	movs	r2, #12
 8000284:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8000288:	4b6c      	ldr	r3, [pc, #432]	; (800043c <pinit+0x21c>)
 800028a:	2200      	movs	r2, #0
 800028c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 8000290:	4b6a      	ldr	r3, [pc, #424]	; (800043c <pinit+0x21c>)
 8000292:	4a6b      	ldr	r2, [pc, #428]	; (8000440 <pinit+0x220>)
 8000294:	33f0      	adds	r3, #240	; 0xf0
 8000296:	4611      	mov	r1, r2
 8000298:	2248      	movs	r2, #72	; 0x48
 800029a:	4618      	mov	r0, r3
 800029c:	f006 fac1 	bl	8006822 <memcpy>


	  M[4].Channel=TIM_CHANNEL_1;  M[4].Duty=0;   M[4].Tımer=htim3;
 80002a0:	4b66      	ldr	r3, [pc, #408]	; (800043c <pinit+0x21c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
 80002a8:	4b64      	ldr	r3, [pc, #400]	; (800043c <pinit+0x21c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 80002b0:	4b62      	ldr	r3, [pc, #392]	; (800043c <pinit+0x21c>)
 80002b2:	4a64      	ldr	r2, [pc, #400]	; (8000444 <pinit+0x224>)
 80002b4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80002b8:	4611      	mov	r1, r2
 80002ba:	2248      	movs	r2, #72	; 0x48
 80002bc:	4618      	mov	r0, r3
 80002be:	f006 fab0 	bl	8006822 <memcpy>
	  M[5].Channel=TIM_CHANNEL_2;  M[5].Duty=0;   M[5].Tımer=htim3;//
 80002c2:	4b5e      	ldr	r3, [pc, #376]	; (800043c <pinit+0x21c>)
 80002c4:	2204      	movs	r2, #4
 80002c6:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
 80002ca:	4b5c      	ldr	r3, [pc, #368]	; (800043c <pinit+0x21c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
 80002d2:	4b5a      	ldr	r3, [pc, #360]	; (800043c <pinit+0x21c>)
 80002d4:	4a5b      	ldr	r2, [pc, #364]	; (8000444 <pinit+0x224>)
 80002d6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80002da:	4611      	mov	r1, r2
 80002dc:	2248      	movs	r2, #72	; 0x48
 80002de:	4618      	mov	r0, r3
 80002e0:	f006 fa9f 	bl	8006822 <memcpy>
	  M[6].Channel=TIM_CHANNEL_3;  M[6].Duty=0;   M[6].Tımer=htim4;
 80002e4:	4b55      	ldr	r3, [pc, #340]	; (800043c <pinit+0x21c>)
 80002e6:	2208      	movs	r2, #8
 80002e8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
 80002ec:	4b53      	ldr	r3, [pc, #332]	; (800043c <pinit+0x21c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
 80002f4:	4b51      	ldr	r3, [pc, #324]	; (800043c <pinit+0x21c>)
 80002f6:	4a54      	ldr	r2, [pc, #336]	; (8000448 <pinit+0x228>)
 80002f8:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80002fc:	4611      	mov	r1, r2
 80002fe:	2248      	movs	r2, #72	; 0x48
 8000300:	4618      	mov	r0, r3
 8000302:	f006 fa8e 	bl	8006822 <memcpy>
	  M[7].Channel=TIM_CHANNEL_4;  M[7].Duty=0;   M[7].Tımer=htim4;
 8000306:	4b4d      	ldr	r3, [pc, #308]	; (800043c <pinit+0x21c>)
 8000308:	220c      	movs	r2, #12
 800030a:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
 800030e:	4b4b      	ldr	r3, [pc, #300]	; (800043c <pinit+0x21c>)
 8000310:	2200      	movs	r2, #0
 8000312:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 8000316:	4b49      	ldr	r3, [pc, #292]	; (800043c <pinit+0x21c>)
 8000318:	4a4b      	ldr	r2, [pc, #300]	; (8000448 <pinit+0x228>)
 800031a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800031e:	4611      	mov	r1, r2
 8000320:	2248      	movs	r2, #72	; 0x48
 8000322:	4618      	mov	r0, r3
 8000324:	f006 fa7d 	bl	8006822 <memcpy>


	  M[8].Channel=TIM_CHANNEL_1;  M[8].Duty=0;   M[8].Tımer=htim17;
 8000328:	4b44      	ldr	r3, [pc, #272]	; (800043c <pinit+0x21c>)
 800032a:	2200      	movs	r2, #0
 800032c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 8000330:	4b42      	ldr	r3, [pc, #264]	; (800043c <pinit+0x21c>)
 8000332:	2200      	movs	r2, #0
 8000334:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
 8000338:	4b40      	ldr	r3, [pc, #256]	; (800043c <pinit+0x21c>)
 800033a:	4a44      	ldr	r2, [pc, #272]	; (800044c <pinit+0x22c>)
 800033c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000340:	4611      	mov	r1, r2
 8000342:	2248      	movs	r2, #72	; 0x48
 8000344:	4618      	mov	r0, r3
 8000346:	f006 fa6c 	bl	8006822 <memcpy>
	  M[9].Channel=TIM_CHANNEL_4;  M[9].Duty=0;   M[9].Tımer=htim2;
 800034a:	4b3c      	ldr	r3, [pc, #240]	; (800043c <pinit+0x21c>)
 800034c:	220c      	movs	r2, #12
 800034e:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 8000352:	4b3a      	ldr	r3, [pc, #232]	; (800043c <pinit+0x21c>)
 8000354:	2200      	movs	r2, #0
 8000356:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
 800035a:	4b38      	ldr	r3, [pc, #224]	; (800043c <pinit+0x21c>)
 800035c:	4a3c      	ldr	r2, [pc, #240]	; (8000450 <pinit+0x230>)
 800035e:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8000362:	4611      	mov	r1, r2
 8000364:	2248      	movs	r2, #72	; 0x48
 8000366:	4618      	mov	r0, r3
 8000368:	f006 fa5b 	bl	8006822 <memcpy>
	  M[10].Channel=TIM_CHANNEL_3; M[10].Duty=0;  M[10].Tımer=htim2;
 800036c:	4b33      	ldr	r3, [pc, #204]	; (800043c <pinit+0x21c>)
 800036e:	2208      	movs	r2, #8
 8000370:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
 8000374:	4b31      	ldr	r3, [pc, #196]	; (800043c <pinit+0x21c>)
 8000376:	2200      	movs	r2, #0
 8000378:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 800037c:	4b2f      	ldr	r3, [pc, #188]	; (800043c <pinit+0x21c>)
 800037e:	4a34      	ldr	r2, [pc, #208]	; (8000450 <pinit+0x230>)
 8000380:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8000384:	4611      	mov	r1, r2
 8000386:	2248      	movs	r2, #72	; 0x48
 8000388:	4618      	mov	r0, r3
 800038a:	f006 fa4a 	bl	8006822 <memcpy>
	  M[11].Channel=TIM_CHANNEL_4; M[11].Duty=0;  M[11].Tımer=htim3;
 800038e:	4b2b      	ldr	r3, [pc, #172]	; (800043c <pinit+0x21c>)
 8000390:	220c      	movs	r2, #12
 8000392:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 8000396:	4b29      	ldr	r3, [pc, #164]	; (800043c <pinit+0x21c>)
 8000398:	2200      	movs	r2, #0
 800039a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
 800039e:	4b27      	ldr	r3, [pc, #156]	; (800043c <pinit+0x21c>)
 80003a0:	4a28      	ldr	r2, [pc, #160]	; (8000444 <pinit+0x224>)
 80003a2:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80003a6:	4611      	mov	r1, r2
 80003a8:	2248      	movs	r2, #72	; 0x48
 80003aa:	4618      	mov	r0, r3
 80003ac:	f006 fa39 	bl	8006822 <memcpy>

	  M[12].Channel=TIM_CHANNEL_3; M[12].Duty=0;  M[12].Tımer=htim3;
 80003b0:	4b22      	ldr	r3, [pc, #136]	; (800043c <pinit+0x21c>)
 80003b2:	2208      	movs	r2, #8
 80003b4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80003b8:	4b20      	ldr	r3, [pc, #128]	; (800043c <pinit+0x21c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <pinit+0x21c>)
 80003c2:	4a20      	ldr	r2, [pc, #128]	; (8000444 <pinit+0x224>)
 80003c4:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 80003c8:	4611      	mov	r1, r2
 80003ca:	2248      	movs	r2, #72	; 0x48
 80003cc:	4618      	mov	r0, r3
 80003ce:	f006 fa28 	bl	8006822 <memcpy>
	  M[13].Channel=TIM_CHANNEL_1; M[13].Duty=0;  M[13].Tımer=htim2;
 80003d2:	4b1a      	ldr	r3, [pc, #104]	; (800043c <pinit+0x21c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
 80003da:	4b18      	ldr	r3, [pc, #96]	; (800043c <pinit+0x21c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
 80003e2:	4b16      	ldr	r3, [pc, #88]	; (800043c <pinit+0x21c>)
 80003e4:	4a1a      	ldr	r2, [pc, #104]	; (8000450 <pinit+0x230>)
 80003e6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80003ea:	4611      	mov	r1, r2
 80003ec:	2248      	movs	r2, #72	; 0x48
 80003ee:	4618      	mov	r0, r3
 80003f0:	f006 fa17 	bl	8006822 <memcpy>
	  M[14].Channel=TIM_CHANNEL_2; M[14].Duty=0;  M[14].Tımer=htim2;
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <pinit+0x21c>)
 80003f6:	2204      	movs	r2, #4
 80003f8:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <pinit+0x21c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
 8000404:	4b0d      	ldr	r3, [pc, #52]	; (800043c <pinit+0x21c>)
 8000406:	4a12      	ldr	r2, [pc, #72]	; (8000450 <pinit+0x230>)
 8000408:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800040c:	4611      	mov	r1, r2
 800040e:	2248      	movs	r2, #72	; 0x48
 8000410:	4618      	mov	r0, r3
 8000412:	f006 fa06 	bl	8006822 <memcpy>
	  M[15].Channel=TIM_CHANNEL_1; M[15].Duty=0;  M[15].Tımer=htim16;
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <pinit+0x21c>)
 8000418:	2200      	movs	r2, #0
 800041a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 800041e:	4b07      	ldr	r3, [pc, #28]	; (800043c <pinit+0x21c>)
 8000420:	2200      	movs	r2, #0
 8000422:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <pinit+0x21c>)
 8000428:	4a0a      	ldr	r2, [pc, #40]	; (8000454 <pinit+0x234>)
 800042a:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800042e:	4611      	mov	r1, r2
 8000430:	2248      	movs	r2, #72	; 0x48
 8000432:	4618      	mov	r0, r3
 8000434:	f006 f9f5 	bl	8006822 <memcpy>

}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000124 	.word	0x20000124
 8000440:	200006dc 	.word	0x200006dc
 8000444:	2000076c 	.word	0x2000076c
 8000448:	200007b4 	.word	0x200007b4
 800044c:	200008d4 	.word	0x200008d4
 8000450:	20000724 	.word	0x20000724
 8000454:	2000088c 	.word	0x2000088c

08000458 <Pwm_Start>:

void Pwm_Start(Control Ms){
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	463b      	mov	r3, r7
 8000460:	e883 0003 	stmia.w	r3, {r0, r1}

	for ( uint16_t var = 0;  var < 16; var++) {
 8000464:	2300      	movs	r3, #0
 8000466:	81fb      	strh	r3, [r7, #14]
 8000468:	e111      	b.n	800068e <Pwm_Start+0x236>



		if (Ms.MotorSayi & (1 << var)) {  // n. bit 1
 800046a:	883b      	ldrh	r3, [r7, #0]
 800046c:	461a      	mov	r2, r3
 800046e:	89fb      	ldrh	r3, [r7, #14]
 8000470:	fa42 f303 	asr.w	r3, r2, r3
 8000474:	f003 0301 	and.w	r3, r3, #1
 8000478:	2b00      	cmp	r3, #0
 800047a:	f000 808b 	beq.w	8000594 <Pwm_Start+0x13c>

			if(var <= 12){
 800047e:	89fb      	ldrh	r3, [r7, #14]
 8000480:	2b0c      	cmp	r3, #12
 8000482:	d80b      	bhi.n	800049c <Pwm_Start+0x44>
				M[var].Duty=Ms.MotorDuty;
 8000484:	887b      	ldrh	r3, [r7, #2]
 8000486:	89fa      	ldrh	r2, [r7, #14]
 8000488:	4618      	mov	r0, r3
 800048a:	4986      	ldr	r1, [pc, #536]	; (80006a4 <Pwm_Start+0x24c>)
 800048c:	4613      	mov	r3, r2
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	4413      	add	r3, r2
 8000492:	011b      	lsls	r3, r3, #4
 8000494:	440b      	add	r3, r1
 8000496:	334c      	adds	r3, #76	; 0x4c
 8000498:	6018      	str	r0, [r3, #0]
 800049a:	e00a      	b.n	80004b2 <Pwm_Start+0x5a>
			}else{
				M[var].Duty=Ms.TempDuty;
 800049c:	88bb      	ldrh	r3, [r7, #4]
 800049e:	89fa      	ldrh	r2, [r7, #14]
 80004a0:	4618      	mov	r0, r3
 80004a2:	4980      	ldr	r1, [pc, #512]	; (80006a4 <Pwm_Start+0x24c>)
 80004a4:	4613      	mov	r3, r2
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	4413      	add	r3, r2
 80004aa:	011b      	lsls	r3, r3, #4
 80004ac:	440b      	add	r3, r1
 80004ae:	334c      	adds	r3, #76	; 0x4c
 80004b0:	6018      	str	r0, [r3, #0]
			}

		   __HAL_TIM_SET_COMPARE(&M[var].Tımer,M[var].Channel,M[var].Duty);
 80004b2:	89fa      	ldrh	r2, [r7, #14]
 80004b4:	497b      	ldr	r1, [pc, #492]	; (80006a4 <Pwm_Start+0x24c>)
 80004b6:	4613      	mov	r3, r2
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	4413      	add	r3, r2
 80004bc:	011b      	lsls	r3, r3, #4
 80004be:	440b      	add	r3, r1
 80004c0:	3348      	adds	r3, #72	; 0x48
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d113      	bne.n	80004f0 <Pwm_Start+0x98>
 80004c8:	89fa      	ldrh	r2, [r7, #14]
 80004ca:	4976      	ldr	r1, [pc, #472]	; (80006a4 <Pwm_Start+0x24c>)
 80004cc:	4613      	mov	r3, r2
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	4413      	add	r3, r2
 80004d2:	011b      	lsls	r3, r3, #4
 80004d4:	440b      	add	r3, r1
 80004d6:	334c      	adds	r3, #76	; 0x4c
 80004d8:	6818      	ldr	r0, [r3, #0]
 80004da:	89fa      	ldrh	r2, [r7, #14]
 80004dc:	4971      	ldr	r1, [pc, #452]	; (80006a4 <Pwm_Start+0x24c>)
 80004de:	4613      	mov	r3, r2
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	4413      	add	r3, r2
 80004e4:	011b      	lsls	r3, r3, #4
 80004e6:	440b      	add	r3, r1
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4602      	mov	r2, r0
 80004ec:	635a      	str	r2, [r3, #52]	; 0x34
 80004ee:	e0cb      	b.n	8000688 <Pwm_Start+0x230>
 80004f0:	89fa      	ldrh	r2, [r7, #14]
 80004f2:	496c      	ldr	r1, [pc, #432]	; (80006a4 <Pwm_Start+0x24c>)
 80004f4:	4613      	mov	r3, r2
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	4413      	add	r3, r2
 80004fa:	011b      	lsls	r3, r3, #4
 80004fc:	440b      	add	r3, r1
 80004fe:	3348      	adds	r3, #72	; 0x48
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b04      	cmp	r3, #4
 8000504:	d113      	bne.n	800052e <Pwm_Start+0xd6>
 8000506:	89fa      	ldrh	r2, [r7, #14]
 8000508:	4966      	ldr	r1, [pc, #408]	; (80006a4 <Pwm_Start+0x24c>)
 800050a:	4613      	mov	r3, r2
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	4413      	add	r3, r2
 8000510:	011b      	lsls	r3, r3, #4
 8000512:	440b      	add	r3, r1
 8000514:	334c      	adds	r3, #76	; 0x4c
 8000516:	6818      	ldr	r0, [r3, #0]
 8000518:	89fa      	ldrh	r2, [r7, #14]
 800051a:	4962      	ldr	r1, [pc, #392]	; (80006a4 <Pwm_Start+0x24c>)
 800051c:	4613      	mov	r3, r2
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	4413      	add	r3, r2
 8000522:	011b      	lsls	r3, r3, #4
 8000524:	440b      	add	r3, r1
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4603      	mov	r3, r0
 800052a:	6393      	str	r3, [r2, #56]	; 0x38
 800052c:	e0ac      	b.n	8000688 <Pwm_Start+0x230>
 800052e:	89fa      	ldrh	r2, [r7, #14]
 8000530:	495c      	ldr	r1, [pc, #368]	; (80006a4 <Pwm_Start+0x24c>)
 8000532:	4613      	mov	r3, r2
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	4413      	add	r3, r2
 8000538:	011b      	lsls	r3, r3, #4
 800053a:	440b      	add	r3, r1
 800053c:	3348      	adds	r3, #72	; 0x48
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b08      	cmp	r3, #8
 8000542:	d113      	bne.n	800056c <Pwm_Start+0x114>
 8000544:	89fa      	ldrh	r2, [r7, #14]
 8000546:	4957      	ldr	r1, [pc, #348]	; (80006a4 <Pwm_Start+0x24c>)
 8000548:	4613      	mov	r3, r2
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	4413      	add	r3, r2
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	440b      	add	r3, r1
 8000552:	334c      	adds	r3, #76	; 0x4c
 8000554:	6818      	ldr	r0, [r3, #0]
 8000556:	89fa      	ldrh	r2, [r7, #14]
 8000558:	4952      	ldr	r1, [pc, #328]	; (80006a4 <Pwm_Start+0x24c>)
 800055a:	4613      	mov	r3, r2
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	4413      	add	r3, r2
 8000560:	011b      	lsls	r3, r3, #4
 8000562:	440b      	add	r3, r1
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	4603      	mov	r3, r0
 8000568:	63d3      	str	r3, [r2, #60]	; 0x3c
 800056a:	e08d      	b.n	8000688 <Pwm_Start+0x230>
 800056c:	89fa      	ldrh	r2, [r7, #14]
 800056e:	494d      	ldr	r1, [pc, #308]	; (80006a4 <Pwm_Start+0x24c>)
 8000570:	4613      	mov	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	4413      	add	r3, r2
 8000576:	011b      	lsls	r3, r3, #4
 8000578:	440b      	add	r3, r1
 800057a:	334c      	adds	r3, #76	; 0x4c
 800057c:	6818      	ldr	r0, [r3, #0]
 800057e:	89fa      	ldrh	r2, [r7, #14]
 8000580:	4948      	ldr	r1, [pc, #288]	; (80006a4 <Pwm_Start+0x24c>)
 8000582:	4613      	mov	r3, r2
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	4413      	add	r3, r2
 8000588:	011b      	lsls	r3, r3, #4
 800058a:	440b      	add	r3, r1
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	4603      	mov	r3, r0
 8000590:	6413      	str	r3, [r2, #64]	; 0x40
 8000592:	e079      	b.n	8000688 <Pwm_Start+0x230>

	    }
		else{                 // n. bit 0

		   M[var].Duty=0;
 8000594:	89fa      	ldrh	r2, [r7, #14]
 8000596:	4943      	ldr	r1, [pc, #268]	; (80006a4 <Pwm_Start+0x24c>)
 8000598:	4613      	mov	r3, r2
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	4413      	add	r3, r2
 800059e:	011b      	lsls	r3, r3, #4
 80005a0:	440b      	add	r3, r1
 80005a2:	334c      	adds	r3, #76	; 0x4c
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&M[var].Tımer,M[var].Channel,M[var].Duty);
 80005a8:	89fa      	ldrh	r2, [r7, #14]
 80005aa:	493e      	ldr	r1, [pc, #248]	; (80006a4 <Pwm_Start+0x24c>)
 80005ac:	4613      	mov	r3, r2
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	4413      	add	r3, r2
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	440b      	add	r3, r1
 80005b6:	3348      	adds	r3, #72	; 0x48
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d113      	bne.n	80005e6 <Pwm_Start+0x18e>
 80005be:	89fa      	ldrh	r2, [r7, #14]
 80005c0:	4938      	ldr	r1, [pc, #224]	; (80006a4 <Pwm_Start+0x24c>)
 80005c2:	4613      	mov	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	4413      	add	r3, r2
 80005c8:	011b      	lsls	r3, r3, #4
 80005ca:	440b      	add	r3, r1
 80005cc:	334c      	adds	r3, #76	; 0x4c
 80005ce:	6818      	ldr	r0, [r3, #0]
 80005d0:	89fa      	ldrh	r2, [r7, #14]
 80005d2:	4934      	ldr	r1, [pc, #208]	; (80006a4 <Pwm_Start+0x24c>)
 80005d4:	4613      	mov	r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	4413      	add	r3, r2
 80005da:	011b      	lsls	r3, r3, #4
 80005dc:	440b      	add	r3, r1
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4602      	mov	r2, r0
 80005e2:	635a      	str	r2, [r3, #52]	; 0x34
 80005e4:	e050      	b.n	8000688 <Pwm_Start+0x230>
 80005e6:	89fa      	ldrh	r2, [r7, #14]
 80005e8:	492e      	ldr	r1, [pc, #184]	; (80006a4 <Pwm_Start+0x24c>)
 80005ea:	4613      	mov	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	4413      	add	r3, r2
 80005f0:	011b      	lsls	r3, r3, #4
 80005f2:	440b      	add	r3, r1
 80005f4:	3348      	adds	r3, #72	; 0x48
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	d113      	bne.n	8000624 <Pwm_Start+0x1cc>
 80005fc:	89fa      	ldrh	r2, [r7, #14]
 80005fe:	4929      	ldr	r1, [pc, #164]	; (80006a4 <Pwm_Start+0x24c>)
 8000600:	4613      	mov	r3, r2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4413      	add	r3, r2
 8000606:	011b      	lsls	r3, r3, #4
 8000608:	440b      	add	r3, r1
 800060a:	334c      	adds	r3, #76	; 0x4c
 800060c:	6818      	ldr	r0, [r3, #0]
 800060e:	89fa      	ldrh	r2, [r7, #14]
 8000610:	4924      	ldr	r1, [pc, #144]	; (80006a4 <Pwm_Start+0x24c>)
 8000612:	4613      	mov	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4413      	add	r3, r2
 8000618:	011b      	lsls	r3, r3, #4
 800061a:	440b      	add	r3, r1
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	4603      	mov	r3, r0
 8000620:	6393      	str	r3, [r2, #56]	; 0x38
 8000622:	e031      	b.n	8000688 <Pwm_Start+0x230>
 8000624:	89fa      	ldrh	r2, [r7, #14]
 8000626:	491f      	ldr	r1, [pc, #124]	; (80006a4 <Pwm_Start+0x24c>)
 8000628:	4613      	mov	r3, r2
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	4413      	add	r3, r2
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	440b      	add	r3, r1
 8000632:	3348      	adds	r3, #72	; 0x48
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b08      	cmp	r3, #8
 8000638:	d113      	bne.n	8000662 <Pwm_Start+0x20a>
 800063a:	89fa      	ldrh	r2, [r7, #14]
 800063c:	4919      	ldr	r1, [pc, #100]	; (80006a4 <Pwm_Start+0x24c>)
 800063e:	4613      	mov	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	011b      	lsls	r3, r3, #4
 8000646:	440b      	add	r3, r1
 8000648:	334c      	adds	r3, #76	; 0x4c
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	89fa      	ldrh	r2, [r7, #14]
 800064e:	4915      	ldr	r1, [pc, #84]	; (80006a4 <Pwm_Start+0x24c>)
 8000650:	4613      	mov	r3, r2
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	4413      	add	r3, r2
 8000656:	011b      	lsls	r3, r3, #4
 8000658:	440b      	add	r3, r1
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4603      	mov	r3, r0
 800065e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000660:	e012      	b.n	8000688 <Pwm_Start+0x230>
 8000662:	89fa      	ldrh	r2, [r7, #14]
 8000664:	490f      	ldr	r1, [pc, #60]	; (80006a4 <Pwm_Start+0x24c>)
 8000666:	4613      	mov	r3, r2
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	4413      	add	r3, r2
 800066c:	011b      	lsls	r3, r3, #4
 800066e:	440b      	add	r3, r1
 8000670:	334c      	adds	r3, #76	; 0x4c
 8000672:	6818      	ldr	r0, [r3, #0]
 8000674:	89fa      	ldrh	r2, [r7, #14]
 8000676:	490b      	ldr	r1, [pc, #44]	; (80006a4 <Pwm_Start+0x24c>)
 8000678:	4613      	mov	r3, r2
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	4413      	add	r3, r2
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	440b      	add	r3, r1
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4603      	mov	r3, r0
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
	for ( uint16_t var = 0;  var < 16; var++) {
 8000688:	89fb      	ldrh	r3, [r7, #14]
 800068a:	3301      	adds	r3, #1
 800068c:	81fb      	strh	r3, [r7, #14]
 800068e:	89fb      	ldrh	r3, [r7, #14]
 8000690:	2b0f      	cmp	r3, #15
 8000692:	f67f aeea 	bls.w	800046a <Pwm_Start+0x12>


       }


}
 8000696:	bf00      	nop
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000124 	.word	0x20000124

080006a8 <selectProgram>:



prg selectProgram(uint8_t pr) {
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	70fb      	strb	r3, [r7, #3]
    switch (pr) {
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	2b13      	cmp	r3, #19
 80006ba:	f200 80b7 	bhi.w	800082c <selectProgram+0x184>
 80006be:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <selectProgram+0x1c>)
 80006c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c4:	08000715 	.word	0x08000715
 80006c8:	08000723 	.word	0x08000723
 80006cc:	08000731 	.word	0x08000731
 80006d0:	0800073f 	.word	0x0800073f
 80006d4:	0800074d 	.word	0x0800074d
 80006d8:	0800075b 	.word	0x0800075b
 80006dc:	08000769 	.word	0x08000769
 80006e0:	08000777 	.word	0x08000777
 80006e4:	08000785 	.word	0x08000785
 80006e8:	08000793 	.word	0x08000793
 80006ec:	080007a1 	.word	0x080007a1
 80006f0:	080007af 	.word	0x080007af
 80006f4:	080007bd 	.word	0x080007bd
 80006f8:	080007cb 	.word	0x080007cb
 80006fc:	080007d9 	.word	0x080007d9
 8000700:	080007e7 	.word	0x080007e7
 8000704:	080007f5 	.word	0x080007f5
 8000708:	08000803 	.word	0x08000803
 800070c:	08000811 	.word	0x08000811
 8000710:	0800081f 	.word	0x0800081f
        case 1: return GA;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a4a      	ldr	r2, [pc, #296]	; (8000840 <selectProgram+0x198>)
 8000718:	6810      	ldr	r0, [r2, #0]
 800071a:	6018      	str	r0, [r3, #0]
 800071c:	8892      	ldrh	r2, [r2, #4]
 800071e:	809a      	strh	r2, [r3, #4]
 8000720:	e088      	b.n	8000834 <selectProgram+0x18c>
        case 2: return BS;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a47      	ldr	r2, [pc, #284]	; (8000844 <selectProgram+0x19c>)
 8000726:	6810      	ldr	r0, [r2, #0]
 8000728:	6018      	str	r0, [r3, #0]
 800072a:	8892      	ldrh	r2, [r2, #4]
 800072c:	809a      	strh	r2, [r3, #4]
 800072e:	e081      	b.n	8000834 <selectProgram+0x18c>
        case 3: return BK;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a45      	ldr	r2, [pc, #276]	; (8000848 <selectProgram+0x1a0>)
 8000734:	6810      	ldr	r0, [r2, #0]
 8000736:	6018      	str	r0, [r3, #0]
 8000738:	8892      	ldrh	r2, [r2, #4]
 800073a:	809a      	strh	r2, [r3, #4]
 800073c:	e07a      	b.n	8000834 <selectProgram+0x18c>
        case 4: return AT;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a42      	ldr	r2, [pc, #264]	; (800084c <selectProgram+0x1a4>)
 8000742:	6810      	ldr	r0, [r2, #0]
 8000744:	6018      	str	r0, [r3, #0]
 8000746:	8892      	ldrh	r2, [r2, #4]
 8000748:	809a      	strh	r2, [r3, #4]
 800074a:	e073      	b.n	8000834 <selectProgram+0x18c>
        case 5: return BT;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a40      	ldr	r2, [pc, #256]	; (8000850 <selectProgram+0x1a8>)
 8000750:	6810      	ldr	r0, [r2, #0]
 8000752:	6018      	str	r0, [r3, #0]
 8000754:	8892      	ldrh	r2, [r2, #4]
 8000756:	809a      	strh	r2, [r3, #4]
 8000758:	e06c      	b.n	8000834 <selectProgram+0x18c>
        case 6: return DK;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4a3d      	ldr	r2, [pc, #244]	; (8000854 <selectProgram+0x1ac>)
 800075e:	6810      	ldr	r0, [r2, #0]
 8000760:	6018      	str	r0, [r3, #0]
 8000762:	8892      	ldrh	r2, [r2, #4]
 8000764:	809a      	strh	r2, [r3, #4]
 8000766:	e065      	b.n	8000834 <selectProgram+0x18c>
        case 7: return BF;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a3b      	ldr	r2, [pc, #236]	; (8000858 <selectProgram+0x1b0>)
 800076c:	6810      	ldr	r0, [r2, #0]
 800076e:	6018      	str	r0, [r3, #0]
 8000770:	8892      	ldrh	r2, [r2, #4]
 8000772:	809a      	strh	r2, [r3, #4]
 8000774:	e05e      	b.n	8000834 <selectProgram+0x18c>
        case 8: return DG;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a38      	ldr	r2, [pc, #224]	; (800085c <selectProgram+0x1b4>)
 800077a:	6810      	ldr	r0, [r2, #0]
 800077c:	6018      	str	r0, [r3, #0]
 800077e:	8892      	ldrh	r2, [r2, #4]
 8000780:	809a      	strh	r2, [r3, #4]
 8000782:	e057      	b.n	8000834 <selectProgram+0x18c>
        case 9: return KD;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a36      	ldr	r2, [pc, #216]	; (8000860 <selectProgram+0x1b8>)
 8000788:	6810      	ldr	r0, [r2, #0]
 800078a:	6018      	str	r0, [r3, #0]
 800078c:	8892      	ldrh	r2, [r2, #4]
 800078e:	809a      	strh	r2, [r3, #4]
 8000790:	e050      	b.n	8000834 <selectProgram+0x18c>
        case 10: return LF;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a33      	ldr	r2, [pc, #204]	; (8000864 <selectProgram+0x1bc>)
 8000796:	6810      	ldr	r0, [r2, #0]
 8000798:	6018      	str	r0, [r3, #0]
 800079a:	8892      	ldrh	r2, [r2, #4]
 800079c:	809a      	strh	r2, [r3, #4]
 800079e:	e049      	b.n	8000834 <selectProgram+0x18c>
        case 11: return AÜ;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a31      	ldr	r2, [pc, #196]	; (8000868 <selectProgram+0x1c0>)
 80007a4:	6810      	ldr	r0, [r2, #0]
 80007a6:	6018      	str	r0, [r3, #0]
 80007a8:	8892      	ldrh	r2, [r2, #4]
 80007aa:	809a      	strh	r2, [r3, #4]
 80007ac:	e042      	b.n	8000834 <selectProgram+0x18c>
        case 12: return MH;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a2e      	ldr	r2, [pc, #184]	; (800086c <selectProgram+0x1c4>)
 80007b2:	6810      	ldr	r0, [r2, #0]
 80007b4:	6018      	str	r0, [r3, #0]
 80007b6:	8892      	ldrh	r2, [r2, #4]
 80007b8:	809a      	strh	r2, [r3, #4]
 80007ba:	e03b      	b.n	8000834 <selectProgram+0x18c>
        case 13: return KT;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4a2c      	ldr	r2, [pc, #176]	; (8000870 <selectProgram+0x1c8>)
 80007c0:	6810      	ldr	r0, [r2, #0]
 80007c2:	6018      	str	r0, [r3, #0]
 80007c4:	8892      	ldrh	r2, [r2, #4]
 80007c6:	809a      	strh	r2, [r3, #4]
 80007c8:	e034      	b.n	8000834 <selectProgram+0x18c>
        case 14: return TV;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a29      	ldr	r2, [pc, #164]	; (8000874 <selectProgram+0x1cc>)
 80007ce:	6810      	ldr	r0, [r2, #0]
 80007d0:	6018      	str	r0, [r3, #0]
 80007d2:	8892      	ldrh	r2, [r2, #4]
 80007d4:	809a      	strh	r2, [r3, #4]
 80007d6:	e02d      	b.n	8000834 <selectProgram+0x18c>
        case 15: return KG;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a27      	ldr	r2, [pc, #156]	; (8000878 <selectProgram+0x1d0>)
 80007dc:	6810      	ldr	r0, [r2, #0]
 80007de:	6018      	str	r0, [r3, #0]
 80007e0:	8892      	ldrh	r2, [r2, #4]
 80007e2:	809a      	strh	r2, [r3, #4]
 80007e4:	e026      	b.n	8000834 <selectProgram+0x18c>
        case 16: return BA;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a24      	ldr	r2, [pc, #144]	; (800087c <selectProgram+0x1d4>)
 80007ea:	6810      	ldr	r0, [r2, #0]
 80007ec:	6018      	str	r0, [r3, #0]
 80007ee:	8892      	ldrh	r2, [r2, #4]
 80007f0:	809a      	strh	r2, [r3, #4]
 80007f2:	e01f      	b.n	8000834 <selectProgram+0x18c>
        case 17: return KY;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a22      	ldr	r2, [pc, #136]	; (8000880 <selectProgram+0x1d8>)
 80007f8:	6810      	ldr	r0, [r2, #0]
 80007fa:	6018      	str	r0, [r3, #0]
 80007fc:	8892      	ldrh	r2, [r2, #4]
 80007fe:	809a      	strh	r2, [r3, #4]
 8000800:	e018      	b.n	8000834 <selectProgram+0x18c>
        case 18: return ÖA;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a1f      	ldr	r2, [pc, #124]	; (8000884 <selectProgram+0x1dc>)
 8000806:	6810      	ldr	r0, [r2, #0]
 8000808:	6018      	str	r0, [r3, #0]
 800080a:	8892      	ldrh	r2, [r2, #4]
 800080c:	809a      	strh	r2, [r3, #4]
 800080e:	e011      	b.n	8000834 <selectProgram+0x18c>
        case 19: return GS;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a1d      	ldr	r2, [pc, #116]	; (8000888 <selectProgram+0x1e0>)
 8000814:	6810      	ldr	r0, [r2, #0]
 8000816:	6018      	str	r0, [r3, #0]
 8000818:	8892      	ldrh	r2, [r2, #4]
 800081a:	809a      	strh	r2, [r3, #4]
 800081c:	e00a      	b.n	8000834 <selectProgram+0x18c>
        case 20: return KB;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a1a      	ldr	r2, [pc, #104]	; (800088c <selectProgram+0x1e4>)
 8000822:	6810      	ldr	r0, [r2, #0]
 8000824:	6018      	str	r0, [r3, #0]
 8000826:	8892      	ldrh	r2, [r2, #4]
 8000828:	809a      	strh	r2, [r3, #4]
 800082a:	e003      	b.n	8000834 <selectProgram+0x18c>
        default: return (prg){0};; // Varsayılan bir değer döndürülebilir
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	809a      	strh	r2, [r3, #4]
    }
}
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	20000000 	.word	0x20000000
 8000844:	20000008 	.word	0x20000008
 8000848:	20000010 	.word	0x20000010
 800084c:	20000018 	.word	0x20000018
 8000850:	20000020 	.word	0x20000020
 8000854:	20000028 	.word	0x20000028
 8000858:	20000030 	.word	0x20000030
 800085c:	20000038 	.word	0x20000038
 8000860:	20000040 	.word	0x20000040
 8000864:	20000048 	.word	0x20000048
 8000868:	20000050 	.word	0x20000050
 800086c:	20000058 	.word	0x20000058
 8000870:	20000060 	.word	0x20000060
 8000874:	20000068 	.word	0x20000068
 8000878:	20000070 	.word	0x20000070
 800087c:	20000078 	.word	0x20000078
 8000880:	20000080 	.word	0x20000080
 8000884:	20000088 	.word	0x20000088
 8000888:	20000090 	.word	0x20000090
 800088c:	20000098 	.word	0x20000098

08000890 <prgSel>:




// Ana program seçim fonksiyonu
prgSelection prgSel() {
 8000890:	b5b0      	push	{r4, r5, r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
    prgSelection selection = {0}; // Tüm alanları sıfırla
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
    selection.selectedProgramsCount = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (RxBuf[2] > 64 && RxBuf[2] <= 84) { // Geçerli program aralığı kontrolü
 80008ae:	4b34      	ldr	r3, [pc, #208]	; (8000980 <prgSel+0xf0>)
 80008b0:	789b      	ldrb	r3, [r3, #2]
 80008b2:	2b40      	cmp	r3, #64	; 0x40
 80008b4:	d919      	bls.n	80008ea <prgSel+0x5a>
 80008b6:	4b32      	ldr	r3, [pc, #200]	; (8000980 <prgSel+0xf0>)
 80008b8:	789b      	ldrb	r3, [r3, #2]
 80008ba:	2b54      	cmp	r3, #84	; 0x54
 80008bc:	d815      	bhi.n	80008ea <prgSel+0x5a>
        selection.program1 = selectProgram(RxBuf[2] - 64);
 80008be:	4b30      	ldr	r3, [pc, #192]	; (8000980 <prgSel+0xf0>)
 80008c0:	789b      	ldrb	r3, [r3, #2]
 80008c2:	3b40      	subs	r3, #64	; 0x40
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	463b      	mov	r3, r7
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff feec 	bl	80006a8 <selectProgram>
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	463a      	mov	r2, r7
 80008d6:	6810      	ldr	r0, [r2, #0]
 80008d8:	6018      	str	r0, [r3, #0]
 80008da:	8892      	ldrh	r2, [r2, #4]
 80008dc:	809a      	strh	r2, [r3, #4]
        selection.selectedProgramsCount++;
 80008de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    }
    if (RxBuf[3] > 64 && RxBuf[3] <= 84) { // Geçerli program aralığı kontrolü
 80008ea:	4b25      	ldr	r3, [pc, #148]	; (8000980 <prgSel+0xf0>)
 80008ec:	78db      	ldrb	r3, [r3, #3]
 80008ee:	2b40      	cmp	r3, #64	; 0x40
 80008f0:	d919      	bls.n	8000926 <prgSel+0x96>
 80008f2:	4b23      	ldr	r3, [pc, #140]	; (8000980 <prgSel+0xf0>)
 80008f4:	78db      	ldrb	r3, [r3, #3]
 80008f6:	2b54      	cmp	r3, #84	; 0x54
 80008f8:	d815      	bhi.n	8000926 <prgSel+0x96>
        selection.program2 = selectProgram(RxBuf[3] - 64);
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <prgSel+0xf0>)
 80008fc:	78db      	ldrb	r3, [r3, #3]
 80008fe:	3b40      	subs	r3, #64	; 0x40
 8000900:	b2da      	uxtb	r2, r3
 8000902:	463b      	mov	r3, r7
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fece 	bl	80006a8 <selectProgram>
 800090c:	f107 031a 	add.w	r3, r7, #26
 8000910:	463a      	mov	r2, r7
 8000912:	6811      	ldr	r1, [r2, #0]
 8000914:	6019      	str	r1, [r3, #0]
 8000916:	8892      	ldrh	r2, [r2, #4]
 8000918:	809a      	strh	r2, [r3, #4]
        selection.selectedProgramsCount++;
 800091a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800091e:	3301      	adds	r3, #1
 8000920:	b2db      	uxtb	r3, r3
 8000922:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    }
    if (RxBuf[4] > 64 && RxBuf[4] <= 84) { // Geçerli program aralığı kontrolü
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <prgSel+0xf0>)
 8000928:	791b      	ldrb	r3, [r3, #4]
 800092a:	2b40      	cmp	r3, #64	; 0x40
 800092c:	d919      	bls.n	8000962 <prgSel+0xd2>
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <prgSel+0xf0>)
 8000930:	791b      	ldrb	r3, [r3, #4]
 8000932:	2b54      	cmp	r3, #84	; 0x54
 8000934:	d815      	bhi.n	8000962 <prgSel+0xd2>
        selection.program3 = selectProgram(RxBuf[4] - 64);
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <prgSel+0xf0>)
 8000938:	791b      	ldrb	r3, [r3, #4]
 800093a:	3b40      	subs	r3, #64	; 0x40
 800093c:	b2da      	uxtb	r2, r3
 800093e:	463b      	mov	r3, r7
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff feb0 	bl	80006a8 <selectProgram>
 8000948:	f107 0320 	add.w	r3, r7, #32
 800094c:	463a      	mov	r2, r7
 800094e:	6810      	ldr	r0, [r2, #0]
 8000950:	6018      	str	r0, [r3, #0]
 8000952:	8892      	ldrh	r2, [r2, #4]
 8000954:	809a      	strh	r2, [r3, #4]
        selection.selectedProgramsCount++;
 8000956:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800095a:	3301      	adds	r3, #1
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    }



    return selection;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	461d      	mov	r5, r3
 8000966:	f107 0414 	add.w	r4, r7, #20
 800096a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800096c:	6028      	str	r0, [r5, #0]
 800096e:	6069      	str	r1, [r5, #4]
 8000970:	60aa      	str	r2, [r5, #8]
 8000972:	60eb      	str	r3, [r5, #12]
 8000974:	6820      	ldr	r0, [r4, #0]
 8000976:	6128      	str	r0, [r5, #16]
}
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	3728      	adds	r7, #40	; 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bdb0      	pop	{r4, r5, r7, pc}
 8000980:	20000650 	.word	0x20000650

08000984 <Stop_Full>:


uint8_t  Stop_Full(void){
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
	 uint8_t bool;



	 if (RxBuf[0]=='S' && RxBuf[1]=='T' && RxBuf[2]=='P' ) {    //kodu kesiyor.stop char d
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <Stop_Full+0x54>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b53      	cmp	r3, #83	; 0x53
 8000990:	d11a      	bne.n	80009c8 <Stop_Full+0x44>
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <Stop_Full+0x54>)
 8000994:	785b      	ldrb	r3, [r3, #1]
 8000996:	2b54      	cmp	r3, #84	; 0x54
 8000998:	d116      	bne.n	80009c8 <Stop_Full+0x44>
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <Stop_Full+0x54>)
 800099c:	789b      	ldrb	r3, [r3, #2]
 800099e:	2b50      	cmp	r3, #80	; 0x50
 80009a0:	d112      	bne.n	80009c8 <Stop_Full+0x44>

		 start=0;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <Stop_Full+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
		 Control mX;
		 mX.MotorSayi=0b1111111111111111; //motor sayıları için pwm
 80009a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009ac:	803b      	strh	r3, [r7, #0]
		 mX.MotorDuty=0;                //duty sıfır olarak set edildi.
 80009ae:	2300      	movs	r3, #0
 80009b0:	807b      	strh	r3, [r7, #2]
		 mX.TempDuty=0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	80bb      	strh	r3, [r7, #4]
		 Pwm_Start(mX);         //pwm out veriyor.
 80009b6:	463b      	mov	r3, r7
 80009b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009bc:	f7ff fd4c 	bl	8000458 <Pwm_Start>
		 return bool=1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	71fb      	strb	r3, [r7, #7]
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	e002      	b.n	80009ce <Stop_Full+0x4a>

	    }else return bool=0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	79fb      	ldrb	r3, [r7, #7]


}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000650 	.word	0x20000650
 80009dc:	20000646 	.word	0x20000646

080009e0 <program>:



//Standar programlar için gereken kod.
void program(uint16_t time){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b090      	sub	sp, #64	; 0x40
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	80fb      	strh	r3, [r7, #6]

uint16_t tempsel=0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
prgSelection selectedPrograms = prgSel();
 80009ee:	f107 0320 	add.w	r3, r7, #32
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ff4c 	bl	8000890 <prgSel>
uint8_t prgsay=selectedPrograms.selectedProgramsCount;
 80009f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80009fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
// Isıtıcıların ayarı
// Gelen rxbuf[5]'in ilk 3 bitine göre karar verilecek
          if (RxBuf[5] & 0x01) {
 8000a00:	4b69      	ldr	r3, [pc, #420]	; (8000ba8 <program+0x1c8>)
 8000a02:	795b      	ldrb	r3, [r3, #5]
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d003      	beq.n	8000a14 <program+0x34>
            tempsel |= (1 << 13); // 1. bit set edilirse 13. biti 1 yap
 8000a0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a12:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
          if (RxBuf[5] & 0x02) {
 8000a14:	4b64      	ldr	r3, [pc, #400]	; (8000ba8 <program+0x1c8>)
 8000a16:	795b      	ldrb	r3, [r3, #5]
 8000a18:	f003 0302 	and.w	r3, r3, #2
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <program+0x48>
	         tempsel |= (1 << 14); // 2. bit set edilirse 14. biti 1 yap
 8000a20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a26:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
          if (RxBuf[5] & 0x04) {
 8000a28:	4b5f      	ldr	r3, [pc, #380]	; (8000ba8 <program+0x1c8>)
 8000a2a:	795b      	ldrb	r3, [r3, #5]
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d005      	beq.n	8000a40 <program+0x60>
	         tempsel |= (1 << 15); // 3. bit set edilirse 15. biti 1 yap
 8000a34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
          if (RxBuf[5] & 0x08) {
 8000a40:	4b59      	ldr	r3, [pc, #356]	; (8000ba8 <program+0x1c8>)
 8000a42:	795b      	ldrb	r3, [r3, #5]
 8000a44:	f003 0308 	and.w	r3, r3, #8
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d003      	beq.n	8000a54 <program+0x74>
            tempsel |= (1 << 8); // 4. bit set edilirse 8. biti 1 yap  ayak
 8000a4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
          if (RxBuf[5] & 0x10) {
 8000a54:	4b54      	ldr	r3, [pc, #336]	; (8000ba8 <program+0x1c8>)
 8000a56:	795b      	ldrb	r3, [r3, #5]
 8000a58:	f003 0310 	and.w	r3, r3, #16
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d003      	beq.n	8000a68 <program+0x88>
             tempsel |= (1 << 9); // 5. bit set edilirse 9. biti 1 yap kemer
 8000a60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a66:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }

   selectedPrograms.program1.motor |= tempsel;
 8000a68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000a6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	84bb      	strh	r3, [r7, #36]	; 0x24
   selectedPrograms.program2.motor |= tempsel;
 8000a72:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000a74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a76:	4313      	orrs	r3, r2
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	857b      	strh	r3, [r7, #42]	; 0x2a
   selectedPrograms.program3.motor |= tempsel;
 8000a7c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000a7e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	863b      	strh	r3, [r7, #48]	; 0x30

   prg prgarry[]={selectedPrograms.program1,selectedPrograms.program2,selectedPrograms.program3};
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	f107 0220 	add.w	r2, r7, #32
 8000a8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a92:	6018      	str	r0, [r3, #0]
 8000a94:	3304      	adds	r3, #4
 8000a96:	8019      	strh	r1, [r3, #0]
 8000a98:	f107 0312 	add.w	r3, r7, #18
 8000a9c:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8000aa0:	6811      	ldr	r1, [r2, #0]
 8000aa2:	6019      	str	r1, [r3, #0]
 8000aa4:	8892      	ldrh	r2, [r2, #4]
 8000aa6:	809a      	strh	r2, [r3, #4]
 8000aa8:	f107 0318 	add.w	r3, r7, #24
 8000aac:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000ab0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ab4:	6018      	str	r0, [r3, #0]
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	8019      	strh	r1, [r3, #0]


   prg_time = time / prgsay; // Her bir program için süre
 8000aba:	88fa      	ldrh	r2, [r7, #6]
 8000abc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ac0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b39      	ldr	r3, [pc, #228]	; (8000bac <program+0x1cc>)
 8000ac8:	601a      	str	r2, [r3, #0]
   printf("Birim program zamani =%d\n\r",prg_time);
 8000aca:	4b38      	ldr	r3, [pc, #224]	; (8000bac <program+0x1cc>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4837      	ldr	r0, [pc, #220]	; (8000bb0 <program+0x1d0>)
 8000ad2:	f005 fdb5 	bl	8006640 <iprintf>
   uint8_t timerhesap=0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                   for (int var = 0; var < 3; var++) {
 8000adc:	2300      	movs	r3, #0
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ae0:	e055      	b.n	8000b8e <program+0x1ae>

                       if (prgarry[var].speed == 0) {
 8000ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	4413      	add	r3, r2
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	3340      	adds	r3, #64	; 0x40
 8000aee:	443b      	add	r3, r7
 8000af0:	3b32      	subs	r3, #50	; 0x32
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d105      	bne.n	8000b04 <program+0x124>
                    	    timerhesap++;
 8000af8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000afc:	3301      	adds	r3, #1
 8000afe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                            continue;
 8000b02:	e041      	b.n	8000b88 <program+0x1a8>


                       }

                	   printf("program id =%d\n\r",var+1);
 8000b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b06:	3301      	adds	r3, #1
 8000b08:	4619      	mov	r1, r3
 8000b0a:	482a      	ldr	r0, [pc, #168]	; (8000bb4 <program+0x1d4>)
 8000b0c:	f005 fd98 	bl	8006640 <iprintf>
                	   while(1){
                		   standartprogram(prgarry[var],var+1-timerhesap); // Programı çalıştır
 8000b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	b2d9      	uxtb	r1, r3
 8000b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b22:	4613      	mov	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	3340      	adds	r3, #64	; 0x40
 8000b2c:	443b      	add	r3, r7
 8000b2e:	3b34      	subs	r3, #52	; 0x34
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	4610      	mov	r0, r2
 8000b34:	889a      	ldrh	r2, [r3, #4]
 8000b36:	2300      	movs	r3, #0
 8000b38:	f362 030f 	bfi	r3, r2, #0, #16
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f000 f840 	bl	8000bc4 <standartprogram>

      	    	    	 if(total_time-timer >= (prg_time*(var+1-timerhesap)-2)){
 8000b44:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <program+0x1d8>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <program+0x1dc>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	4619      	mov	r1, r3
 8000b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b54:	1c5a      	adds	r2, r3, #1
 8000b56:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <program+0x1cc>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	fb02 f303 	mul.w	r3, r2, r3
 8000b66:	3b02      	subs	r3, #2
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	d205      	bcs.n	8000b78 <program+0x198>
      	    	    		 break;
      	    	    	 }
      	    	          if (Stop_Full()==1) { //prg çalışırken durdurma
 8000b6c:	f7ff ff0a 	bl	8000984 <Stop_Full>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d002      	beq.n	8000b7c <program+0x19c>
                		   standartprogram(prgarry[var],var+1-timerhesap); // Programı çalıştır
 8000b76:	e7cb      	b.n	8000b10 <program+0x130>
      	    	    		 break;
 8000b78:	bf00      	nop
 8000b7a:	e000      	b.n	8000b7e <program+0x19e>
      	    	    	    	   	            break;
 8000b7c:	bf00      	nop
      	    	    	  }

                	   }

  	    	           if (Stop_Full()==1) { //prg çalışırken durdurma
 8000b7e:	f7ff ff01 	bl	8000984 <Stop_Full>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d006      	beq.n	8000b96 <program+0x1b6>
                   for (int var = 0; var < 3; var++) {
 8000b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	dda6      	ble.n	8000ae2 <program+0x102>
 8000b94:	e000      	b.n	8000b98 <program+0x1b8>
  	    	   	            break;
 8000b96:	bf00      	nop
  	    	   	          }



			        }
      start=0;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <program+0x1e0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]




}
 8000b9e:	bf00      	nop
 8000ba0:	3740      	adds	r7, #64	; 0x40
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000650 	.word	0x20000650
 8000bac:	2000062c 	.word	0x2000062c
 8000bb0:	08007700 	.word	0x08007700
 8000bb4:	0800771c 	.word	0x0800771c
 8000bb8:	20000644 	.word	0x20000644
 8000bbc:	20000642 	.word	0x20000642
 8000bc0:	20000646 	.word	0x20000646

08000bc4 <standartprogram>:


void standartprogram (prg program,uint8_t pid){  //LOOP Mantıgı ile çalışan progrmalar. //0dan 10 a 10 dan 0 a gelen kod
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	e883 0003 	stmia.w	r3, {r0, r1}
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	71fb      	strb	r3, [r7, #7]


uint8_t var=0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
uint16_t t =0;//Motor bitleri
 8000bdc:	2300      	movs	r3, #0
 8000bde:	84bb      	strh	r3, [r7, #36]	; 0x24
msP.MotorSayi=0;  //motor sayaçları sıfırlandı
 8000be0:	4b8d      	ldr	r3, [pc, #564]	; (8000e18 <standartprogram+0x254>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	801a      	strh	r2, [r3, #0]
msP.MotorDuty=motorduty;
 8000be6:	4b8d      	ldr	r3, [pc, #564]	; (8000e1c <standartprogram+0x258>)
 8000be8:	881a      	ldrh	r2, [r3, #0]
 8000bea:	4b8b      	ldr	r3, [pc, #556]	; (8000e18 <standartprogram+0x254>)
 8000bec:	805a      	strh	r2, [r3, #2]
msP.TempDuty=tempduty;
 8000bee:	4b8c      	ldr	r3, [pc, #560]	; (8000e20 <standartprogram+0x25c>)
 8000bf0:	881a      	ldrh	r2, [r3, #0]
 8000bf2:	4b89      	ldr	r3, [pc, #548]	; (8000e18 <standartprogram+0x254>)
 8000bf4:	809a      	strh	r2, [r3, #4]

msP.MotorSayi = program.motor & 0xE000;  //ısıtıcılar aktif edildi
 8000bf6:	89bb      	ldrh	r3, [r7, #12]
 8000bf8:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8000bfc:	f023 031f 	bic.w	r3, r3, #31
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	4b85      	ldr	r3, [pc, #532]	; (8000e18 <standartprogram+0x254>)
 8000c04:	801a      	strh	r2, [r3, #0]
Pwm_Start(msP);          // PWM  out veriyor.
 8000c06:	4b84      	ldr	r3, [pc, #528]	; (8000e18 <standartprogram+0x254>)
 8000c08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c0c:	f7ff fc24 	bl	8000458 <Pwm_Start>
    //Motorları dönen kod

	    for (var = 0;  var < 10; ++var) {
 8000c10:	2300      	movs	r3, #0
 8000c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c16:	e077      	b.n	8000d08 <standartprogram+0x144>

	          if (Stop_Full()==1) { //prg çalışırken durdurma
 8000c18:	f7ff feb4 	bl	8000984 <Stop_Full>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d101      	bne.n	8000c26 <standartprogram+0x62>
	            stop1:
 8000c22:	bf00      	nop
	        	  break;
 8000c24:	e074      	b.n	8000d10 <standartprogram+0x14c>
	          }else

	          {

	    	    if (program.motor & ( 1 <<var)) //hangi motorların açık olacagına bakıyor.
 8000c26:	89bb      	ldrh	r3, [r7, #12]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c2e:	fa42 f303 	asr.w	r3, r2, r3
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d061      	beq.n	8000cfe <standartprogram+0x13a>
	    		{  /* n. bit 1 */

                 t =program.motor & 0xE000; //eger ısıtıcılar aktifse
 8000c3a:	89bb      	ldrh	r3, [r7, #12]
 8000c3c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8000c40:	f023 031f 	bic.w	r3, r3, #31
 8000c44:	84bb      	strh	r3, [r7, #36]	; 0x24
	    	     t |= 1<<var ;            //açık olan motor bitini çekiyor.
 8000c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000c56:	4313      	orrs	r3, r2
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	84bb      	strh	r3, [r7, #36]	; 0x24
	    	     msP.MotorSayi=t;            //motoru yüklüyor.
 8000c5c:	4a6e      	ldr	r2, [pc, #440]	; (8000e18 <standartprogram+0x254>)
 8000c5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c60:	8013      	strh	r3, [r2, #0]
	    	     msP.MotorDuty=motorduty;
 8000c62:	4b6e      	ldr	r3, [pc, #440]	; (8000e1c <standartprogram+0x258>)
 8000c64:	881a      	ldrh	r2, [r3, #0]
 8000c66:	4b6c      	ldr	r3, [pc, #432]	; (8000e18 <standartprogram+0x254>)
 8000c68:	805a      	strh	r2, [r3, #2]
	    	     msP.TempDuty=tempduty;
 8000c6a:	4b6d      	ldr	r3, [pc, #436]	; (8000e20 <standartprogram+0x25c>)
 8000c6c:	881a      	ldrh	r2, [r3, #0]
 8000c6e:	4b6a      	ldr	r3, [pc, #424]	; (8000e18 <standartprogram+0x254>)
 8000c70:	809a      	strh	r2, [r3, #4]
	    	     Pwm_Start(msP);         //pwm out veriyor.
 8000c72:	4b69      	ldr	r3, [pc, #420]	; (8000e18 <standartprogram+0x254>)
 8000c74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c78:	f7ff fbee 	bl	8000458 <Pwm_Start>
                 t=0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	84bb      	strh	r3, [r7, #36]	; 0x24

	    	     //--------------Program geçişleri için delay ve delayda durdurma kodu------------------//
	    	     uint32_t tickstart = HAL_GetTick();
 8000c80:	f001 fef4 	bl	8002a6c <HAL_GetTick>
 8000c84:	61b8      	str	r0, [r7, #24]
	    	     uint32_t wait = program.time*1000;
 8000c86:	7a3b      	ldrb	r3, [r7, #8]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8e:	fb02 f303 	mul.w	r3, r2, r3
 8000c92:	623b      	str	r3, [r7, #32]

	    	     /* Add a freq to guarantee minimum wait */
	    	     if (wait < HAL_MAX_DELAY)
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c9a:	d028      	beq.n	8000cee <standartprogram+0x12a>
	    	     {
	    	       wait += (uint32_t)(uwTickFreq);
 8000c9c:	4b61      	ldr	r3, [pc, #388]	; (8000e24 <standartprogram+0x260>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	623b      	str	r3, [r7, #32]
	    	     }

	    	     while ((HAL_GetTick() - tickstart) < wait)
 8000ca8:	e021      	b.n	8000cee <standartprogram+0x12a>
	    	     {
	    	    	 if (Stop_Full()==1 | start==0) { //prg çalışırken durdurma
 8000caa:	f7ff fe6b 	bl	8000984 <Stop_Full>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	bf0c      	ite	eq
 8000cb4:	2301      	moveq	r3, #1
 8000cb6:	2300      	movne	r3, #0
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b5b      	ldr	r3, [pc, #364]	; (8000e28 <standartprogram+0x264>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	bf0c      	ite	eq
 8000cc2:	2301      	moveq	r3, #1
 8000cc4:	2300      	movne	r3, #0
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d12b      	bne.n	8000d28 <standartprogram+0x164>
	    	    		 goto stop2;

	 	         }
	    	    	 if(total_time-timer >= (prg_time*pid)-1){
 8000cd0:	4b56      	ldr	r3, [pc, #344]	; (8000e2c <standartprogram+0x268>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b56      	ldr	r3, [pc, #344]	; (8000e30 <standartprogram+0x26c>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	4619      	mov	r1, r3
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	4a54      	ldr	r2, [pc, #336]	; (8000e34 <standartprogram+0x270>)
 8000ce2:	6812      	ldr	r2, [r2, #0]
 8000ce4:	fb02 f303 	mul.w	r3, r2, r3
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	4299      	cmp	r1, r3
 8000cec:	d21e      	bcs.n	8000d2c <standartprogram+0x168>
	    	     while ((HAL_GetTick() - tickstart) < wait)
 8000cee:	f001 febd 	bl	8002a6c <HAL_GetTick>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	6a3a      	ldr	r2, [r7, #32]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d8d5      	bhi.n	8000caa <standartprogram+0xe6>
	    for (var = 0;  var < 10; ++var) {
 8000cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d02:	3301      	adds	r3, #1
 8000d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d0c:	2b09      	cmp	r3, #9
 8000d0e:	d983      	bls.n	8000c18 <standartprogram+0x54>

		 }

	       // ikinci tur

	        for (var=var-1 ;  var >0; --var) {
 8000d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d14:	3b01      	subs	r3, #1
 8000d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d1a:	e073      	b.n	8000e04 <standartprogram+0x240>

	          if (Stop_Full()==1) { //prg çalışırken durdurma
 8000d1c:	f7ff fe32 	bl	8000984 <Stop_Full>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d106      	bne.n	8000d34 <standartprogram+0x170>
	            stop2:
 8000d26:	e004      	b.n	8000d32 <standartprogram+0x16e>
	    	    		 goto stop2;
 8000d28:	bf00      	nop
 8000d2a:	e070      	b.n	8000e0e <standartprogram+0x24a>
	    	    		 goto stop2;
 8000d2c:	bf00      	nop
 8000d2e:	e06e      	b.n	8000e0e <standartprogram+0x24a>
	    	     }

	    	      while ((HAL_GetTick() - tickstart) < wait)
	    	      {
	    	    	   if (Stop_Full()==1 | start==0) { //prg çalışırken durdurma
	    	    		 goto stop2;
 8000d30:	bf00      	nop
	        	  break;
 8000d32:	e06c      	b.n	8000e0e <standartprogram+0x24a>
	    	    if (program.motor & ( 1 <<var)) //hangi motorların açık olacagına bakıyor.
 8000d34:	89bb      	ldrh	r3, [r7, #12]
 8000d36:	461a      	mov	r2, r3
 8000d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d3c:	fa42 f303 	asr.w	r3, r2, r3
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d058      	beq.n	8000dfa <standartprogram+0x236>
	              t |=program.motor & 0xE000; //eger ısıtıcılar aktifse
 8000d48:	89bb      	ldrh	r3, [r7, #12]
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8000d50:	f023 031f 	bic.w	r3, r3, #31
 8000d54:	b21a      	sxth	r2, r3
 8000d56:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	84bb      	strh	r3, [r7, #36]	; 0x24
		    	  t |= 1<<var ;            //açık olan motor bitini çekiyor.
 8000d60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d64:	2201      	movs	r2, #1
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	84bb      	strh	r3, [r7, #36]	; 0x24
		    	  msP.MotorSayi=t;            //motoru yüklüyor.
 8000d76:	4a28      	ldr	r2, [pc, #160]	; (8000e18 <standartprogram+0x254>)
 8000d78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d7a:	8013      	strh	r3, [r2, #0]
		    	  msP.MotorDuty=motorduty;
 8000d7c:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <standartprogram+0x258>)
 8000d7e:	881a      	ldrh	r2, [r3, #0]
 8000d80:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <standartprogram+0x254>)
 8000d82:	805a      	strh	r2, [r3, #2]
		    	  msP.TempDuty=tempduty;
 8000d84:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <standartprogram+0x25c>)
 8000d86:	881a      	ldrh	r2, [r3, #0]
 8000d88:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <standartprogram+0x254>)
 8000d8a:	809a      	strh	r2, [r3, #4]
		    	  Pwm_Start(msP);         //pwm out veriyor.
 8000d8c:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <standartprogram+0x254>)
 8000d8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d92:	f7ff fb61 	bl	8000458 <Pwm_Start>
	              t=0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	84bb      	strh	r3, [r7, #36]	; 0x24
	    	     uint32_t tickstart = HAL_GetTick();
 8000d9a:	f001 fe67 	bl	8002a6c <HAL_GetTick>
 8000d9e:	6178      	str	r0, [r7, #20]
	    	     uint32_t wait = program.time*1000;
 8000da0:	7a3b      	ldrb	r3, [r7, #8]
 8000da2:	461a      	mov	r2, r3
 8000da4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da8:	fb02 f303 	mul.w	r3, r2, r3
 8000dac:	61fb      	str	r3, [r7, #28]
	    	     if (wait < HAL_MAX_DELAY)
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db4:	d019      	beq.n	8000dea <standartprogram+0x226>
	    	       wait += (uint32_t)(uwTickFreq);
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <standartprogram+0x260>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	61fb      	str	r3, [r7, #28]
	    	      while ((HAL_GetTick() - tickstart) < wait)
 8000dc2:	e012      	b.n	8000dea <standartprogram+0x226>
	    	    	   if (Stop_Full()==1 | start==0) { //prg çalışırken durdurma
 8000dc4:	f7ff fdde 	bl	8000984 <Stop_Full>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	bf0c      	ite	eq
 8000dce:	2301      	moveq	r3, #1
 8000dd0:	2300      	movne	r3, #0
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <standartprogram+0x264>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	bf0c      	ite	eq
 8000ddc:	2301      	moveq	r3, #1
 8000dde:	2300      	movne	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4313      	orrs	r3, r2
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1a2      	bne.n	8000d30 <standartprogram+0x16c>
	    	      while ((HAL_GetTick() - tickstart) < wait)
 8000dea:	f001 fe3f 	bl	8002a6c <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	69fa      	ldr	r2, [r7, #28]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d8e4      	bhi.n	8000dc4 <standartprogram+0x200>
	        for (var=var-1 ;  var >0; --var) {
 8000dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d187      	bne.n	8000d1c <standartprogram+0x158>





}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	; 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000624 	.word	0x20000624
 8000e1c:	2000063e 	.word	0x2000063e
 8000e20:	2000063c 	.word	0x2000063c
 8000e24:	200000a8 	.word	0x200000a8
 8000e28:	20000646 	.word	0x20000646
 8000e2c:	20000644 	.word	0x20000644
 8000e30:	20000642 	.word	0x20000642
 8000e34:	2000062c 	.word	0x2000062c

08000e38 <__io_putchar>:
static void MX_USART2_UART_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */

PUTCHAR_PROTOTYPE
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8000e40:	1d39      	adds	r1, r7, #4
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	2201      	movs	r2, #1
 8000e48:	4803      	ldr	r0, [pc, #12]	; (8000e58 <__io_putchar+0x20>)
 8000e4a:	f004 fa20 	bl	800528e <HAL_UART_Transmit>
  return ch;
 8000e4e:	687b      	ldr	r3, [r7, #4]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000091c 	.word	0x2000091c

08000e5c <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]

 if (huart-> Instance==USART2) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a2e      	ldr	r2, [pc, #184]	; (8000f28 <HAL_UARTEx_RxEventCallback+0xcc>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d11a      	bne.n	8000ea8 <HAL_UARTEx_RxEventCallback+0x4c>

		  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuffer_Size);
 8000e72:	223c      	movs	r2, #60	; 0x3c
 8000e74:	492d      	ldr	r1, [pc, #180]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xd0>)
 8000e76:	482e      	ldr	r0, [pc, #184]	; (8000f30 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000e78:	f004 fafc 	bl	8005474 <HAL_UARTEx_ReceiveToIdle_DMA>
		  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT); //Buffer alınırken yarıda kesmeye gitmesin diyeyapılmış işlemi.
 8000e7c:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0204 	bic.w	r2, r2, #4
 8000e8a:	601a      	str	r2, [r3, #0]

		    for (int i  = Size;  i<RxBuffer_Size; i++ ) { //BUFFER ESKİLERİ SİLME
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	e007      	b.n	8000ea2 <HAL_UARTEx_RxEventCallback+0x46>
		  				   			  RxBuf[i]=0;	}
 8000e92:	4a26      	ldr	r2, [pc, #152]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xd0>)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
		    for (int i  = Size;  i<RxBuffer_Size; i++ ) { //BUFFER ESKİLERİ SİLME
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2b3b      	cmp	r3, #59	; 0x3b
 8000ea6:	ddf4      	ble.n	8000e92 <HAL_UARTEx_RxEventCallback+0x36>
 }


 if (RxBuf[0]=='M' && RxBuf[1]=='D'){
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xd0>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b4d      	cmp	r3, #77	; 0x4d
 8000eae:	d119      	bne.n	8000ee4 <HAL_UARTEx_RxEventCallback+0x88>
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xd0>)
 8000eb2:	785b      	ldrb	r3, [r3, #1]
 8000eb4:	2b44      	cmp	r3, #68	; 0x44
 8000eb6:	d115      	bne.n	8000ee4 <HAL_UARTEx_RxEventCallback+0x88>
	 selectmotorduty();
 8000eb8:	f000 f988 	bl	80011cc <selectmotorduty>
	 RxBuf[0]=0;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xd0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
	 RxBuf[1]=0;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xd0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	705a      	strb	r2, [r3, #1]
	 RxBuf[2]=0;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xd0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit_DMA(&huart2, "OK\n\r", 4);
 8000ece:	2204      	movs	r2, #4
 8000ed0:	4919      	ldr	r1, [pc, #100]	; (8000f38 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000ed2:	4817      	ldr	r0, [pc, #92]	; (8000f30 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000ed4:	f004 fa5e 	bl	8005394 <HAL_UART_Transmit_DMA>
	printf("Motor Speed=%d",motorduty);
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_UARTEx_RxEventCallback+0xe0>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	4818      	ldr	r0, [pc, #96]	; (8000f40 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000ee0:	f005 fbae 	bl	8006640 <iprintf>


 }

if (RxBuf[0]=='T' && RxBuf[1]=='D'){
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xd0>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b54      	cmp	r3, #84	; 0x54
 8000eea:	d119      	bne.n	8000f20 <HAL_UARTEx_RxEventCallback+0xc4>
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xd0>)
 8000eee:	785b      	ldrb	r3, [r3, #1]
 8000ef0:	2b44      	cmp	r3, #68	; 0x44
 8000ef2:	d115      	bne.n	8000f20 <HAL_UARTEx_RxEventCallback+0xc4>
		 selecttempduty();
 8000ef4:	f000 f9e0 	bl	80012b8 <selecttempduty>
		  RxBuf[0]=0;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xd0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
		  RxBuf[1]=0;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xd0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	705a      	strb	r2, [r3, #1]
		  RxBuf[2]=0;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_UARTEx_RxEventCallback+0xd0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit_DMA(&huart2, "OK\n\r", 4);
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	490a      	ldr	r1, [pc, #40]	; (8000f38 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000f0e:	4808      	ldr	r0, [pc, #32]	; (8000f30 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000f10:	f004 fa40 	bl	8005394 <HAL_UART_Transmit_DMA>
		printf("Motor Speed=%d",tempduty);
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_UARTEx_RxEventCallback+0xe8>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000f1c:	f005 fb90 	bl	8006640 <iprintf>
}




}
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40004400 	.word	0x40004400
 8000f2c:	20000650 	.word	0x20000650
 8000f30:	2000091c 	.word	0x2000091c
 8000f34:	20000964 	.word	0x20000964
 8000f38:	08007730 	.word	0x08007730
 8000f3c:	2000063e 	.word	0x2000063e
 8000f40:	08007738 	.word	0x08007738
 8000f44:	2000063c 	.word	0x2000063c

08000f48 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==htim6.Instance){
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d14a      	bne.n	8000ff2 <HAL_TIM_PeriodElapsedCallback+0xaa>
		timerx++;
 8000f5c:	4b28      	ldr	r3, [pc, #160]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	4b26      	ldr	r3, [pc, #152]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f66:	801a      	strh	r2, [r3, #0]


     if(start==1)
 8000f68:	4b26      	ldr	r3, [pc, #152]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d118      	bne.n	8000fa2 <HAL_TIM_PeriodElapsedCallback+0x5a>
	    {
    	 pFlag=0;
 8000f70:	4b25      	ldr	r3, [pc, #148]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
	      timer--;
 8000f76:	4b25      	ldr	r3, [pc, #148]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000f80:	801a      	strh	r2, [r3, #0]

		    if(timer==0)
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d105      	bne.n	8000f96 <HAL_TIM_PeriodElapsedCallback+0x4e>
			    {
			              timer=0 ;
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	801a      	strh	r2, [r3, #0]
			              start=0;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
			    }
		    printf("Kalan süre= %d\n", timer);
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	481c      	ldr	r0, [pc, #112]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000f9e:	f005 fb4f 	bl	8006640 <iprintf>
	    }

     if(pFlag==1)
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d123      	bne.n	8000ff2 <HAL_TIM_PeriodElapsedCallback+0xaa>
	    {
    	  start=2;
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	701a      	strb	r2, [r3, #0]
	      timer--;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000fba:	801a      	strh	r2, [r3, #0]

		    if(timer==0)
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d105      	bne.n	8000fd0 <HAL_TIM_PeriodElapsedCallback+0x88>
			    {
			              timer=0;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	801a      	strh	r2, [r3, #0]
			              pFlag=0;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
			    }
		    sprintf(str, "Kalan süre= %d\n", timer);
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	490e      	ldr	r1, [pc, #56]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000fd8:	480e      	ldr	r0, [pc, #56]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000fda:	f005 fb43 	bl	8006664 <siprintf>
		    HAL_UART_Transmit_DMA(&huart2, str, strlen(str));
 8000fde:	480d      	ldr	r0, [pc, #52]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000fe0:	f7ff f916 	bl	8000210 <strlen>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	490a      	ldr	r1, [pc, #40]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000fec:	480a      	ldr	r0, [pc, #40]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000fee:	f004 f9d1 	bl	8005394 <HAL_UART_Transmit_DMA>



    }

}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200007fc 	.word	0x200007fc
 8001000:	20000640 	.word	0x20000640
 8001004:	20000646 	.word	0x20000646
 8001008:	2000064e 	.word	0x2000064e
 800100c:	20000642 	.word	0x20000642
 8001010:	08007748 	.word	0x08007748
 8001014:	2000068c 	.word	0x2000068c
 8001018:	2000091c 	.word	0x2000091c

0800101c <standarprgslctd>:



}

void standarprgslctd(){
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0


		  if(RxBuf[8]==0){                 //motorlar için duty seçimi
 8001020:	4b67      	ldr	r3, [pc, #412]	; (80011c0 <standarprgslctd+0x1a4>)
 8001022:	7a1b      	ldrb	r3, [r3, #8]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d103      	bne.n	8001030 <standarprgslctd+0x14>
			  motorduty=0;
 8001028:	4b66      	ldr	r3, [pc, #408]	; (80011c4 <standarprgslctd+0x1a8>)
 800102a:	2200      	movs	r2, #0
 800102c:	801a      	strh	r2, [r3, #0]
 800102e:	e05d      	b.n	80010ec <standarprgslctd+0xd0>
		  }
		  else if(RxBuf[8]==1) {
 8001030:	4b63      	ldr	r3, [pc, #396]	; (80011c0 <standarprgslctd+0x1a4>)
 8001032:	7a1b      	ldrb	r3, [r3, #8]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d104      	bne.n	8001042 <standarprgslctd+0x26>
			  motorduty=500;
 8001038:	4b62      	ldr	r3, [pc, #392]	; (80011c4 <standarprgslctd+0x1a8>)
 800103a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800103e:	801a      	strh	r2, [r3, #0]
 8001040:	e054      	b.n	80010ec <standarprgslctd+0xd0>
		  } else if(RxBuf[8]==2) {
 8001042:	4b5f      	ldr	r3, [pc, #380]	; (80011c0 <standarprgslctd+0x1a4>)
 8001044:	7a1b      	ldrb	r3, [r3, #8]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d104      	bne.n	8001054 <standarprgslctd+0x38>
			  motorduty=550;
 800104a:	4b5e      	ldr	r3, [pc, #376]	; (80011c4 <standarprgslctd+0x1a8>)
 800104c:	f240 2226 	movw	r2, #550	; 0x226
 8001050:	801a      	strh	r2, [r3, #0]
 8001052:	e04b      	b.n	80010ec <standarprgslctd+0xd0>
		  } else if(RxBuf[8]==3) {
 8001054:	4b5a      	ldr	r3, [pc, #360]	; (80011c0 <standarprgslctd+0x1a4>)
 8001056:	7a1b      	ldrb	r3, [r3, #8]
 8001058:	2b03      	cmp	r3, #3
 800105a:	d104      	bne.n	8001066 <standarprgslctd+0x4a>
			  motorduty=600;
 800105c:	4b59      	ldr	r3, [pc, #356]	; (80011c4 <standarprgslctd+0x1a8>)
 800105e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001062:	801a      	strh	r2, [r3, #0]
 8001064:	e042      	b.n	80010ec <standarprgslctd+0xd0>
		  } else if(RxBuf[8]==4) {
 8001066:	4b56      	ldr	r3, [pc, #344]	; (80011c0 <standarprgslctd+0x1a4>)
 8001068:	7a1b      	ldrb	r3, [r3, #8]
 800106a:	2b04      	cmp	r3, #4
 800106c:	d104      	bne.n	8001078 <standarprgslctd+0x5c>
			  motorduty=700;
 800106e:	4b55      	ldr	r3, [pc, #340]	; (80011c4 <standarprgslctd+0x1a8>)
 8001070:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001074:	801a      	strh	r2, [r3, #0]
 8001076:	e039      	b.n	80010ec <standarprgslctd+0xd0>
		  } else if(RxBuf[8]==5) {
 8001078:	4b51      	ldr	r3, [pc, #324]	; (80011c0 <standarprgslctd+0x1a4>)
 800107a:	7a1b      	ldrb	r3, [r3, #8]
 800107c:	2b05      	cmp	r3, #5
 800107e:	d104      	bne.n	800108a <standarprgslctd+0x6e>
			  motorduty=750;
 8001080:	4b50      	ldr	r3, [pc, #320]	; (80011c4 <standarprgslctd+0x1a8>)
 8001082:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001086:	801a      	strh	r2, [r3, #0]
 8001088:	e030      	b.n	80010ec <standarprgslctd+0xd0>
		  } else if(RxBuf[8]==6) {
 800108a:	4b4d      	ldr	r3, [pc, #308]	; (80011c0 <standarprgslctd+0x1a4>)
 800108c:	7a1b      	ldrb	r3, [r3, #8]
 800108e:	2b06      	cmp	r3, #6
 8001090:	d104      	bne.n	800109c <standarprgslctd+0x80>
			  motorduty=800;
 8001092:	4b4c      	ldr	r3, [pc, #304]	; (80011c4 <standarprgslctd+0x1a8>)
 8001094:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001098:	801a      	strh	r2, [r3, #0]
 800109a:	e027      	b.n	80010ec <standarprgslctd+0xd0>
		  } else if(RxBuf[8]==7) {
 800109c:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <standarprgslctd+0x1a4>)
 800109e:	7a1b      	ldrb	r3, [r3, #8]
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	d104      	bne.n	80010ae <standarprgslctd+0x92>
			  motorduty=850;
 80010a4:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <standarprgslctd+0x1a8>)
 80010a6:	f240 3252 	movw	r2, #850	; 0x352
 80010aa:	801a      	strh	r2, [r3, #0]
 80010ac:	e01e      	b.n	80010ec <standarprgslctd+0xd0>
		  } else if(RxBuf[8]==8) {
 80010ae:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <standarprgslctd+0x1a4>)
 80010b0:	7a1b      	ldrb	r3, [r3, #8]
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	d104      	bne.n	80010c0 <standarprgslctd+0xa4>
			  motorduty=900;
 80010b6:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <standarprgslctd+0x1a8>)
 80010b8:	f44f 7261 	mov.w	r2, #900	; 0x384
 80010bc:	801a      	strh	r2, [r3, #0]
 80010be:	e015      	b.n	80010ec <standarprgslctd+0xd0>
		  } else if(RxBuf[8]==9) {
 80010c0:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <standarprgslctd+0x1a4>)
 80010c2:	7a1b      	ldrb	r3, [r3, #8]
 80010c4:	2b09      	cmp	r3, #9
 80010c6:	d104      	bne.n	80010d2 <standarprgslctd+0xb6>
			  motorduty=950;
 80010c8:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <standarprgslctd+0x1a8>)
 80010ca:	f240 32b6 	movw	r2, #950	; 0x3b6
 80010ce:	801a      	strh	r2, [r3, #0]
 80010d0:	e00c      	b.n	80010ec <standarprgslctd+0xd0>
		  } else if(RxBuf[8]==10) {
 80010d2:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <standarprgslctd+0x1a4>)
 80010d4:	7a1b      	ldrb	r3, [r3, #8]
 80010d6:	2b0a      	cmp	r3, #10
 80010d8:	d104      	bne.n	80010e4 <standarprgslctd+0xc8>
			  motorduty=1000;
 80010da:	4b3a      	ldr	r3, [pc, #232]	; (80011c4 <standarprgslctd+0x1a8>)
 80010dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010e0:	801a      	strh	r2, [r3, #0]
 80010e2:	e003      	b.n	80010ec <standarprgslctd+0xd0>
		  }
		  else {
			  motorduty=500;
 80010e4:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <standarprgslctd+0x1a8>)
 80010e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010ea:	801a      	strh	r2, [r3, #0]
		  }


		  if(RxBuf[9]==0){                  //Isıstıcı için duty seçimi
 80010ec:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <standarprgslctd+0x1a4>)
 80010ee:	7a5b      	ldrb	r3, [r3, #9]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d103      	bne.n	80010fc <standarprgslctd+0xe0>
		 				  tempduty=0;
 80010f4:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <standarprgslctd+0x1ac>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	801a      	strh	r2, [r3, #0]
		 			  }




}
 80010fa:	e05d      	b.n	80011b8 <standarprgslctd+0x19c>
		 			    else if(RxBuf[9]==1) {
 80010fc:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <standarprgslctd+0x1a4>)
 80010fe:	7a5b      	ldrb	r3, [r3, #9]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d104      	bne.n	800110e <standarprgslctd+0xf2>
		 				  tempduty=500;
 8001104:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <standarprgslctd+0x1ac>)
 8001106:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800110a:	801a      	strh	r2, [r3, #0]
}
 800110c:	e054      	b.n	80011b8 <standarprgslctd+0x19c>
		 			  } else if(RxBuf[9]==2) {
 800110e:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <standarprgslctd+0x1a4>)
 8001110:	7a5b      	ldrb	r3, [r3, #9]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d104      	bne.n	8001120 <standarprgslctd+0x104>
		 				  tempduty=550;
 8001116:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <standarprgslctd+0x1ac>)
 8001118:	f240 2226 	movw	r2, #550	; 0x226
 800111c:	801a      	strh	r2, [r3, #0]
}
 800111e:	e04b      	b.n	80011b8 <standarprgslctd+0x19c>
		 			  } else if(RxBuf[9]==3) {
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <standarprgslctd+0x1a4>)
 8001122:	7a5b      	ldrb	r3, [r3, #9]
 8001124:	2b03      	cmp	r3, #3
 8001126:	d104      	bne.n	8001132 <standarprgslctd+0x116>
		 				  tempduty=600;
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <standarprgslctd+0x1ac>)
 800112a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800112e:	801a      	strh	r2, [r3, #0]
}
 8001130:	e042      	b.n	80011b8 <standarprgslctd+0x19c>
		 			  } else if(RxBuf[9]==4) {
 8001132:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <standarprgslctd+0x1a4>)
 8001134:	7a5b      	ldrb	r3, [r3, #9]
 8001136:	2b04      	cmp	r3, #4
 8001138:	d104      	bne.n	8001144 <standarprgslctd+0x128>
		 				  tempduty=700;
 800113a:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <standarprgslctd+0x1ac>)
 800113c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001140:	801a      	strh	r2, [r3, #0]
}
 8001142:	e039      	b.n	80011b8 <standarprgslctd+0x19c>
		 			  } else if(RxBuf[9]==5) {
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <standarprgslctd+0x1a4>)
 8001146:	7a5b      	ldrb	r3, [r3, #9]
 8001148:	2b05      	cmp	r3, #5
 800114a:	d104      	bne.n	8001156 <standarprgslctd+0x13a>
		 				  tempduty=750;
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <standarprgslctd+0x1ac>)
 800114e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001152:	801a      	strh	r2, [r3, #0]
}
 8001154:	e030      	b.n	80011b8 <standarprgslctd+0x19c>
		 			  } else if(RxBuf[9]==6) {
 8001156:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <standarprgslctd+0x1a4>)
 8001158:	7a5b      	ldrb	r3, [r3, #9]
 800115a:	2b06      	cmp	r3, #6
 800115c:	d104      	bne.n	8001168 <standarprgslctd+0x14c>
		 				  tempduty=800;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <standarprgslctd+0x1ac>)
 8001160:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001164:	801a      	strh	r2, [r3, #0]
}
 8001166:	e027      	b.n	80011b8 <standarprgslctd+0x19c>
		 			  } else if(RxBuf[9]==7) {
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <standarprgslctd+0x1a4>)
 800116a:	7a5b      	ldrb	r3, [r3, #9]
 800116c:	2b07      	cmp	r3, #7
 800116e:	d104      	bne.n	800117a <standarprgslctd+0x15e>
		 				  tempduty=850;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <standarprgslctd+0x1ac>)
 8001172:	f240 3252 	movw	r2, #850	; 0x352
 8001176:	801a      	strh	r2, [r3, #0]
}
 8001178:	e01e      	b.n	80011b8 <standarprgslctd+0x19c>
		 			  } else if(RxBuf[9]==8) {
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <standarprgslctd+0x1a4>)
 800117c:	7a5b      	ldrb	r3, [r3, #9]
 800117e:	2b08      	cmp	r3, #8
 8001180:	d104      	bne.n	800118c <standarprgslctd+0x170>
		 				  tempduty=900;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <standarprgslctd+0x1ac>)
 8001184:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001188:	801a      	strh	r2, [r3, #0]
}
 800118a:	e015      	b.n	80011b8 <standarprgslctd+0x19c>
		 			  } else if(RxBuf[9]==9) {
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <standarprgslctd+0x1a4>)
 800118e:	7a5b      	ldrb	r3, [r3, #9]
 8001190:	2b09      	cmp	r3, #9
 8001192:	d104      	bne.n	800119e <standarprgslctd+0x182>
		 				  tempduty=950;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <standarprgslctd+0x1ac>)
 8001196:	f240 32b6 	movw	r2, #950	; 0x3b6
 800119a:	801a      	strh	r2, [r3, #0]
}
 800119c:	e00c      	b.n	80011b8 <standarprgslctd+0x19c>
		 			  } else if(RxBuf[9]==10) {
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <standarprgslctd+0x1a4>)
 80011a0:	7a5b      	ldrb	r3, [r3, #9]
 80011a2:	2b0a      	cmp	r3, #10
 80011a4:	d104      	bne.n	80011b0 <standarprgslctd+0x194>
		 				  tempduty=1000;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <standarprgslctd+0x1ac>)
 80011a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011ac:	801a      	strh	r2, [r3, #0]
}
 80011ae:	e003      	b.n	80011b8 <standarprgslctd+0x19c>
		 			     tempduty=500;
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <standarprgslctd+0x1ac>)
 80011b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011b6:	801a      	strh	r2, [r3, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	20000650 	.word	0x20000650
 80011c4:	2000063e 	.word	0x2000063e
 80011c8:	2000063c 	.word	0x2000063c

080011cc <selectmotorduty>:


void selectmotorduty(){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

	  if(RxBuf[2]==0){                 //motorlar için duty seçimi
 80011d0:	4b36      	ldr	r3, [pc, #216]	; (80012ac <selectmotorduty+0xe0>)
 80011d2:	789b      	ldrb	r3, [r3, #2]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d103      	bne.n	80011e0 <selectmotorduty+0x14>
		  motorduty=0;
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <selectmotorduty+0xe4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	801a      	strh	r2, [r3, #0]
 80011de:	e05d      	b.n	800129c <selectmotorduty+0xd0>
	  }
	  else if(RxBuf[2]==1) {
 80011e0:	4b32      	ldr	r3, [pc, #200]	; (80012ac <selectmotorduty+0xe0>)
 80011e2:	789b      	ldrb	r3, [r3, #2]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d104      	bne.n	80011f2 <selectmotorduty+0x26>
		  motorduty=500;
 80011e8:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <selectmotorduty+0xe4>)
 80011ea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011ee:	801a      	strh	r2, [r3, #0]
 80011f0:	e054      	b.n	800129c <selectmotorduty+0xd0>
	  } else if(RxBuf[2]==2) {
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <selectmotorduty+0xe0>)
 80011f4:	789b      	ldrb	r3, [r3, #2]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d104      	bne.n	8001204 <selectmotorduty+0x38>
		  motorduty=550;
 80011fa:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <selectmotorduty+0xe4>)
 80011fc:	f240 2226 	movw	r2, #550	; 0x226
 8001200:	801a      	strh	r2, [r3, #0]
 8001202:	e04b      	b.n	800129c <selectmotorduty+0xd0>
	  } else if(RxBuf[2]==3) {
 8001204:	4b29      	ldr	r3, [pc, #164]	; (80012ac <selectmotorduty+0xe0>)
 8001206:	789b      	ldrb	r3, [r3, #2]
 8001208:	2b03      	cmp	r3, #3
 800120a:	d104      	bne.n	8001216 <selectmotorduty+0x4a>
		  motorduty=600;
 800120c:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <selectmotorduty+0xe4>)
 800120e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001212:	801a      	strh	r2, [r3, #0]
 8001214:	e042      	b.n	800129c <selectmotorduty+0xd0>
	  } else if(RxBuf[2]==4) {
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <selectmotorduty+0xe0>)
 8001218:	789b      	ldrb	r3, [r3, #2]
 800121a:	2b04      	cmp	r3, #4
 800121c:	d104      	bne.n	8001228 <selectmotorduty+0x5c>
		  motorduty=700;
 800121e:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <selectmotorduty+0xe4>)
 8001220:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001224:	801a      	strh	r2, [r3, #0]
 8001226:	e039      	b.n	800129c <selectmotorduty+0xd0>
	  } else if(RxBuf[2]==5) {
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <selectmotorduty+0xe0>)
 800122a:	789b      	ldrb	r3, [r3, #2]
 800122c:	2b05      	cmp	r3, #5
 800122e:	d104      	bne.n	800123a <selectmotorduty+0x6e>
		  motorduty=750;
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <selectmotorduty+0xe4>)
 8001232:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001236:	801a      	strh	r2, [r3, #0]
 8001238:	e030      	b.n	800129c <selectmotorduty+0xd0>
	  } else if(RxBuf[2]==6) {
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <selectmotorduty+0xe0>)
 800123c:	789b      	ldrb	r3, [r3, #2]
 800123e:	2b06      	cmp	r3, #6
 8001240:	d104      	bne.n	800124c <selectmotorduty+0x80>
		  motorduty=800;
 8001242:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <selectmotorduty+0xe4>)
 8001244:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001248:	801a      	strh	r2, [r3, #0]
 800124a:	e027      	b.n	800129c <selectmotorduty+0xd0>
	  } else if(RxBuf[2]==7) {
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <selectmotorduty+0xe0>)
 800124e:	789b      	ldrb	r3, [r3, #2]
 8001250:	2b07      	cmp	r3, #7
 8001252:	d104      	bne.n	800125e <selectmotorduty+0x92>
		  motorduty=850;
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <selectmotorduty+0xe4>)
 8001256:	f240 3252 	movw	r2, #850	; 0x352
 800125a:	801a      	strh	r2, [r3, #0]
 800125c:	e01e      	b.n	800129c <selectmotorduty+0xd0>
	  } else if(RxBuf[2]==8) {
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <selectmotorduty+0xe0>)
 8001260:	789b      	ldrb	r3, [r3, #2]
 8001262:	2b08      	cmp	r3, #8
 8001264:	d104      	bne.n	8001270 <selectmotorduty+0xa4>
		  motorduty=900;
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <selectmotorduty+0xe4>)
 8001268:	f44f 7261 	mov.w	r2, #900	; 0x384
 800126c:	801a      	strh	r2, [r3, #0]
 800126e:	e015      	b.n	800129c <selectmotorduty+0xd0>
	  } else if(RxBuf[2]==9) {
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <selectmotorduty+0xe0>)
 8001272:	789b      	ldrb	r3, [r3, #2]
 8001274:	2b09      	cmp	r3, #9
 8001276:	d104      	bne.n	8001282 <selectmotorduty+0xb6>
		  motorduty=950;
 8001278:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <selectmotorduty+0xe4>)
 800127a:	f240 32b6 	movw	r2, #950	; 0x3b6
 800127e:	801a      	strh	r2, [r3, #0]
 8001280:	e00c      	b.n	800129c <selectmotorduty+0xd0>
	  } else if(RxBuf[2]==10) {
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <selectmotorduty+0xe0>)
 8001284:	789b      	ldrb	r3, [r3, #2]
 8001286:	2b0a      	cmp	r3, #10
 8001288:	d104      	bne.n	8001294 <selectmotorduty+0xc8>
		  motorduty=1000;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <selectmotorduty+0xe4>)
 800128c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001290:	801a      	strh	r2, [r3, #0]
 8001292:	e003      	b.n	800129c <selectmotorduty+0xd0>
	  }
	  else {
		  motorduty=500;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <selectmotorduty+0xe4>)
 8001296:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800129a:	801a      	strh	r2, [r3, #0]
	  }
	  printf("Motor char=%d",RxBuf[2]);
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <selectmotorduty+0xe0>)
 800129e:	789b      	ldrb	r3, [r3, #2]
 80012a0:	4619      	mov	r1, r3
 80012a2:	4804      	ldr	r0, [pc, #16]	; (80012b4 <selectmotorduty+0xe8>)
 80012a4:	f005 f9cc 	bl	8006640 <iprintf>

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000650 	.word	0x20000650
 80012b0:	2000063e 	.word	0x2000063e
 80012b4:	0800775c 	.word	0x0800775c

080012b8 <selecttempduty>:

void selecttempduty(){
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
	 if(RxBuf[2]==0){                  //Isıstıcı için duty seçimi
 80012bc:	4b34      	ldr	r3, [pc, #208]	; (8001390 <selecttempduty+0xd8>)
 80012be:	789b      	ldrb	r3, [r3, #2]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d103      	bne.n	80012cc <selecttempduty+0x14>
				  tempduty=0;
 80012c4:	4b33      	ldr	r3, [pc, #204]	; (8001394 <selecttempduty+0xdc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	801a      	strh	r2, [r3, #0]
		   else{
			     tempduty=500;
			  }


}
 80012ca:	e05d      	b.n	8001388 <selecttempduty+0xd0>
			    else if(RxBuf[2]==1) {
 80012cc:	4b30      	ldr	r3, [pc, #192]	; (8001390 <selecttempduty+0xd8>)
 80012ce:	789b      	ldrb	r3, [r3, #2]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d104      	bne.n	80012de <selecttempduty+0x26>
				  tempduty=500;
 80012d4:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <selecttempduty+0xdc>)
 80012d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012da:	801a      	strh	r2, [r3, #0]
}
 80012dc:	e054      	b.n	8001388 <selecttempduty+0xd0>
			  } else if(RxBuf[2]==2) {
 80012de:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <selecttempduty+0xd8>)
 80012e0:	789b      	ldrb	r3, [r3, #2]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d104      	bne.n	80012f0 <selecttempduty+0x38>
				  tempduty=550;
 80012e6:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <selecttempduty+0xdc>)
 80012e8:	f240 2226 	movw	r2, #550	; 0x226
 80012ec:	801a      	strh	r2, [r3, #0]
}
 80012ee:	e04b      	b.n	8001388 <selecttempduty+0xd0>
			  } else if(RxBuf[2]==3) {
 80012f0:	4b27      	ldr	r3, [pc, #156]	; (8001390 <selecttempduty+0xd8>)
 80012f2:	789b      	ldrb	r3, [r3, #2]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d104      	bne.n	8001302 <selecttempduty+0x4a>
				  tempduty=600;
 80012f8:	4b26      	ldr	r3, [pc, #152]	; (8001394 <selecttempduty+0xdc>)
 80012fa:	f44f 7216 	mov.w	r2, #600	; 0x258
 80012fe:	801a      	strh	r2, [r3, #0]
}
 8001300:	e042      	b.n	8001388 <selecttempduty+0xd0>
			  } else if(RxBuf[2]==4) {
 8001302:	4b23      	ldr	r3, [pc, #140]	; (8001390 <selecttempduty+0xd8>)
 8001304:	789b      	ldrb	r3, [r3, #2]
 8001306:	2b04      	cmp	r3, #4
 8001308:	d104      	bne.n	8001314 <selecttempduty+0x5c>
				  tempduty=700;
 800130a:	4b22      	ldr	r3, [pc, #136]	; (8001394 <selecttempduty+0xdc>)
 800130c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001310:	801a      	strh	r2, [r3, #0]
}
 8001312:	e039      	b.n	8001388 <selecttempduty+0xd0>
			  } else if(RxBuf[2]==5) {
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <selecttempduty+0xd8>)
 8001316:	789b      	ldrb	r3, [r3, #2]
 8001318:	2b05      	cmp	r3, #5
 800131a:	d104      	bne.n	8001326 <selecttempduty+0x6e>
				  tempduty=750;
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <selecttempduty+0xdc>)
 800131e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001322:	801a      	strh	r2, [r3, #0]
}
 8001324:	e030      	b.n	8001388 <selecttempduty+0xd0>
			  } else if(RxBuf[2]==6) {
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <selecttempduty+0xd8>)
 8001328:	789b      	ldrb	r3, [r3, #2]
 800132a:	2b06      	cmp	r3, #6
 800132c:	d104      	bne.n	8001338 <selecttempduty+0x80>
				  tempduty=800;
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <selecttempduty+0xdc>)
 8001330:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001334:	801a      	strh	r2, [r3, #0]
}
 8001336:	e027      	b.n	8001388 <selecttempduty+0xd0>
			  } else if(RxBuf[2]==7) {
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <selecttempduty+0xd8>)
 800133a:	789b      	ldrb	r3, [r3, #2]
 800133c:	2b07      	cmp	r3, #7
 800133e:	d104      	bne.n	800134a <selecttempduty+0x92>
				  tempduty=850;
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <selecttempduty+0xdc>)
 8001342:	f240 3252 	movw	r2, #850	; 0x352
 8001346:	801a      	strh	r2, [r3, #0]
}
 8001348:	e01e      	b.n	8001388 <selecttempduty+0xd0>
			  } else if(RxBuf[2]==8) {
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <selecttempduty+0xd8>)
 800134c:	789b      	ldrb	r3, [r3, #2]
 800134e:	2b08      	cmp	r3, #8
 8001350:	d104      	bne.n	800135c <selecttempduty+0xa4>
				  tempduty=900;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <selecttempduty+0xdc>)
 8001354:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001358:	801a      	strh	r2, [r3, #0]
}
 800135a:	e015      	b.n	8001388 <selecttempduty+0xd0>
			  } else if(RxBuf[2]==9) {
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <selecttempduty+0xd8>)
 800135e:	789b      	ldrb	r3, [r3, #2]
 8001360:	2b09      	cmp	r3, #9
 8001362:	d104      	bne.n	800136e <selecttempduty+0xb6>
				  tempduty=950;
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <selecttempduty+0xdc>)
 8001366:	f240 32b6 	movw	r2, #950	; 0x3b6
 800136a:	801a      	strh	r2, [r3, #0]
}
 800136c:	e00c      	b.n	8001388 <selecttempduty+0xd0>
			  } else if(RxBuf[2]==10) {
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <selecttempduty+0xd8>)
 8001370:	789b      	ldrb	r3, [r3, #2]
 8001372:	2b0a      	cmp	r3, #10
 8001374:	d104      	bne.n	8001380 <selecttempduty+0xc8>
				  tempduty=1000;
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <selecttempduty+0xdc>)
 8001378:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800137c:	801a      	strh	r2, [r3, #0]
}
 800137e:	e003      	b.n	8001388 <selecttempduty+0xd0>
			     tempduty=500;
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <selecttempduty+0xdc>)
 8001382:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001386:	801a      	strh	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000650 	.word	0x20000650
 8001394:	2000063c 	.word	0x2000063c

08001398 <standart>:

void standart(){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

	 //dogrulma komutu ve timer sıfırlama...
		  if(RxBuf[0]=='R' && RxBuf[1]=='S'&& RxBuf[2]=='T')
 800139c:	4b87      	ldr	r3, [pc, #540]	; (80015bc <standart+0x224>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b52      	cmp	r3, #82	; 0x52
 80013a2:	d11b      	bne.n	80013dc <standart+0x44>
 80013a4:	4b85      	ldr	r3, [pc, #532]	; (80015bc <standart+0x224>)
 80013a6:	785b      	ldrb	r3, [r3, #1]
 80013a8:	2b53      	cmp	r3, #83	; 0x53
 80013aa:	d117      	bne.n	80013dc <standart+0x44>
 80013ac:	4b83      	ldr	r3, [pc, #524]	; (80015bc <standart+0x224>)
 80013ae:	789b      	ldrb	r3, [r3, #2]
 80013b0:	2b54      	cmp	r3, #84	; 0x54
 80013b2:	d113      	bne.n	80013dc <standart+0x44>
		  { RxBuf[0]=0;
 80013b4:	4b81      	ldr	r3, [pc, #516]	; (80015bc <standart+0x224>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
		    RxBuf[1]=0;
 80013ba:	4b80      	ldr	r3, [pc, #512]	; (80015bc <standart+0x224>)
 80013bc:	2200      	movs	r2, #0
 80013be:	705a      	strb	r2, [r3, #1]
		    RxBuf[2]=0;
 80013c0:	4b7e      	ldr	r3, [pc, #504]	; (80015bc <standart+0x224>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	709a      	strb	r2, [r3, #2]
		    timerx=0;
 80013c6:	4b7e      	ldr	r3, [pc, #504]	; (80015c0 <standart+0x228>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	801a      	strh	r2, [r3, #0]
		    pFlag=0;
 80013cc:	4b7d      	ldr	r3, [pc, #500]	; (80015c4 <standart+0x22c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
		    HAL_UART_Transmit_DMA(&huart2, "OK\n\r", 4);
 80013d2:	2204      	movs	r2, #4
 80013d4:	497c      	ldr	r1, [pc, #496]	; (80015c8 <standart+0x230>)
 80013d6:	487d      	ldr	r0, [pc, #500]	; (80015cc <standart+0x234>)
 80013d8:	f003 ffdc 	bl	8005394 <HAL_UART_Transmit_DMA>
		  }

		  //Tüm sistemi durdurma...
		  if(RxBuf[0]=='S' && RxBuf[1]=='T'&& RxBuf[2]=='P')
 80013dc:	4b77      	ldr	r3, [pc, #476]	; (80015bc <standart+0x224>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b53      	cmp	r3, #83	; 0x53
 80013e2:	d13d      	bne.n	8001460 <standart+0xc8>
 80013e4:	4b75      	ldr	r3, [pc, #468]	; (80015bc <standart+0x224>)
 80013e6:	785b      	ldrb	r3, [r3, #1]
 80013e8:	2b54      	cmp	r3, #84	; 0x54
 80013ea:	d139      	bne.n	8001460 <standart+0xc8>
 80013ec:	4b73      	ldr	r3, [pc, #460]	; (80015bc <standart+0x224>)
 80013ee:	789b      	ldrb	r3, [r3, #2]
 80013f0:	2b50      	cmp	r3, #80	; 0x50
 80013f2:	d135      	bne.n	8001460 <standart+0xc8>
		 	  {
			   stop:
 80013f4:	bf00      	nop
		 	   start=0;
 80013f6:	4b76      	ldr	r3, [pc, #472]	; (80015d0 <standart+0x238>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
		 	   timer=0;
 80013fc:	4b75      	ldr	r3, [pc, #468]	; (80015d4 <standart+0x23c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	801a      	strh	r2, [r3, #0]
			   HAL_UART_Transmit_DMA(&huart2, "OK\n\r", 4);
 8001402:	2204      	movs	r2, #4
 8001404:	4970      	ldr	r1, [pc, #448]	; (80015c8 <standart+0x230>)
 8001406:	4871      	ldr	r0, [pc, #452]	; (80015cc <standart+0x234>)
 8001408:	f003 ffc4 	bl	8005394 <HAL_UART_Transmit_DMA>
			   a1=0b1111111111111111;  //Tüm sistem pin seçildi
 800140c:	4b72      	ldr	r3, [pc, #456]	; (80015d8 <standart+0x240>)
 800140e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001412:	601a      	str	r2, [r3, #0]
		 	   a2=0;                   //duty sıfırlandı
 8001414:	4b71      	ldr	r3, [pc, #452]	; (80015dc <standart+0x244>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
		 	   ms.MotorSayi=a1;
 800141a:	4b6f      	ldr	r3, [pc, #444]	; (80015d8 <standart+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	b29a      	uxth	r2, r3
 8001420:	4b6f      	ldr	r3, [pc, #444]	; (80015e0 <standart+0x248>)
 8001422:	801a      	strh	r2, [r3, #0]
		 	   ms.MotorDuty=a2;
 8001424:	4b6d      	ldr	r3, [pc, #436]	; (80015dc <standart+0x244>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	b29a      	uxth	r2, r3
 800142a:	4b6d      	ldr	r3, [pc, #436]	; (80015e0 <standart+0x248>)
 800142c:	805a      	strh	r2, [r3, #2]
		 	   ms.TempDuty=a2;
 800142e:	4b6b      	ldr	r3, [pc, #428]	; (80015dc <standart+0x244>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b6a      	ldr	r3, [pc, #424]	; (80015e0 <standart+0x248>)
 8001436:	809a      	strh	r2, [r3, #4]
		 	   Pwm_Start(ms);
 8001438:	4b69      	ldr	r3, [pc, #420]	; (80015e0 <standart+0x248>)
 800143a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800143e:	f7ff f80b 	bl	8000458 <Pwm_Start>

		 	   pFlag=0;
 8001442:	4b60      	ldr	r3, [pc, #384]	; (80015c4 <standart+0x22c>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
		 	   timerx=0;
 8001448:	4b5d      	ldr	r3, [pc, #372]	; (80015c0 <standart+0x228>)
 800144a:	2200      	movs	r2, #0
 800144c:	801a      	strh	r2, [r3, #0]


		 	   RxBuf[0]=0;
 800144e:	4b5b      	ldr	r3, [pc, #364]	; (80015bc <standart+0x224>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
		 	   RxBuf[1]=0;
 8001454:	4b59      	ldr	r3, [pc, #356]	; (80015bc <standart+0x224>)
 8001456:	2200      	movs	r2, #0
 8001458:	705a      	strb	r2, [r3, #1]
		 	   RxBuf[2]=0;
 800145a:	4b58      	ldr	r3, [pc, #352]	; (80015bc <standart+0x224>)
 800145c:	2200      	movs	r2, #0
 800145e:	709a      	strb	r2, [r3, #2]

		 	 }

		  //Tüm sistemi aktif test...
		  if(RxBuf[0]=='T' && RxBuf[1]=='S'&& RxBuf[2]=='1')
 8001460:	4b56      	ldr	r3, [pc, #344]	; (80015bc <standart+0x224>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b54      	cmp	r3, #84	; 0x54
 8001466:	d134      	bne.n	80014d2 <standart+0x13a>
 8001468:	4b54      	ldr	r3, [pc, #336]	; (80015bc <standart+0x224>)
 800146a:	785b      	ldrb	r3, [r3, #1]
 800146c:	2b53      	cmp	r3, #83	; 0x53
 800146e:	d130      	bne.n	80014d2 <standart+0x13a>
 8001470:	4b52      	ldr	r3, [pc, #328]	; (80015bc <standart+0x224>)
 8001472:	789b      	ldrb	r3, [r3, #2]
 8001474:	2b31      	cmp	r3, #49	; 0x31
 8001476:	d12c      	bne.n	80014d2 <standart+0x13a>
		 	  {
			    RxBuf[0]=0;
 8001478:	4b50      	ldr	r3, [pc, #320]	; (80015bc <standart+0x224>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
			    RxBuf[1]=0;
 800147e:	4b4f      	ldr	r3, [pc, #316]	; (80015bc <standart+0x224>)
 8001480:	2200      	movs	r2, #0
 8001482:	705a      	strb	r2, [r3, #1]
			    RxBuf[2]=0;
 8001484:	4b4d      	ldr	r3, [pc, #308]	; (80015bc <standart+0x224>)
 8001486:	2200      	movs	r2, #0
 8001488:	709a      	strb	r2, [r3, #2]

			   a1=0b1111111111111111;  //Tüm sistem pin seçildi
 800148a:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <standart+0x240>)
 800148c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001490:	601a      	str	r2, [r3, #0]
		 	   a2=700;                   //duty sıfırlandı
 8001492:	4b52      	ldr	r3, [pc, #328]	; (80015dc <standart+0x244>)
 8001494:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001498:	601a      	str	r2, [r3, #0]
		 	   ms.MotorSayi=a1;
 800149a:	4b4f      	ldr	r3, [pc, #316]	; (80015d8 <standart+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	b29a      	uxth	r2, r3
 80014a0:	4b4f      	ldr	r3, [pc, #316]	; (80015e0 <standart+0x248>)
 80014a2:	801a      	strh	r2, [r3, #0]
		 	   ms.MotorDuty=a2;
 80014a4:	4b4d      	ldr	r3, [pc, #308]	; (80015dc <standart+0x244>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b4d      	ldr	r3, [pc, #308]	; (80015e0 <standart+0x248>)
 80014ac:	805a      	strh	r2, [r3, #2]
		 	   ms.TempDuty=a2;
 80014ae:	4b4b      	ldr	r3, [pc, #300]	; (80015dc <standart+0x244>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4b4a      	ldr	r3, [pc, #296]	; (80015e0 <standart+0x248>)
 80014b6:	809a      	strh	r2, [r3, #4]
		 	   Pwm_Start(ms);
 80014b8:	4b49      	ldr	r3, [pc, #292]	; (80015e0 <standart+0x248>)
 80014ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014be:	f7fe ffcb 	bl	8000458 <Pwm_Start>
		 	   //pFlag=0;
		 	   timerx=0;
 80014c2:	4b3f      	ldr	r3, [pc, #252]	; (80015c0 <standart+0x228>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	801a      	strh	r2, [r3, #0]
		 	   HAL_UART_Transmit_DMA(&huart2, "OK\n\r", 4);
 80014c8:	2204      	movs	r2, #4
 80014ca:	493f      	ldr	r1, [pc, #252]	; (80015c8 <standart+0x230>)
 80014cc:	483f      	ldr	r0, [pc, #252]	; (80015cc <standart+0x234>)
 80014ce:	f003 ff61 	bl	8005394 <HAL_UART_Transmit_DMA>

		 	   }
		  //Tüm sistemi aktif test2...
		  if(RxBuf[0]=='T' && RxBuf[1]=='S'&& RxBuf[2]=='2')
 80014d2:	4b3a      	ldr	r3, [pc, #232]	; (80015bc <standart+0x224>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b54      	cmp	r3, #84	; 0x54
 80014d8:	d134      	bne.n	8001544 <standart+0x1ac>
 80014da:	4b38      	ldr	r3, [pc, #224]	; (80015bc <standart+0x224>)
 80014dc:	785b      	ldrb	r3, [r3, #1]
 80014de:	2b53      	cmp	r3, #83	; 0x53
 80014e0:	d130      	bne.n	8001544 <standart+0x1ac>
 80014e2:	4b36      	ldr	r3, [pc, #216]	; (80015bc <standart+0x224>)
 80014e4:	789b      	ldrb	r3, [r3, #2]
 80014e6:	2b32      	cmp	r3, #50	; 0x32
 80014e8:	d12c      	bne.n	8001544 <standart+0x1ac>
		 	  {
			    RxBuf[0]=0;
 80014ea:	4b34      	ldr	r3, [pc, #208]	; (80015bc <standart+0x224>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
			    RxBuf[1]=0;
 80014f0:	4b32      	ldr	r3, [pc, #200]	; (80015bc <standart+0x224>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	705a      	strb	r2, [r3, #1]
			    RxBuf[2]=0;
 80014f6:	4b31      	ldr	r3, [pc, #196]	; (80015bc <standart+0x224>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	709a      	strb	r2, [r3, #2]

			   a1=0b1111111111111111;  //Tüm sistem pin seçildi
 80014fc:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <standart+0x240>)
 80014fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001502:	601a      	str	r2, [r3, #0]
		 	   a2=1000;                   //duty sıfırlandı
 8001504:	4b35      	ldr	r3, [pc, #212]	; (80015dc <standart+0x244>)
 8001506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800150a:	601a      	str	r2, [r3, #0]
		 	   ms.MotorSayi=a1;
 800150c:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <standart+0x240>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	b29a      	uxth	r2, r3
 8001512:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <standart+0x248>)
 8001514:	801a      	strh	r2, [r3, #0]
			   ms.MotorDuty=a2;
 8001516:	4b31      	ldr	r3, [pc, #196]	; (80015dc <standart+0x244>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <standart+0x248>)
 800151e:	805a      	strh	r2, [r3, #2]
			   ms.TempDuty=a2;
 8001520:	4b2e      	ldr	r3, [pc, #184]	; (80015dc <standart+0x244>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <standart+0x248>)
 8001528:	809a      	strh	r2, [r3, #4]
		 	   Pwm_Start(ms);
 800152a:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <standart+0x248>)
 800152c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001530:	f7fe ff92 	bl	8000458 <Pwm_Start>
		 	  //pFlag=0;
		 	   timerx=0;
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <standart+0x228>)
 8001536:	2200      	movs	r2, #0
 8001538:	801a      	strh	r2, [r3, #0]
		 	   HAL_UART_Transmit_DMA(&huart2, "OK\n\r", 4);
 800153a:	2204      	movs	r2, #4
 800153c:	4922      	ldr	r1, [pc, #136]	; (80015c8 <standart+0x230>)
 800153e:	4823      	ldr	r0, [pc, #140]	; (80015cc <standart+0x234>)
 8001540:	f003 ff28 	bl	8005394 <HAL_UART_Transmit_DMA>

		 	   }
		  //Tüm sistemi aktif test3...
		  if(RxBuf[0]=='T' && RxBuf[1]=='S'&& RxBuf[2]=='3')
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <standart+0x224>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b54      	cmp	r3, #84	; 0x54
 800154a:	d134      	bne.n	80015b6 <standart+0x21e>
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <standart+0x224>)
 800154e:	785b      	ldrb	r3, [r3, #1]
 8001550:	2b53      	cmp	r3, #83	; 0x53
 8001552:	d130      	bne.n	80015b6 <standart+0x21e>
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <standart+0x224>)
 8001556:	789b      	ldrb	r3, [r3, #2]
 8001558:	2b33      	cmp	r3, #51	; 0x33
 800155a:	d12c      	bne.n	80015b6 <standart+0x21e>
		 	  {
			    RxBuf[0]=0;
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <standart+0x224>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
			    RxBuf[1]=0;
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <standart+0x224>)
 8001564:	2200      	movs	r2, #0
 8001566:	705a      	strb	r2, [r3, #1]
			    RxBuf[2]=0;
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <standart+0x224>)
 800156a:	2200      	movs	r2, #0
 800156c:	709a      	strb	r2, [r3, #2]

			   a1=0b0001111111111111;  //Tüm sistem pin seçildi
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <standart+0x240>)
 8001570:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001574:	601a      	str	r2, [r3, #0]
		 	   a2=1000;                   //duty sıfırlandı
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <standart+0x244>)
 8001578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800157c:	601a      	str	r2, [r3, #0]
		 	   ms.MotorSayi=a1;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <standart+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29a      	uxth	r2, r3
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <standart+0x248>)
 8001586:	801a      	strh	r2, [r3, #0]
			   ms.MotorDuty=a2;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <standart+0x244>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	b29a      	uxth	r2, r3
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <standart+0x248>)
 8001590:	805a      	strh	r2, [r3, #2]
			   ms.TempDuty=a2;
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <standart+0x244>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	b29a      	uxth	r2, r3
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <standart+0x248>)
 800159a:	809a      	strh	r2, [r3, #4]
		 	   Pwm_Start(ms);
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <standart+0x248>)
 800159e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015a2:	f7fe ff59 	bl	8000458 <Pwm_Start>
		 	   //pFlag=0;
		 	   timerx=0;
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <standart+0x228>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	801a      	strh	r2, [r3, #0]
		 	   HAL_UART_Transmit_DMA(&huart2, "OK\n\r", 4);
 80015ac:	2204      	movs	r2, #4
 80015ae:	4906      	ldr	r1, [pc, #24]	; (80015c8 <standart+0x230>)
 80015b0:	4806      	ldr	r0, [pc, #24]	; (80015cc <standart+0x234>)
 80015b2:	f003 feef 	bl	8005394 <HAL_UART_Transmit_DMA>

		 	   }



}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000650 	.word	0x20000650
 80015c0:	20000640 	.word	0x20000640
 80015c4:	2000064e 	.word	0x2000064e
 80015c8:	08007730 	.word	0x08007730
 80015cc:	2000091c 	.word	0x2000091c
 80015d0:	20000646 	.word	0x20000646
 80015d4:	20000642 	.word	0x20000642
 80015d8:	20000630 	.word	0x20000630
 80015dc:	20000634 	.word	0x20000634
 80015e0:	20000648 	.word	0x20000648

080015e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

HAL_Init();
 80015e8:	f001 f9f1 	bl	80029ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ec:	f000 f942 	bl	8001874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f0:	f000 fd8c 	bl	800210c <MX_GPIO_Init>
  MX_DMA_Init();
 80015f4:	f000 fd64 	bl	80020c0 <MX_DMA_Init>
  MX_TIM1_Init();
 80015f8:	f000 f97e 	bl	80018f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80015fc:	f000 fa40 	bl	8001a80 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001600:	f000 fab8 	bl	8001b74 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001604:	f000 fb30 	bl	8001c68 <MX_TIM4_Init>
  MX_TIM15_Init();
 8001608:	f000 fbde 	bl	8001dc8 <MX_TIM15_Init>
  MX_TIM16_Init();
 800160c:	f000 fc3e 	bl	8001e8c <MX_TIM16_Init>
  MX_TIM17_Init();
 8001610:	f000 fcb4 	bl	8001f7c <MX_TIM17_Init>
  MX_USART2_UART_Init();
 8001614:	f000 fd2a 	bl	800206c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001618:	f000 fba0 	bl	8001d5c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuffer_Size);
 800161c:	223c      	movs	r2, #60	; 0x3c
 800161e:	497f      	ldr	r1, [pc, #508]	; (800181c <main+0x238>)
 8001620:	487f      	ldr	r0, [pc, #508]	; (8001820 <main+0x23c>)
 8001622:	f003 ff27 	bl	8005474 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8001626:	4b7f      	ldr	r3, [pc, #508]	; (8001824 <main+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b7d      	ldr	r3, [pc, #500]	; (8001824 <main+0x240>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0204 	bic.w	r2, r2, #4
 8001634:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 8001636:	487c      	ldr	r0, [pc, #496]	; (8001828 <main+0x244>)
 8001638:	f002 fbd8 	bl	8003dec <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800163c:	2100      	movs	r1, #0
 800163e:	487b      	ldr	r0, [pc, #492]	; (800182c <main+0x248>)
 8001640:	f002 fc7e 	bl	8003f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001644:	2104      	movs	r1, #4
 8001646:	4879      	ldr	r0, [pc, #484]	; (800182c <main+0x248>)
 8001648:	f002 fc7a 	bl	8003f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 800164c:	2108      	movs	r1, #8
 800164e:	4877      	ldr	r0, [pc, #476]	; (800182c <main+0x248>)
 8001650:	f002 fc76 	bl	8003f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8001654:	210c      	movs	r1, #12
 8001656:	4875      	ldr	r0, [pc, #468]	; (800182c <main+0x248>)
 8001658:	f002 fc72 	bl	8003f40 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800165c:	2100      	movs	r1, #0
 800165e:	4874      	ldr	r0, [pc, #464]	; (8001830 <main+0x24c>)
 8001660:	f002 fc6e 	bl	8003f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8001664:	2104      	movs	r1, #4
 8001666:	4872      	ldr	r0, [pc, #456]	; (8001830 <main+0x24c>)
 8001668:	f002 fc6a 	bl	8003f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 800166c:	2108      	movs	r1, #8
 800166e:	4870      	ldr	r0, [pc, #448]	; (8001830 <main+0x24c>)
 8001670:	f002 fc66 	bl	8003f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8001674:	210c      	movs	r1, #12
 8001676:	486e      	ldr	r0, [pc, #440]	; (8001830 <main+0x24c>)
 8001678:	f002 fc62 	bl	8003f40 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800167c:	2100      	movs	r1, #0
 800167e:	486d      	ldr	r0, [pc, #436]	; (8001834 <main+0x250>)
 8001680:	f002 fc5e 	bl	8003f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001684:	2104      	movs	r1, #4
 8001686:	486b      	ldr	r0, [pc, #428]	; (8001834 <main+0x250>)
 8001688:	f002 fc5a 	bl	8003f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800168c:	2108      	movs	r1, #8
 800168e:	4869      	ldr	r0, [pc, #420]	; (8001834 <main+0x250>)
 8001690:	f002 fc56 	bl	8003f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8001694:	210c      	movs	r1, #12
 8001696:	4867      	ldr	r0, [pc, #412]	; (8001834 <main+0x250>)
 8001698:	f002 fc52 	bl	8003f40 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 800169c:	2100      	movs	r1, #0
 800169e:	4866      	ldr	r0, [pc, #408]	; (8001838 <main+0x254>)
 80016a0:	f002 fc4e 	bl	8003f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 80016a4:	2104      	movs	r1, #4
 80016a6:	4864      	ldr	r0, [pc, #400]	; (8001838 <main+0x254>)
 80016a8:	f002 fc4a 	bl	8003f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80016ac:	2108      	movs	r1, #8
 80016ae:	4862      	ldr	r0, [pc, #392]	; (8001838 <main+0x254>)
 80016b0:	f002 fc46 	bl	8003f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 80016b4:	210c      	movs	r1, #12
 80016b6:	4860      	ldr	r0, [pc, #384]	; (8001838 <main+0x254>)
 80016b8:	f002 fc42 	bl	8003f40 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);
 80016bc:	2100      	movs	r1, #0
 80016be:	485f      	ldr	r0, [pc, #380]	; (800183c <main+0x258>)
 80016c0:	f002 fc3e 	bl	8003f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2);
 80016c4:	2104      	movs	r1, #4
 80016c6:	485d      	ldr	r0, [pc, #372]	; (800183c <main+0x258>)
 80016c8:	f002 fc3a 	bl	8003f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16,TIM_CHANNEL_1);
 80016cc:	2100      	movs	r1, #0
 80016ce:	485c      	ldr	r0, [pc, #368]	; (8001840 <main+0x25c>)
 80016d0:	f002 fc36 	bl	8003f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17,TIM_CHANNEL_1);
 80016d4:	2100      	movs	r1, #0
 80016d6:	485b      	ldr	r0, [pc, #364]	; (8001844 <main+0x260>)
 80016d8:	f002 fc32 	bl	8003f40 <HAL_TIM_PWM_Start>


  pinit();
 80016dc:	f7fe fda0 	bl	8000220 <pinit>



  a1=0b1111111111111111; //motor sayıları için pwm
 80016e0:	4b59      	ldr	r3, [pc, #356]	; (8001848 <main+0x264>)
 80016e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e6:	601a      	str	r2, [r3, #0]

  a2=400;
 80016e8:	4b58      	ldr	r3, [pc, #352]	; (800184c <main+0x268>)
 80016ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80016ee:	601a      	str	r2, [r3, #0]
  a3=0;
 80016f0:	4b57      	ldr	r3, [pc, #348]	; (8001850 <main+0x26c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]


  ms.MotorSayi=a1;
 80016f6:	4b54      	ldr	r3, [pc, #336]	; (8001848 <main+0x264>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	4b55      	ldr	r3, [pc, #340]	; (8001854 <main+0x270>)
 80016fe:	801a      	strh	r2, [r3, #0]
  ms.MotorDuty=a2;
 8001700:	4b52      	ldr	r3, [pc, #328]	; (800184c <main+0x268>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	b29a      	uxth	r2, r3
 8001706:	4b53      	ldr	r3, [pc, #332]	; (8001854 <main+0x270>)
 8001708:	805a      	strh	r2, [r3, #2]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  standart();
 800170a:	f7ff fe45 	bl	8001398 <standart>
	        //RX[2] RX[3] RX[4]//PRG SEÇME
	        //RX[5] //Selected
	        //RX[6] RX[7]// timer saniye
	        //RX[8] RX[9]// mduty temp duty

	  if(RxBuf[0]=='P' && RxBuf[1]=='R')
 800170e:	4b43      	ldr	r3, [pc, #268]	; (800181c <main+0x238>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b50      	cmp	r3, #80	; 0x50
 8001714:	d13f      	bne.n	8001796 <main+0x1b2>
 8001716:	4b41      	ldr	r3, [pc, #260]	; (800181c <main+0x238>)
 8001718:	785b      	ldrb	r3, [r3, #1]
 800171a:	2b52      	cmp	r3, #82	; 0x52
 800171c:	d13b      	bne.n	8001796 <main+0x1b2>
		   {
		     HAL_UART_Transmit_DMA(&huart2, "OK\n", 3);
 800171e:	2203      	movs	r2, #3
 8001720:	494d      	ldr	r1, [pc, #308]	; (8001858 <main+0x274>)
 8001722:	483f      	ldr	r0, [pc, #252]	; (8001820 <main+0x23c>)
 8001724:	f003 fe36 	bl	8005394 <HAL_UART_Transmit_DMA>
		     RxBuf[0]=0;
 8001728:	4b3c      	ldr	r3, [pc, #240]	; (800181c <main+0x238>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
		     RxBuf[1]=0;
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <main+0x238>)
 8001730:	2200      	movs	r2, #0
 8001732:	705a      	strb	r2, [r3, #1]

		     timer=RxBuf[6];
 8001734:	4b39      	ldr	r3, [pc, #228]	; (800181c <main+0x238>)
 8001736:	799b      	ldrb	r3, [r3, #6]
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b48      	ldr	r3, [pc, #288]	; (800185c <main+0x278>)
 800173c:	801a      	strh	r2, [r3, #0]
		     timer=timer << 8;
 800173e:	4b47      	ldr	r3, [pc, #284]	; (800185c <main+0x278>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b29a      	uxth	r2, r3
 8001746:	4b45      	ldr	r3, [pc, #276]	; (800185c <main+0x278>)
 8001748:	801a      	strh	r2, [r3, #0]
		     timer=timer | 0xF0 & RxBuf[7];
 800174a:	4b34      	ldr	r3, [pc, #208]	; (800181c <main+0x238>)
 800174c:	79db      	ldrb	r3, [r3, #7]
 800174e:	b21b      	sxth	r3, r3
 8001750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001754:	b21a      	sxth	r2, r3
 8001756:	4b41      	ldr	r3, [pc, #260]	; (800185c <main+0x278>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	b21b      	sxth	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	b21b      	sxth	r3, r3
 8001760:	b29a      	uxth	r2, r3
 8001762:	4b3e      	ldr	r3, [pc, #248]	; (800185c <main+0x278>)
 8001764:	801a      	strh	r2, [r3, #0]
		     timer=timer+2;
 8001766:	4b3d      	ldr	r3, [pc, #244]	; (800185c <main+0x278>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	3302      	adds	r3, #2
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b3b      	ldr	r3, [pc, #236]	; (800185c <main+0x278>)
 8001770:	801a      	strh	r2, [r3, #0]

		     HAL_Delay(10);
 8001772:	200a      	movs	r0, #10
 8001774:	f001 f984 	bl	8002a80 <HAL_Delay>
             total_time=timer;
 8001778:	4b38      	ldr	r3, [pc, #224]	; (800185c <main+0x278>)
 800177a:	881a      	ldrh	r2, [r3, #0]
 800177c:	4b38      	ldr	r3, [pc, #224]	; (8001860 <main+0x27c>)
 800177e:	801a      	strh	r2, [r3, #0]
		     start=1;
 8001780:	4b38      	ldr	r3, [pc, #224]	; (8001864 <main+0x280>)
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
		     printf("Program total time(saniye)=%d\n\r",total_time);
 8001786:	4b36      	ldr	r3, [pc, #216]	; (8001860 <main+0x27c>)
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	4619      	mov	r1, r3
 800178c:	4836      	ldr	r0, [pc, #216]	; (8001868 <main+0x284>)
 800178e:	f004 ff57 	bl	8006640 <iprintf>
		     standarprgslctd(); //dutyseçimi
 8001792:	f7ff fc43 	bl	800101c <standarprgslctd>


		   }

	    if(start==1){
 8001796:	4b33      	ldr	r3, [pc, #204]	; (8001864 <main+0x280>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d10d      	bne.n	80017ba <main+0x1d6>
	    	if(total_time>10){
 800179e:	4b30      	ldr	r3, [pc, #192]	; (8001860 <main+0x27c>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	2b0a      	cmp	r3, #10
 80017a4:	d905      	bls.n	80017b2 <main+0x1ce>
	    	 program(total_time);
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <main+0x27c>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff f918 	bl	80009e0 <program>
 80017b0:	e02a      	b.n	8001808 <main+0x224>

	    	}else start=0;
 80017b2:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <main+0x280>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	e026      	b.n	8001808 <main+0x224>

	    }else if (start==0)
 80017ba:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <main+0x280>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d122      	bne.n	8001808 <main+0x224>
	    {
	    	     a1=0b1111111111111111;  //Tüm sistem pin seçildi
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <main+0x264>)
 80017c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017c8:	601a      	str	r2, [r3, #0]
	    		 a2=0;                   //duty sıfırlandı
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <main+0x268>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
	    		 ms.MotorSayi=a1;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <main+0x264>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <main+0x270>)
 80017d8:	801a      	strh	r2, [r3, #0]
	    		 ms.MotorDuty=a2;
 80017da:	4b1c      	ldr	r3, [pc, #112]	; (800184c <main+0x268>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <main+0x270>)
 80017e2:	805a      	strh	r2, [r3, #2]
	    		 ms.TempDuty=a2;
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <main+0x268>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <main+0x270>)
 80017ec:	809a      	strh	r2, [r3, #4]
	    		 Pwm_Start(ms);
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <main+0x270>)
 80017f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017f4:	f7fe fe30 	bl	8000458 <Pwm_Start>
	    		 HAL_UART_Transmit_DMA(&huart2, "PRG OK\n\r", 8);
 80017f8:	2208      	movs	r2, #8
 80017fa:	491c      	ldr	r1, [pc, #112]	; (800186c <main+0x288>)
 80017fc:	4808      	ldr	r0, [pc, #32]	; (8001820 <main+0x23c>)
 80017fe:	f003 fdc9 	bl	8005394 <HAL_UART_Transmit_DMA>
	    		 start=2;
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <main+0x280>)
 8001804:	2202      	movs	r2, #2
 8001806:	701a      	strb	r2, [r3, #0]
	    }else{

	    }

      HAL_Delay(40);
 8001808:	2028      	movs	r0, #40	; 0x28
 800180a:	f001 f939 	bl	8002a80 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800180e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001812:	4817      	ldr	r0, [pc, #92]	; (8001870 <main+0x28c>)
 8001814:	f001 fea4 	bl	8003560 <HAL_GPIO_TogglePin>
	  standart();
 8001818:	e777      	b.n	800170a <main+0x126>
 800181a:	bf00      	nop
 800181c:	20000650 	.word	0x20000650
 8001820:	2000091c 	.word	0x2000091c
 8001824:	20000964 	.word	0x20000964
 8001828:	200007fc 	.word	0x200007fc
 800182c:	200006dc 	.word	0x200006dc
 8001830:	20000724 	.word	0x20000724
 8001834:	2000076c 	.word	0x2000076c
 8001838:	200007b4 	.word	0x200007b4
 800183c:	20000844 	.word	0x20000844
 8001840:	2000088c 	.word	0x2000088c
 8001844:	200008d4 	.word	0x200008d4
 8001848:	20000630 	.word	0x20000630
 800184c:	20000634 	.word	0x20000634
 8001850:	20000638 	.word	0x20000638
 8001854:	20000648 	.word	0x20000648
 8001858:	0800776c 	.word	0x0800776c
 800185c:	20000642 	.word	0x20000642
 8001860:	20000644 	.word	0x20000644
 8001864:	20000646 	.word	0x20000646
 8001868:	08007770 	.word	0x08007770
 800186c:	08007790 	.word	0x08007790
 8001870:	40011000 	.word	0x40011000

08001874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b090      	sub	sp, #64	; 0x40
 8001878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187a:	f107 0318 	add.w	r3, r7, #24
 800187e:	2228      	movs	r2, #40	; 0x28
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f004 ff51 	bl	800672a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001896:	2301      	movs	r3, #1
 8001898:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800189a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800189e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a4:	2302      	movs	r3, #2
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80018ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80018b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b4:	f107 0318 	add.w	r3, r7, #24
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 fe6b 	bl	8003594 <HAL_RCC_OscConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80018c4:	f000 fc7a 	bl	80021bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c8:	230f      	movs	r3, #15
 80018ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018cc:	2302      	movs	r3, #2
 80018ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 f8d9 	bl	8003a98 <HAL_RCC_ClockConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80018ec:	f000 fc66 	bl	80021bc <Error_Handler>
  }
}
 80018f0:	bf00      	nop
 80018f2:	3740      	adds	r7, #64	; 0x40
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b096      	sub	sp, #88	; 0x58
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]
 8001926:	615a      	str	r2, [r3, #20]
 8001928:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	2220      	movs	r2, #32
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f004 fefa 	bl	800672a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001936:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <MX_TIM1_Init+0x180>)
 8001938:	4a50      	ldr	r2, [pc, #320]	; (8001a7c <MX_TIM1_Init+0x184>)
 800193a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 800193c:	4b4e      	ldr	r3, [pc, #312]	; (8001a78 <MX_TIM1_Init+0x180>)
 800193e:	2202      	movs	r2, #2
 8001940:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001942:	4b4d      	ldr	r3, [pc, #308]	; (8001a78 <MX_TIM1_Init+0x180>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001948:	4b4b      	ldr	r3, [pc, #300]	; (8001a78 <MX_TIM1_Init+0x180>)
 800194a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800194e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001950:	4b49      	ldr	r3, [pc, #292]	; (8001a78 <MX_TIM1_Init+0x180>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001956:	4b48      	ldr	r3, [pc, #288]	; (8001a78 <MX_TIM1_Init+0x180>)
 8001958:	2200      	movs	r2, #0
 800195a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195c:	4b46      	ldr	r3, [pc, #280]	; (8001a78 <MX_TIM1_Init+0x180>)
 800195e:	2200      	movs	r2, #0
 8001960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001962:	4845      	ldr	r0, [pc, #276]	; (8001a78 <MX_TIM1_Init+0x180>)
 8001964:	f002 f9f2 	bl	8003d4c <HAL_TIM_Base_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800196e:	f000 fc25 	bl	80021bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001976:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001978:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800197c:	4619      	mov	r1, r3
 800197e:	483e      	ldr	r0, [pc, #248]	; (8001a78 <MX_TIM1_Init+0x180>)
 8001980:	f002 fe56 	bl	8004630 <HAL_TIM_ConfigClockSource>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800198a:	f000 fc17 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800198e:	483a      	ldr	r0, [pc, #232]	; (8001a78 <MX_TIM1_Init+0x180>)
 8001990:	f002 fa86 	bl	8003ea0 <HAL_TIM_PWM_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800199a:	f000 fc0f 	bl	80021bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019aa:	4619      	mov	r1, r3
 80019ac:	4832      	ldr	r0, [pc, #200]	; (8001a78 <MX_TIM1_Init+0x180>)
 80019ae:	f003 fb55 	bl	800505c <HAL_TIMEx_MasterConfigSynchronization>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019b8:	f000 fc00 	bl	80021bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019bc:	2360      	movs	r3, #96	; 0x60
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019c8:	2300      	movs	r3, #0
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019d0:	2300      	movs	r3, #0
 80019d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019dc:	2200      	movs	r2, #0
 80019de:	4619      	mov	r1, r3
 80019e0:	4825      	ldr	r0, [pc, #148]	; (8001a78 <MX_TIM1_Init+0x180>)
 80019e2:	f002 fd63 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80019ec:	f000 fbe6 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f4:	2204      	movs	r2, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	481f      	ldr	r0, [pc, #124]	; (8001a78 <MX_TIM1_Init+0x180>)
 80019fa:	f002 fd57 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001a04:	f000 fbda 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4819      	ldr	r0, [pc, #100]	; (8001a78 <MX_TIM1_Init+0x180>)
 8001a12:	f002 fd4b 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001a1c:	f000 fbce 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a24:	220c      	movs	r2, #12
 8001a26:	4619      	mov	r1, r3
 8001a28:	4813      	ldr	r0, [pc, #76]	; (8001a78 <MX_TIM1_Init+0x180>)
 8001a2a:	f002 fd3f 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001a34:	f000 fbc2 	bl	80021bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4807      	ldr	r0, [pc, #28]	; (8001a78 <MX_TIM1_Init+0x180>)
 8001a5c:	f003 fb64 	bl	8005128 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001a66:	f000 fba9 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a6a:	4803      	ldr	r0, [pc, #12]	; (8001a78 <MX_TIM1_Init+0x180>)
 8001a6c:	f000 fccc 	bl	8002408 <HAL_TIM_MspPostInit>

}
 8001a70:	bf00      	nop
 8001a72:	3758      	adds	r7, #88	; 0x58
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200006dc 	.word	0x200006dc
 8001a7c:	40012c00 	.word	0x40012c00

08001a80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a86:	f107 0320 	add.w	r3, r7, #32
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
 8001a9e:	615a      	str	r2, [r3, #20]
 8001aa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aa2:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <MX_TIM2_Init+0xf0>)
 8001aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aa8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8001aaa:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <MX_TIM2_Init+0xf0>)
 8001aac:	2202      	movs	r2, #2
 8001aae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <MX_TIM2_Init+0xf0>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001ab6:	4b2e      	ldr	r3, [pc, #184]	; (8001b70 <MX_TIM2_Init+0xf0>)
 8001ab8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001abc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abe:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <MX_TIM2_Init+0xf0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <MX_TIM2_Init+0xf0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001aca:	4829      	ldr	r0, [pc, #164]	; (8001b70 <MX_TIM2_Init+0xf0>)
 8001acc:	f002 f9e8 	bl	8003ea0 <HAL_TIM_PWM_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001ad6:	f000 fb71 	bl	80021bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4821      	ldr	r0, [pc, #132]	; (8001b70 <MX_TIM2_Init+0xf0>)
 8001aea:	f003 fab7 	bl	800505c <HAL_TIMEx_MasterConfigSynchronization>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001af4:	f000 fb62 	bl	80021bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af8:	2360      	movs	r3, #96	; 0x60
 8001afa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4818      	ldr	r0, [pc, #96]	; (8001b70 <MX_TIM2_Init+0xf0>)
 8001b10:	f002 fccc 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001b1a:	f000 fb4f 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	2204      	movs	r2, #4
 8001b22:	4619      	mov	r1, r3
 8001b24:	4812      	ldr	r0, [pc, #72]	; (8001b70 <MX_TIM2_Init+0xf0>)
 8001b26:	f002 fcc1 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b30:	f000 fb44 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	2208      	movs	r2, #8
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480d      	ldr	r0, [pc, #52]	; (8001b70 <MX_TIM2_Init+0xf0>)
 8001b3c:	f002 fcb6 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001b46:	f000 fb39 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	220c      	movs	r2, #12
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4807      	ldr	r0, [pc, #28]	; (8001b70 <MX_TIM2_Init+0xf0>)
 8001b52:	f002 fcab 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001b5c:	f000 fb2e 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b60:	4803      	ldr	r0, [pc, #12]	; (8001b70 <MX_TIM2_Init+0xf0>)
 8001b62:	f000 fc51 	bl	8002408 <HAL_TIM_MspPostInit>

}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	; 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000724 	.word	0x20000724

08001b74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7a:	f107 0320 	add.w	r3, r7, #32
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
 8001b90:	611a      	str	r2, [r3, #16]
 8001b92:	615a      	str	r2, [r3, #20]
 8001b94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b96:	4b32      	ldr	r3, [pc, #200]	; (8001c60 <MX_TIM3_Init+0xec>)
 8001b98:	4a32      	ldr	r2, [pc, #200]	; (8001c64 <MX_TIM3_Init+0xf0>)
 8001b9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 8001b9c:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <MX_TIM3_Init+0xec>)
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <MX_TIM3_Init+0xec>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <MX_TIM3_Init+0xec>)
 8001baa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <MX_TIM3_Init+0xec>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <MX_TIM3_Init+0xec>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bbc:	4828      	ldr	r0, [pc, #160]	; (8001c60 <MX_TIM3_Init+0xec>)
 8001bbe:	f002 f96f 	bl	8003ea0 <HAL_TIM_PWM_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001bc8:	f000 faf8 	bl	80021bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bd4:	f107 0320 	add.w	r3, r7, #32
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4821      	ldr	r0, [pc, #132]	; (8001c60 <MX_TIM3_Init+0xec>)
 8001bdc:	f003 fa3e 	bl	800505c <HAL_TIMEx_MasterConfigSynchronization>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001be6:	f000 fae9 	bl	80021bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bea:	2360      	movs	r3, #96	; 0x60
 8001bec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4817      	ldr	r0, [pc, #92]	; (8001c60 <MX_TIM3_Init+0xec>)
 8001c02:	f002 fc53 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c0c:	f000 fad6 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2204      	movs	r2, #4
 8001c14:	4619      	mov	r1, r3
 8001c16:	4812      	ldr	r0, [pc, #72]	; (8001c60 <MX_TIM3_Init+0xec>)
 8001c18:	f002 fc48 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c22:	f000 facb 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	2208      	movs	r2, #8
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <MX_TIM3_Init+0xec>)
 8001c2e:	f002 fc3d 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001c38:	f000 fac0 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	220c      	movs	r2, #12
 8001c40:	4619      	mov	r1, r3
 8001c42:	4807      	ldr	r0, [pc, #28]	; (8001c60 <MX_TIM3_Init+0xec>)
 8001c44:	f002 fc32 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c4e:	f000 fab5 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c52:	4803      	ldr	r0, [pc, #12]	; (8001c60 <MX_TIM3_Init+0xec>)
 8001c54:	f000 fbd8 	bl	8002408 <HAL_TIM_MspPostInit>

}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	; 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2000076c 	.word	0x2000076c
 8001c64:	40000400 	.word	0x40000400

08001c68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6e:	f107 0320 	add.w	r3, r7, #32
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	611a      	str	r2, [r3, #16]
 8001c86:	615a      	str	r2, [r3, #20]
 8001c88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c8a:	4b32      	ldr	r3, [pc, #200]	; (8001d54 <MX_TIM4_Init+0xec>)
 8001c8c:	4a32      	ldr	r2, [pc, #200]	; (8001d58 <MX_TIM4_Init+0xf0>)
 8001c8e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8001c90:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <MX_TIM4_Init+0xec>)
 8001c92:	2202      	movs	r2, #2
 8001c94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c96:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <MX_TIM4_Init+0xec>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <MX_TIM4_Init+0xec>)
 8001c9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ca2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <MX_TIM4_Init+0xec>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <MX_TIM4_Init+0xec>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cb0:	4828      	ldr	r0, [pc, #160]	; (8001d54 <MX_TIM4_Init+0xec>)
 8001cb2:	f002 f8f5 	bl	8003ea0 <HAL_TIM_PWM_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001cbc:	f000 fa7e 	bl	80021bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cc8:	f107 0320 	add.w	r3, r7, #32
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4821      	ldr	r0, [pc, #132]	; (8001d54 <MX_TIM4_Init+0xec>)
 8001cd0:	f003 f9c4 	bl	800505c <HAL_TIMEx_MasterConfigSynchronization>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001cda:	f000 fa6f 	bl	80021bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cde:	2360      	movs	r3, #96	; 0x60
 8001ce0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4817      	ldr	r0, [pc, #92]	; (8001d54 <MX_TIM4_Init+0xec>)
 8001cf6:	f002 fbd9 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001d00:	f000 fa5c 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2204      	movs	r2, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4812      	ldr	r0, [pc, #72]	; (8001d54 <MX_TIM4_Init+0xec>)
 8001d0c:	f002 fbce 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001d16:	f000 fa51 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	4619      	mov	r1, r3
 8001d20:	480c      	ldr	r0, [pc, #48]	; (8001d54 <MX_TIM4_Init+0xec>)
 8001d22:	f002 fbc3 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001d2c:	f000 fa46 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	220c      	movs	r2, #12
 8001d34:	4619      	mov	r1, r3
 8001d36:	4807      	ldr	r0, [pc, #28]	; (8001d54 <MX_TIM4_Init+0xec>)
 8001d38:	f002 fbb8 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001d42:	f000 fa3b 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d46:	4803      	ldr	r0, [pc, #12]	; (8001d54 <MX_TIM4_Init+0xec>)
 8001d48:	f000 fb5e 	bl	8002408 <HAL_TIM_MspPostInit>

}
 8001d4c:	bf00      	nop
 8001d4e:	3728      	adds	r7, #40	; 0x28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200007b4 	.word	0x200007b4
 8001d58:	40000800 	.word	0x40000800

08001d5c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d62:	463b      	mov	r3, r7
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <MX_TIM6_Init+0x64>)
 8001d6c:	4a15      	ldr	r2, [pc, #84]	; (8001dc4 <MX_TIM6_Init+0x68>)
 8001d6e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 374;
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <MX_TIM6_Init+0x64>)
 8001d72:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8001d76:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <MX_TIM6_Init+0x64>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <MX_TIM6_Init+0x64>)
 8001d80:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001d84:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <MX_TIM6_Init+0x64>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d8c:	480c      	ldr	r0, [pc, #48]	; (8001dc0 <MX_TIM6_Init+0x64>)
 8001d8e:	f001 ffdd 	bl	8003d4c <HAL_TIM_Base_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001d98:	f000 fa10 	bl	80021bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001da4:	463b      	mov	r3, r7
 8001da6:	4619      	mov	r1, r3
 8001da8:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_TIM6_Init+0x64>)
 8001daa:	f003 f957 	bl	800505c <HAL_TIMEx_MasterConfigSynchronization>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001db4:	f000 fa02 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	200007fc 	.word	0x200007fc
 8001dc4:	40001000 	.word	0x40001000

08001dc8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dce:	f107 0310 	add.w	r3, r7, #16
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001dd8:	463b      	mov	r3, r7
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <MX_TIM15_Init+0xbc>)
 8001de6:	4a28      	ldr	r2, [pc, #160]	; (8001e88 <MX_TIM15_Init+0xc0>)
 8001de8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001dea:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <MX_TIM15_Init+0xbc>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df0:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <MX_TIM15_Init+0xbc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <MX_TIM15_Init+0xbc>)
 8001df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dfc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <MX_TIM15_Init+0xbc>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <MX_TIM15_Init+0xbc>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <MX_TIM15_Init+0xbc>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001e10:	481c      	ldr	r0, [pc, #112]	; (8001e84 <MX_TIM15_Init+0xbc>)
 8001e12:	f002 f957 	bl	80040c4 <HAL_TIM_IC_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001e1c:	f000 f9ce 	bl	80021bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001e28:	f107 0310 	add.w	r3, r7, #16
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4815      	ldr	r0, [pc, #84]	; (8001e84 <MX_TIM15_Init+0xbc>)
 8001e30:	f003 f914 	bl	800505c <HAL_TIMEx_MasterConfigSynchronization>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001e3a:	f000 f9bf 	bl	80021bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e42:	2301      	movs	r3, #1
 8001e44:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e4e:	463b      	mov	r3, r7
 8001e50:	2200      	movs	r2, #0
 8001e52:	4619      	mov	r1, r3
 8001e54:	480b      	ldr	r0, [pc, #44]	; (8001e84 <MX_TIM15_Init+0xbc>)
 8001e56:	f002 fa8c 	bl	8004372 <HAL_TIM_IC_ConfigChannel>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8001e60:	f000 f9ac 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e64:	463b      	mov	r3, r7
 8001e66:	2204      	movs	r2, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4806      	ldr	r0, [pc, #24]	; (8001e84 <MX_TIM15_Init+0xbc>)
 8001e6c:	f002 fa81 	bl	8004372 <HAL_TIM_IC_ConfigChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 8001e76:	f000 f9a1 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000844 	.word	0x20000844
 8001e88:	40014000 	.word	0x40014000

08001e8c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b090      	sub	sp, #64	; 0x40
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
 8001ea0:	611a      	str	r2, [r3, #16]
 8001ea2:	615a      	str	r2, [r3, #20]
 8001ea4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f004 fc3c 	bl	800672a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <MX_TIM16_Init+0xe8>)
 8001eb4:	4a30      	ldr	r2, [pc, #192]	; (8001f78 <MX_TIM16_Init+0xec>)
 8001eb6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2;
 8001eb8:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <MX_TIM16_Init+0xe8>)
 8001eba:	2202      	movs	r2, #2
 8001ebc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <MX_TIM16_Init+0xe8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <MX_TIM16_Init+0xe8>)
 8001ec6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eca:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ecc:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <MX_TIM16_Init+0xe8>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ed2:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <MX_TIM16_Init+0xe8>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed8:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <MX_TIM16_Init+0xe8>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ede:	4825      	ldr	r0, [pc, #148]	; (8001f74 <MX_TIM16_Init+0xe8>)
 8001ee0:	f001 ff34 	bl	8003d4c <HAL_TIM_Base_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001eea:	f000 f967 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001eee:	4821      	ldr	r0, [pc, #132]	; (8001f74 <MX_TIM16_Init+0xe8>)
 8001ef0:	f001 ffd6 	bl	8003ea0 <HAL_TIM_PWM_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001efa:	f000 f95f 	bl	80021bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001efe:	2360      	movs	r3, #96	; 0x60
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4619      	mov	r1, r3
 8001f22:	4814      	ldr	r0, [pc, #80]	; (8001f74 <MX_TIM16_Init+0xe8>)
 8001f24:	f002 fac2 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001f2e:	f000 f945 	bl	80021bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	4619      	mov	r1, r3
 8001f54:	4807      	ldr	r0, [pc, #28]	; (8001f74 <MX_TIM16_Init+0xe8>)
 8001f56:	f003 f8e7 	bl	8005128 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8001f60:	f000 f92c 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001f64:	4803      	ldr	r0, [pc, #12]	; (8001f74 <MX_TIM16_Init+0xe8>)
 8001f66:	f000 fa4f 	bl	8002408 <HAL_TIM_MspPostInit>

}
 8001f6a:	bf00      	nop
 8001f6c:	3740      	adds	r7, #64	; 0x40
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000088c 	.word	0x2000088c
 8001f78:	40014400 	.word	0x40014400

08001f7c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b090      	sub	sp, #64	; 0x40
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
 8001f90:	611a      	str	r2, [r3, #16]
 8001f92:	615a      	str	r2, [r3, #20]
 8001f94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	2220      	movs	r2, #32
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f004 fbc4 	bl	800672a <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001fa2:	4b30      	ldr	r3, [pc, #192]	; (8002064 <MX_TIM17_Init+0xe8>)
 8001fa4:	4a30      	ldr	r2, [pc, #192]	; (8002068 <MX_TIM17_Init+0xec>)
 8001fa6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2;
 8001fa8:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <MX_TIM17_Init+0xe8>)
 8001faa:	2202      	movs	r2, #2
 8001fac:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fae:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <MX_TIM17_Init+0xe8>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <MX_TIM17_Init+0xe8>)
 8001fb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fba:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbc:	4b29      	ldr	r3, [pc, #164]	; (8002064 <MX_TIM17_Init+0xe8>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001fc2:	4b28      	ldr	r3, [pc, #160]	; (8002064 <MX_TIM17_Init+0xe8>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc8:	4b26      	ldr	r3, [pc, #152]	; (8002064 <MX_TIM17_Init+0xe8>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001fce:	4825      	ldr	r0, [pc, #148]	; (8002064 <MX_TIM17_Init+0xe8>)
 8001fd0:	f001 febc 	bl	8003d4c <HAL_TIM_Base_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001fda:	f000 f8ef 	bl	80021bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001fde:	4821      	ldr	r0, [pc, #132]	; (8002064 <MX_TIM17_Init+0xe8>)
 8001fe0:	f001 ff5e 	bl	8003ea0 <HAL_TIM_PWM_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001fea:	f000 f8e7 	bl	80021bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fee:	2360      	movs	r3, #96	; 0x60
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002006:	2300      	movs	r3, #0
 8002008:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800200a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200e:	2200      	movs	r2, #0
 8002010:	4619      	mov	r1, r3
 8002012:	4814      	ldr	r0, [pc, #80]	; (8002064 <MX_TIM17_Init+0xe8>)
 8002014:	f002 fa4a 	bl	80044ac <HAL_TIM_PWM_ConfigChannel>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800201e:	f000 f8cd 	bl	80021bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800203a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	4619      	mov	r1, r3
 8002044:	4807      	ldr	r0, [pc, #28]	; (8002064 <MX_TIM17_Init+0xe8>)
 8002046:	f003 f86f 	bl	8005128 <HAL_TIMEx_ConfigBreakDeadTime>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 8002050:	f000 f8b4 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002054:	4803      	ldr	r0, [pc, #12]	; (8002064 <MX_TIM17_Init+0xe8>)
 8002056:	f000 f9d7 	bl	8002408 <HAL_TIM_MspPostInit>

}
 800205a:	bf00      	nop
 800205c:	3740      	adds	r7, #64	; 0x40
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200008d4 	.word	0x200008d4
 8002068:	40014800 	.word	0x40014800

0800206c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <MX_USART2_UART_Init+0x50>)
 8002074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002078:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800207c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002092:	220c      	movs	r2, #12
 8002094:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020a2:	4805      	ldr	r0, [pc, #20]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 80020a4:	f003 f8a3 	bl	80051ee <HAL_UART_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020ae:	f000 f885 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000091c 	.word	0x2000091c
 80020bc:	40004400 	.word	0x40004400

080020c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <MX_DMA_Init+0x48>)
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <MX_DMA_Init+0x48>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6153      	str	r3, [r2, #20]
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <MX_DMA_Init+0x48>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	2010      	movs	r0, #16
 80020e4:	f000 fdc7 	bl	8002c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80020e8:	2010      	movs	r0, #16
 80020ea:	f000 fde0 	bl	8002cae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2100      	movs	r1, #0
 80020f2:	2011      	movs	r0, #17
 80020f4:	f000 fdbf 	bl	8002c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80020f8:	2011      	movs	r0, #17
 80020fa:	f000 fdd8 	bl	8002cae <HAL_NVIC_EnableIRQ>

}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000

0800210c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002112:	f107 0310 	add.w	r3, r7, #16
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002120:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <MX_GPIO_Init+0xa8>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	4a23      	ldr	r2, [pc, #140]	; (80021b4 <MX_GPIO_Init+0xa8>)
 8002126:	f043 0310 	orr.w	r3, r3, #16
 800212a:	6193      	str	r3, [r2, #24]
 800212c:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <MX_GPIO_Init+0xa8>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002138:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <MX_GPIO_Init+0xa8>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <MX_GPIO_Init+0xa8>)
 800213e:	f043 0320 	orr.w	r3, r3, #32
 8002142:	6193      	str	r3, [r2, #24]
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <MX_GPIO_Init+0xa8>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <MX_GPIO_Init+0xa8>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <MX_GPIO_Init+0xa8>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	6193      	str	r3, [r2, #24]
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <MX_GPIO_Init+0xa8>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <MX_GPIO_Init+0xa8>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	4a11      	ldr	r2, [pc, #68]	; (80021b4 <MX_GPIO_Init+0xa8>)
 800216e:	f043 0308 	orr.w	r3, r3, #8
 8002172:	6193      	str	r3, [r2, #24]
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <MX_GPIO_Init+0xa8>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002180:	2200      	movs	r2, #0
 8002182:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002186:	480c      	ldr	r0, [pc, #48]	; (80021b8 <MX_GPIO_Init+0xac>)
 8002188:	f001 f9d2 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800218c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002190:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002192:	2301      	movs	r3, #1
 8002194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2302      	movs	r3, #2
 800219c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219e:	f107 0310 	add.w	r3, r7, #16
 80021a2:	4619      	mov	r1, r3
 80021a4:	4804      	ldr	r0, [pc, #16]	; (80021b8 <MX_GPIO_Init+0xac>)
 80021a6:	f001 f83f 	bl	8003228 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021aa:	bf00      	nop
 80021ac:	3720      	adds	r7, #32
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40011000 	.word	0x40011000

080021bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c0:	b672      	cpsid	i
}
 80021c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <Error_Handler+0x8>
	...

080021c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <HAL_MspInit+0x5c>)
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	4a14      	ldr	r2, [pc, #80]	; (8002224 <HAL_MspInit+0x5c>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6193      	str	r3, [r2, #24]
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_MspInit+0x5c>)
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <HAL_MspInit+0x5c>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <HAL_MspInit+0x5c>)
 80021ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f0:	61d3      	str	r3, [r2, #28]
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <HAL_MspInit+0x5c>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_MspInit+0x60>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <HAL_MspInit+0x60>)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	40021000 	.word	0x40021000
 8002228:	40010000 	.word	0x40010000

0800222c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a28      	ldr	r2, [pc, #160]	; (80022dc <HAL_TIM_Base_MspInit+0xb0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d10c      	bne.n	8002258 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800223e:	4b28      	ldr	r3, [pc, #160]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	4a27      	ldr	r2, [pc, #156]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 8002244:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002248:	6193      	str	r3, [r2, #24]
 800224a:	4b25      	ldr	r3, [pc, #148]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002256:	e03c      	b.n	80022d2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a21      	ldr	r2, [pc, #132]	; (80022e4 <HAL_TIM_Base_MspInit+0xb8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d114      	bne.n	800228c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002262:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	4a1e      	ldr	r2, [pc, #120]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 8002268:	f043 0310 	orr.w	r3, r3, #16
 800226c:	61d3      	str	r3, [r2, #28]
 800226e:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	2036      	movs	r0, #54	; 0x36
 8002280:	f000 fcf9 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002284:	2036      	movs	r0, #54	; 0x36
 8002286:	f000 fd12 	bl	8002cae <HAL_NVIC_EnableIRQ>
}
 800228a:	e022      	b.n	80022d2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM16)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a15      	ldr	r2, [pc, #84]	; (80022e8 <HAL_TIM_Base_MspInit+0xbc>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d10c      	bne.n	80022b0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002296:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	4a11      	ldr	r2, [pc, #68]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 800229c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a0:	6193      	str	r3, [r2, #24]
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
}
 80022ae:	e010      	b.n	80022d2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM17)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0d      	ldr	r2, [pc, #52]	; (80022ec <HAL_TIM_Base_MspInit+0xc0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10b      	bne.n	80022d2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	4a08      	ldr	r2, [pc, #32]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 80022c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c4:	6193      	str	r3, [r2, #24]
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_TIM_Base_MspInit+0xb4>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40012c00 	.word	0x40012c00
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40001000 	.word	0x40001000
 80022e8:	40014400 	.word	0x40014400
 80022ec:	40014800 	.word	0x40014800

080022f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002300:	d10c      	bne.n	800231c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002302:	4b1a      	ldr	r3, [pc, #104]	; (800236c <HAL_TIM_PWM_MspInit+0x7c>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4a19      	ldr	r2, [pc, #100]	; (800236c <HAL_TIM_PWM_MspInit+0x7c>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	61d3      	str	r3, [r2, #28]
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <HAL_TIM_PWM_MspInit+0x7c>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800231a:	e022      	b.n	8002362 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a13      	ldr	r2, [pc, #76]	; (8002370 <HAL_TIM_PWM_MspInit+0x80>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d10c      	bne.n	8002340 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_TIM_PWM_MspInit+0x7c>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	4a10      	ldr	r2, [pc, #64]	; (800236c <HAL_TIM_PWM_MspInit+0x7c>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	61d3      	str	r3, [r2, #28]
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <HAL_TIM_PWM_MspInit+0x7c>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
}
 800233e:	e010      	b.n	8002362 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM4)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0b      	ldr	r2, [pc, #44]	; (8002374 <HAL_TIM_PWM_MspInit+0x84>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d10b      	bne.n	8002362 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <HAL_TIM_PWM_MspInit+0x7c>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4a07      	ldr	r2, [pc, #28]	; (800236c <HAL_TIM_PWM_MspInit+0x7c>)
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	61d3      	str	r3, [r2, #28]
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_TIM_PWM_MspInit+0x7c>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
}
 8002362:	bf00      	nop
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	40021000 	.word	0x40021000
 8002370:	40000400 	.word	0x40000400
 8002374:	40000800 	.word	0x40000800

08002378 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0310 	add.w	r3, r7, #16
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM15)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a19      	ldr	r2, [pc, #100]	; (80023f8 <HAL_TIM_IC_MspInit+0x80>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d12a      	bne.n	80023ee <HAL_TIM_IC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002398:	4b18      	ldr	r3, [pc, #96]	; (80023fc <HAL_TIM_IC_MspInit+0x84>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	4a17      	ldr	r2, [pc, #92]	; (80023fc <HAL_TIM_IC_MspInit+0x84>)
 800239e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a2:	6193      	str	r3, [r2, #24]
 80023a4:	4b15      	ldr	r3, [pc, #84]	; (80023fc <HAL_TIM_IC_MspInit+0x84>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <HAL_TIM_IC_MspInit+0x84>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	4a11      	ldr	r2, [pc, #68]	; (80023fc <HAL_TIM_IC_MspInit+0x84>)
 80023b6:	f043 0308 	orr.w	r3, r3, #8
 80023ba:	6193      	str	r3, [r2, #24]
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_TIM_IC_MspInit+0x84>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80023c8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80023cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d6:	f107 0310 	add.w	r3, r7, #16
 80023da:	4619      	mov	r1, r3
 80023dc:	4808      	ldr	r0, [pc, #32]	; (8002400 <HAL_TIM_IC_MspInit+0x88>)
 80023de:	f000 ff23 	bl	8003228 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM15_ENABLE();
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <HAL_TIM_IC_MspInit+0x8c>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4a07      	ldr	r2, [pc, #28]	; (8002404 <HAL_TIM_IC_MspInit+0x8c>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	61d3      	str	r3, [r2, #28]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80023ee:	bf00      	nop
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40014000 	.word	0x40014000
 80023fc:	40021000 	.word	0x40021000
 8002400:	40010c00 	.word	0x40010c00
 8002404:	40010000 	.word	0x40010000

08002408 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b090      	sub	sp, #64	; 0x40
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a80      	ldr	r2, [pc, #512]	; (8002624 <HAL_TIM_MspPostInit+0x21c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d119      	bne.n	800245c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002428:	4b7f      	ldr	r3, [pc, #508]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	4a7e      	ldr	r2, [pc, #504]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 800242e:	f043 0304 	orr.w	r3, r3, #4
 8002432:	6193      	str	r3, [r2, #24]
 8002434:	4b7c      	ldr	r3, [pc, #496]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002440:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	2302      	movs	r3, #2
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002452:	4619      	mov	r1, r3
 8002454:	4875      	ldr	r0, [pc, #468]	; (800262c <HAL_TIM_MspPostInit+0x224>)
 8002456:	f000 fee7 	bl	8003228 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800245a:	e0de      	b.n	800261a <HAL_TIM_MspPostInit+0x212>
  else if(htim->Instance==TIM2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002464:	d143      	bne.n	80024ee <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002466:	4b70      	ldr	r3, [pc, #448]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	4a6f      	ldr	r2, [pc, #444]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	6193      	str	r3, [r2, #24]
 8002472:	4b6d      	ldr	r3, [pc, #436]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	623b      	str	r3, [r7, #32]
 800247c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800247e:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	4a69      	ldr	r2, [pc, #420]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 8002484:	f043 0308 	orr.w	r3, r3, #8
 8002488:	6193      	str	r3, [r2, #24]
 800248a:	4b67      	ldr	r3, [pc, #412]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002496:	2303      	movs	r3, #3
 8002498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2302      	movs	r3, #2
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024a6:	4619      	mov	r1, r3
 80024a8:	4860      	ldr	r0, [pc, #384]	; (800262c <HAL_TIM_MspPostInit+0x224>)
 80024aa:	f000 febd 	bl	8003228 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	2302      	movs	r3, #2
 80024ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024c0:	4619      	mov	r1, r3
 80024c2:	485b      	ldr	r0, [pc, #364]	; (8002630 <HAL_TIM_MspPostInit+0x228>)
 80024c4:	f000 feb0 	bl	8003228 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80024c8:	4b5a      	ldr	r3, [pc, #360]	; (8002634 <HAL_TIM_MspPostInit+0x22c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80024d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80024dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80024de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e6:	4a53      	ldr	r2, [pc, #332]	; (8002634 <HAL_TIM_MspPostInit+0x22c>)
 80024e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ea:	6053      	str	r3, [r2, #4]
}
 80024ec:	e095      	b.n	800261a <HAL_TIM_MspPostInit+0x212>
  else if(htim->Instance==TIM3)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a51      	ldr	r2, [pc, #324]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d12a      	bne.n	800254e <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f8:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4a4a      	ldr	r2, [pc, #296]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 80024fe:	f043 0308 	orr.w	r3, r3, #8
 8002502:	6193      	str	r3, [r2, #24]
 8002504:	4b48      	ldr	r3, [pc, #288]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002510:	2333      	movs	r3, #51	; 0x33
 8002512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002518:	2302      	movs	r3, #2
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002520:	4619      	mov	r1, r3
 8002522:	4843      	ldr	r0, [pc, #268]	; (8002630 <HAL_TIM_MspPostInit+0x228>)
 8002524:	f000 fe80 	bl	8003228 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002528:	4b42      	ldr	r3, [pc, #264]	; (8002634 <HAL_TIM_MspPostInit+0x22c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800252e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002530:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002538:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800253c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800253e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002540:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002546:	4a3b      	ldr	r2, [pc, #236]	; (8002634 <HAL_TIM_MspPostInit+0x22c>)
 8002548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800254a:	6053      	str	r3, [r2, #4]
}
 800254c:	e065      	b.n	800261a <HAL_TIM_MspPostInit+0x212>
  else if(htim->Instance==TIM4)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a3a      	ldr	r2, [pc, #232]	; (800263c <HAL_TIM_MspPostInit+0x234>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d119      	bne.n	800258c <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002558:	4b33      	ldr	r3, [pc, #204]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	4a32      	ldr	r2, [pc, #200]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 800255e:	f043 0308 	orr.w	r3, r3, #8
 8002562:	6193      	str	r3, [r2, #24]
 8002564:	4b30      	ldr	r3, [pc, #192]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002570:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2302      	movs	r3, #2
 800257c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002582:	4619      	mov	r1, r3
 8002584:	482a      	ldr	r0, [pc, #168]	; (8002630 <HAL_TIM_MspPostInit+0x228>)
 8002586:	f000 fe4f 	bl	8003228 <HAL_GPIO_Init>
}
 800258a:	e046      	b.n	800261a <HAL_TIM_MspPostInit+0x212>
  else if(htim->Instance==TIM16)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a2b      	ldr	r2, [pc, #172]	; (8002640 <HAL_TIM_MspPostInit+0x238>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d11e      	bne.n	80025d4 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	4b24      	ldr	r3, [pc, #144]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	4a23      	ldr	r2, [pc, #140]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	6193      	str	r3, [r2, #24]
 80025a2:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025ae:	2340      	movs	r3, #64	; 0x40
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b6:	2302      	movs	r3, #2
 80025b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025be:	4619      	mov	r1, r3
 80025c0:	481a      	ldr	r0, [pc, #104]	; (800262c <HAL_TIM_MspPostInit+0x224>)
 80025c2:	f000 fe31 	bl	8003228 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM16_ENABLE();
 80025c6:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_TIM_MspPostInit+0x22c>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	4a1a      	ldr	r2, [pc, #104]	; (8002634 <HAL_TIM_MspPostInit+0x22c>)
 80025cc:	f043 0302 	orr.w	r3, r3, #2
 80025d0:	61d3      	str	r3, [r2, #28]
}
 80025d2:	e022      	b.n	800261a <HAL_TIM_MspPostInit+0x212>
  else if(htim->Instance==TIM17)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1a      	ldr	r2, [pc, #104]	; (8002644 <HAL_TIM_MspPostInit+0x23c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d11d      	bne.n	800261a <HAL_TIM_MspPostInit+0x212>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	4a11      	ldr	r2, [pc, #68]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	6193      	str	r3, [r2, #24]
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <HAL_TIM_MspPostInit+0x220>)
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2302      	movs	r3, #2
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002606:	4619      	mov	r1, r3
 8002608:	4808      	ldr	r0, [pc, #32]	; (800262c <HAL_TIM_MspPostInit+0x224>)
 800260a:	f000 fe0d 	bl	8003228 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM17_ENABLE();
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_TIM_MspPostInit+0x22c>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	4a08      	ldr	r2, [pc, #32]	; (8002634 <HAL_TIM_MspPostInit+0x22c>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	61d3      	str	r3, [r2, #28]
}
 800261a:	bf00      	nop
 800261c:	3740      	adds	r7, #64	; 0x40
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40012c00 	.word	0x40012c00
 8002628:	40021000 	.word	0x40021000
 800262c:	40010800 	.word	0x40010800
 8002630:	40010c00 	.word	0x40010c00
 8002634:	40010000 	.word	0x40010000
 8002638:	40000400 	.word	0x40000400
 800263c:	40000800 	.word	0x40000800
 8002640:	40014400 	.word	0x40014400
 8002644:	40014800 	.word	0x40014800

08002648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a46      	ldr	r2, [pc, #280]	; (800277c <HAL_UART_MspInit+0x134>)
 8002664:	4293      	cmp	r3, r2
 8002666:	f040 8084 	bne.w	8002772 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800266a:	4b45      	ldr	r3, [pc, #276]	; (8002780 <HAL_UART_MspInit+0x138>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	4a44      	ldr	r2, [pc, #272]	; (8002780 <HAL_UART_MspInit+0x138>)
 8002670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002674:	61d3      	str	r3, [r2, #28]
 8002676:	4b42      	ldr	r3, [pc, #264]	; (8002780 <HAL_UART_MspInit+0x138>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002682:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <HAL_UART_MspInit+0x138>)
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	4a3e      	ldr	r2, [pc, #248]	; (8002780 <HAL_UART_MspInit+0x138>)
 8002688:	f043 0304 	orr.w	r3, r3, #4
 800268c:	6193      	str	r3, [r2, #24]
 800268e:	4b3c      	ldr	r3, [pc, #240]	; (8002780 <HAL_UART_MspInit+0x138>)
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800269a:	2304      	movs	r3, #4
 800269c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a6:	f107 0310 	add.w	r3, r7, #16
 80026aa:	4619      	mov	r1, r3
 80026ac:	4835      	ldr	r0, [pc, #212]	; (8002784 <HAL_UART_MspInit+0x13c>)
 80026ae:	f000 fdbb 	bl	8003228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026b2:	2308      	movs	r3, #8
 80026b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f107 0310 	add.w	r3, r7, #16
 80026c2:	4619      	mov	r1, r3
 80026c4:	482f      	ldr	r0, [pc, #188]	; (8002784 <HAL_UART_MspInit+0x13c>)
 80026c6:	f000 fdaf 	bl	8003228 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80026ca:	4b2f      	ldr	r3, [pc, #188]	; (8002788 <HAL_UART_MspInit+0x140>)
 80026cc:	4a2f      	ldr	r2, [pc, #188]	; (800278c <HAL_UART_MspInit+0x144>)
 80026ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026d0:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <HAL_UART_MspInit+0x140>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d6:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <HAL_UART_MspInit+0x140>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026dc:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <HAL_UART_MspInit+0x140>)
 80026de:	2280      	movs	r2, #128	; 0x80
 80026e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026e2:	4b29      	ldr	r3, [pc, #164]	; (8002788 <HAL_UART_MspInit+0x140>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026e8:	4b27      	ldr	r3, [pc, #156]	; (8002788 <HAL_UART_MspInit+0x140>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <HAL_UART_MspInit+0x140>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026f4:	4b24      	ldr	r3, [pc, #144]	; (8002788 <HAL_UART_MspInit+0x140>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026fa:	4823      	ldr	r0, [pc, #140]	; (8002788 <HAL_UART_MspInit+0x140>)
 80026fc:	f000 faf2 	bl	8002ce4 <HAL_DMA_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002706:	f7ff fd59 	bl	80021bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a1e      	ldr	r2, [pc, #120]	; (8002788 <HAL_UART_MspInit+0x140>)
 800270e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002710:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <HAL_UART_MspInit+0x140>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <HAL_UART_MspInit+0x148>)
 8002718:	4a1e      	ldr	r2, [pc, #120]	; (8002794 <HAL_UART_MspInit+0x14c>)
 800271a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800271c:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <HAL_UART_MspInit+0x148>)
 800271e:	2210      	movs	r2, #16
 8002720:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002722:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <HAL_UART_MspInit+0x148>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <HAL_UART_MspInit+0x148>)
 800272a:	2280      	movs	r2, #128	; 0x80
 800272c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <HAL_UART_MspInit+0x148>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002734:	4b16      	ldr	r3, [pc, #88]	; (8002790 <HAL_UART_MspInit+0x148>)
 8002736:	2200      	movs	r2, #0
 8002738:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <HAL_UART_MspInit+0x148>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002740:	4b13      	ldr	r3, [pc, #76]	; (8002790 <HAL_UART_MspInit+0x148>)
 8002742:	2200      	movs	r2, #0
 8002744:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002746:	4812      	ldr	r0, [pc, #72]	; (8002790 <HAL_UART_MspInit+0x148>)
 8002748:	f000 facc 	bl	8002ce4 <HAL_DMA_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8002752:	f7ff fd33 	bl	80021bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a0d      	ldr	r2, [pc, #52]	; (8002790 <HAL_UART_MspInit+0x148>)
 800275a:	639a      	str	r2, [r3, #56]	; 0x38
 800275c:	4a0c      	ldr	r2, [pc, #48]	; (8002790 <HAL_UART_MspInit+0x148>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	2026      	movs	r0, #38	; 0x26
 8002768:	f000 fa85 	bl	8002c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800276c:	2026      	movs	r0, #38	; 0x26
 800276e:	f000 fa9e 	bl	8002cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002772:	bf00      	nop
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40004400 	.word	0x40004400
 8002780:	40021000 	.word	0x40021000
 8002784:	40010800 	.word	0x40010800
 8002788:	20000964 	.word	0x20000964
 800278c:	4002006c 	.word	0x4002006c
 8002790:	200009a8 	.word	0x200009a8
 8002794:	40020080 	.word	0x40020080

08002798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800279c:	e7fe      	b.n	800279c <NMI_Handler+0x4>

0800279e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a2:	e7fe      	b.n	80027a2 <HardFault_Handler+0x4>

080027a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <MemManage_Handler+0x4>

080027aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ae:	e7fe      	b.n	80027ae <BusFault_Handler+0x4>

080027b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <UsageFault_Handler+0x4>

080027b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027de:	f000 f933 	bl	8002a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <DMA1_Channel6_IRQHandler+0x10>)
 80027ee:	f000 fbe7 	bl	8002fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000964 	.word	0x20000964

080027fc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <DMA1_Channel7_IRQHandler+0x10>)
 8002802:	f000 fbdd 	bl	8002fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	200009a8 	.word	0x200009a8

08002810 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <USART2_IRQHandler+0x10>)
 8002816:	f002 fe8b 	bl	8005530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	2000091c 	.word	0x2000091c

08002824 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002828:	4802      	ldr	r0, [pc, #8]	; (8002834 <TIM6_DAC_IRQHandler+0x10>)
 800282a:	f001 fc9a 	bl	8004162 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	200007fc 	.word	0x200007fc

08002838 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	e00a      	b.n	8002860 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800284a:	f3af 8000 	nop.w
 800284e:	4601      	mov	r1, r0
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	60ba      	str	r2, [r7, #8]
 8002856:	b2ca      	uxtb	r2, r1
 8002858:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3301      	adds	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	429a      	cmp	r2, r3
 8002866:	dbf0      	blt.n	800284a <_read+0x12>
  }

  return len;
 8002868:	687b      	ldr	r3, [r7, #4]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e009      	b.n	8002898 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	60ba      	str	r2, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe fad3 	bl	8000e38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3301      	adds	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	429a      	cmp	r2, r3
 800289e:	dbf1      	blt.n	8002884 <_write+0x12>
  }
  return len;
 80028a0:	687b      	ldr	r3, [r7, #4]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <_close>:

int _close(int file)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028d0:	605a      	str	r2, [r3, #4]
  return 0;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <_isatty>:

int _isatty(int file)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028e6:	2301      	movs	r3, #1
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
	...

0800290c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002914:	4a14      	ldr	r2, [pc, #80]	; (8002968 <_sbrk+0x5c>)
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <_sbrk+0x60>)
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002920:	4b13      	ldr	r3, [pc, #76]	; (8002970 <_sbrk+0x64>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <_sbrk+0x64>)
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <_sbrk+0x68>)
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <_sbrk+0x64>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	429a      	cmp	r2, r3
 800293a:	d207      	bcs.n	800294c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800293c:	f003 ff44 	bl	80067c8 <__errno>
 8002940:	4603      	mov	r3, r0
 8002942:	220c      	movs	r2, #12
 8002944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	e009      	b.n	8002960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800294c:	4b08      	ldr	r3, [pc, #32]	; (8002970 <_sbrk+0x64>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <_sbrk+0x64>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	4a05      	ldr	r2, [pc, #20]	; (8002970 <_sbrk+0x64>)
 800295c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800295e:	68fb      	ldr	r3, [r7, #12]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20002000 	.word	0x20002000
 800296c:	00000400 	.word	0x00000400
 8002970:	200009ec 	.word	0x200009ec
 8002974:	20000b40 	.word	0x20000b40

08002978 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
 }
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
   bl  SystemInit
 8002984:	f7ff fff8 	bl	8002978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002988:	480b      	ldr	r0, [pc, #44]	; (80029b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800298a:	490c      	ldr	r1, [pc, #48]	; (80029bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800298c:	4a0c      	ldr	r2, [pc, #48]	; (80029c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002990:	e002      	b.n	8002998 <LoopCopyDataInit>

08002992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002996:	3304      	adds	r3, #4

08002998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800299a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800299c:	d3f9      	bcc.n	8002992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80029a0:	4c09      	ldr	r4, [pc, #36]	; (80029c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a4:	e001      	b.n	80029aa <LoopFillZerobss>

080029a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a8:	3204      	adds	r2, #4

080029aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029ac:	d3fb      	bcc.n	80029a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ae:	f003 ff11 	bl	80067d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029b2:	f7fe fe17 	bl	80015e4 <main>
  bx lr
 80029b6:	4770      	bx	lr
  ldr r0, =_sdata
 80029b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029bc:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80029c0:	08007810 	.word	0x08007810
  ldr r2, =_sbss
 80029c4:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80029c8:	20000b40 	.word	0x20000b40

080029cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029cc:	e7fe      	b.n	80029cc <ADC1_IRQHandler>

080029ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d2:	2003      	movs	r0, #3
 80029d4:	f000 f944 	bl	8002c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029d8:	200f      	movs	r0, #15
 80029da:	f000 f805 	bl	80029e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029de:	f7ff fbf3 	bl	80021c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029f0:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_InitTick+0x54>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_InitTick+0x58>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	4619      	mov	r1, r3
 80029fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f95f 	bl	8002cca <HAL_SYSTICK_Config>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00e      	b.n	8002a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b0f      	cmp	r3, #15
 8002a1a:	d80a      	bhi.n	8002a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	f000 f927 	bl	8002c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a28:	4a06      	ldr	r2, [pc, #24]	; (8002a44 <HAL_InitTick+0x5c>)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e000      	b.n	8002a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	200000a0 	.word	0x200000a0
 8002a40:	200000a8 	.word	0x200000a8
 8002a44:	200000a4 	.word	0x200000a4

08002a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_IncTick+0x1c>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_IncTick+0x20>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <HAL_IncTick+0x20>)
 8002a5a:	6013      	str	r3, [r2, #0]
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	200000a8 	.word	0x200000a8
 8002a68:	200009f0 	.word	0x200009f0

08002a6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a70:	4b02      	ldr	r3, [pc, #8]	; (8002a7c <HAL_GetTick+0x10>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	200009f0 	.word	0x200009f0

08002a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a88:	f7ff fff0 	bl	8002a6c <HAL_GetTick>
 8002a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d005      	beq.n	8002aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_Delay+0x44>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aa6:	bf00      	nop
 8002aa8:	f7ff ffe0 	bl	8002a6c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d8f7      	bhi.n	8002aa8 <HAL_Delay+0x28>
  {
  }
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200000a8 	.word	0x200000a8

08002ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <__NVIC_SetPriorityGrouping+0x44>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002afa:	4a04      	ldr	r2, [pc, #16]	; (8002b0c <__NVIC_SetPriorityGrouping+0x44>)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	60d3      	str	r3, [r2, #12]
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <__NVIC_GetPriorityGrouping+0x18>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	0a1b      	lsrs	r3, r3, #8
 8002b1a:	f003 0307 	and.w	r3, r3, #7
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	db0b      	blt.n	8002b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	f003 021f 	and.w	r2, r3, #31
 8002b44:	4906      	ldr	r1, [pc, #24]	; (8002b60 <__NVIC_EnableIRQ+0x34>)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	e000e100 	.word	0xe000e100

08002b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	6039      	str	r1, [r7, #0]
 8002b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	db0a      	blt.n	8002b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	490c      	ldr	r1, [pc, #48]	; (8002bb0 <__NVIC_SetPriority+0x4c>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	0112      	lsls	r2, r2, #4
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	440b      	add	r3, r1
 8002b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b8c:	e00a      	b.n	8002ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4908      	ldr	r1, [pc, #32]	; (8002bb4 <__NVIC_SetPriority+0x50>)
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	3b04      	subs	r3, #4
 8002b9c:	0112      	lsls	r2, r2, #4
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	761a      	strb	r2, [r3, #24]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000e100 	.word	0xe000e100
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b089      	sub	sp, #36	; 0x24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f1c3 0307 	rsb	r3, r3, #7
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	bf28      	it	cs
 8002bd6:	2304      	movcs	r3, #4
 8002bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	d902      	bls.n	8002be8 <NVIC_EncodePriority+0x30>
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3b03      	subs	r3, #3
 8002be6:	e000      	b.n	8002bea <NVIC_EncodePriority+0x32>
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c00:	f04f 31ff 	mov.w	r1, #4294967295
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	43d9      	mvns	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	4313      	orrs	r3, r2
         );
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3724      	adds	r7, #36	; 0x24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c2c:	d301      	bcc.n	8002c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00f      	b.n	8002c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <SysTick_Config+0x40>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c3a:	210f      	movs	r1, #15
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	f7ff ff90 	bl	8002b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <SysTick_Config+0x40>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4a:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <SysTick_Config+0x40>)
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	e000e010 	.word	0xe000e010

08002c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ff2d 	bl	8002ac8 <__NVIC_SetPriorityGrouping>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
 8002c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c88:	f7ff ff42 	bl	8002b10 <__NVIC_GetPriorityGrouping>
 8002c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	6978      	ldr	r0, [r7, #20]
 8002c94:	f7ff ff90 	bl	8002bb8 <NVIC_EncodePriority>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff5f 	bl	8002b64 <__NVIC_SetPriority>
}
 8002ca6:	bf00      	nop
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff35 	bl	8002b2c <__NVIC_EnableIRQ>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff ffa2 	bl	8002c1c <SysTick_Config>
 8002cd8:	4603      	mov	r3, r0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e043      	b.n	8002d82 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4b22      	ldr	r3, [pc, #136]	; (8002d8c <HAL_DMA_Init+0xa8>)
 8002d02:	4413      	add	r3, r2
 8002d04:	4a22      	ldr	r2, [pc, #136]	; (8002d90 <HAL_DMA_Init+0xac>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	009a      	lsls	r2, r3, #2
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a1f      	ldr	r2, [pc, #124]	; (8002d94 <HAL_DMA_Init+0xb0>)
 8002d16:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	bffdfff8 	.word	0xbffdfff8
 8002d90:	cccccccd 	.word	0xcccccccd
 8002d94:	40020000 	.word	0x40020000

08002d98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_DMA_Start_IT+0x20>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e04b      	b.n	8002e50 <HAL_DMA_Start_IT+0xb8>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d13a      	bne.n	8002e42 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f9eb 	bl	80031cc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 020e 	orr.w	r2, r2, #14
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	e00f      	b.n	8002e30 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0204 	bic.w	r2, r2, #4
 8002e1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 020a 	orr.w	r2, r2, #10
 8002e2e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	e005      	b.n	8002e4e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d008      	beq.n	8002e82 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2204      	movs	r2, #4
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e020      	b.n	8002ec4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 020e 	bic.w	r2, r2, #14
 8002e90:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	2101      	movs	r1, #1
 8002eac:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d005      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2204      	movs	r2, #4
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
 8002ef2:	e051      	b.n	8002f98 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 020e 	bic.w	r2, r2, #14
 8002f02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <HAL_DMA_Abort_IT+0xd4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d029      	beq.n	8002f72 <HAL_DMA_Abort_IT+0xa2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a21      	ldr	r2, [pc, #132]	; (8002fa8 <HAL_DMA_Abort_IT+0xd8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d022      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x9e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1f      	ldr	r2, [pc, #124]	; (8002fac <HAL_DMA_Abort_IT+0xdc>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d01a      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x98>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1e      	ldr	r2, [pc, #120]	; (8002fb0 <HAL_DMA_Abort_IT+0xe0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d012      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x92>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <HAL_DMA_Abort_IT+0xe4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00a      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x8c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <HAL_DMA_Abort_IT+0xe8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d102      	bne.n	8002f56 <HAL_DMA_Abort_IT+0x86>
 8002f50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f54:	e00e      	b.n	8002f74 <HAL_DMA_Abort_IT+0xa4>
 8002f56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f5a:	e00b      	b.n	8002f74 <HAL_DMA_Abort_IT+0xa4>
 8002f5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f60:	e008      	b.n	8002f74 <HAL_DMA_Abort_IT+0xa4>
 8002f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f66:	e005      	b.n	8002f74 <HAL_DMA_Abort_IT+0xa4>
 8002f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f6c:	e002      	b.n	8002f74 <HAL_DMA_Abort_IT+0xa4>
 8002f6e:	2310      	movs	r3, #16
 8002f70:	e000      	b.n	8002f74 <HAL_DMA_Abort_IT+0xa4>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4a11      	ldr	r2, [pc, #68]	; (8002fbc <HAL_DMA_Abort_IT+0xec>)
 8002f76:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4798      	blx	r3
    } 
  }
  return status;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40020008 	.word	0x40020008
 8002fa8:	4002001c 	.word	0x4002001c
 8002fac:	40020030 	.word	0x40020030
 8002fb0:	40020044 	.word	0x40020044
 8002fb4:	40020058 	.word	0x40020058
 8002fb8:	4002006c 	.word	0x4002006c
 8002fbc:	40020000 	.word	0x40020000

08002fc0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	2204      	movs	r2, #4
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d04f      	beq.n	8003088 <HAL_DMA_IRQHandler+0xc8>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d04a      	beq.n	8003088 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d107      	bne.n	8003010 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0204 	bic.w	r2, r2, #4
 800300e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a66      	ldr	r2, [pc, #408]	; (80031b0 <HAL_DMA_IRQHandler+0x1f0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d029      	beq.n	800306e <HAL_DMA_IRQHandler+0xae>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a65      	ldr	r2, [pc, #404]	; (80031b4 <HAL_DMA_IRQHandler+0x1f4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d022      	beq.n	800306a <HAL_DMA_IRQHandler+0xaa>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a63      	ldr	r2, [pc, #396]	; (80031b8 <HAL_DMA_IRQHandler+0x1f8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01a      	beq.n	8003064 <HAL_DMA_IRQHandler+0xa4>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a62      	ldr	r2, [pc, #392]	; (80031bc <HAL_DMA_IRQHandler+0x1fc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d012      	beq.n	800305e <HAL_DMA_IRQHandler+0x9e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a60      	ldr	r2, [pc, #384]	; (80031c0 <HAL_DMA_IRQHandler+0x200>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00a      	beq.n	8003058 <HAL_DMA_IRQHandler+0x98>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a5f      	ldr	r2, [pc, #380]	; (80031c4 <HAL_DMA_IRQHandler+0x204>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d102      	bne.n	8003052 <HAL_DMA_IRQHandler+0x92>
 800304c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003050:	e00e      	b.n	8003070 <HAL_DMA_IRQHandler+0xb0>
 8003052:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003056:	e00b      	b.n	8003070 <HAL_DMA_IRQHandler+0xb0>
 8003058:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800305c:	e008      	b.n	8003070 <HAL_DMA_IRQHandler+0xb0>
 800305e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003062:	e005      	b.n	8003070 <HAL_DMA_IRQHandler+0xb0>
 8003064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003068:	e002      	b.n	8003070 <HAL_DMA_IRQHandler+0xb0>
 800306a:	2340      	movs	r3, #64	; 0x40
 800306c:	e000      	b.n	8003070 <HAL_DMA_IRQHandler+0xb0>
 800306e:	2304      	movs	r3, #4
 8003070:	4a55      	ldr	r2, [pc, #340]	; (80031c8 <HAL_DMA_IRQHandler+0x208>)
 8003072:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 8094 	beq.w	80031a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003086:	e08e      	b.n	80031a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	2202      	movs	r2, #2
 800308e:	409a      	lsls	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d056      	beq.n	8003146 <HAL_DMA_IRQHandler+0x186>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d051      	beq.n	8003146 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10b      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 020a 	bic.w	r2, r2, #10
 80030be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a38      	ldr	r2, [pc, #224]	; (80031b0 <HAL_DMA_IRQHandler+0x1f0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d029      	beq.n	8003126 <HAL_DMA_IRQHandler+0x166>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a37      	ldr	r2, [pc, #220]	; (80031b4 <HAL_DMA_IRQHandler+0x1f4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d022      	beq.n	8003122 <HAL_DMA_IRQHandler+0x162>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a35      	ldr	r2, [pc, #212]	; (80031b8 <HAL_DMA_IRQHandler+0x1f8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d01a      	beq.n	800311c <HAL_DMA_IRQHandler+0x15c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a34      	ldr	r2, [pc, #208]	; (80031bc <HAL_DMA_IRQHandler+0x1fc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d012      	beq.n	8003116 <HAL_DMA_IRQHandler+0x156>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a32      	ldr	r2, [pc, #200]	; (80031c0 <HAL_DMA_IRQHandler+0x200>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00a      	beq.n	8003110 <HAL_DMA_IRQHandler+0x150>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a31      	ldr	r2, [pc, #196]	; (80031c4 <HAL_DMA_IRQHandler+0x204>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d102      	bne.n	800310a <HAL_DMA_IRQHandler+0x14a>
 8003104:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003108:	e00e      	b.n	8003128 <HAL_DMA_IRQHandler+0x168>
 800310a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800310e:	e00b      	b.n	8003128 <HAL_DMA_IRQHandler+0x168>
 8003110:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003114:	e008      	b.n	8003128 <HAL_DMA_IRQHandler+0x168>
 8003116:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800311a:	e005      	b.n	8003128 <HAL_DMA_IRQHandler+0x168>
 800311c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003120:	e002      	b.n	8003128 <HAL_DMA_IRQHandler+0x168>
 8003122:	2320      	movs	r3, #32
 8003124:	e000      	b.n	8003128 <HAL_DMA_IRQHandler+0x168>
 8003126:	2302      	movs	r3, #2
 8003128:	4a27      	ldr	r2, [pc, #156]	; (80031c8 <HAL_DMA_IRQHandler+0x208>)
 800312a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	2b00      	cmp	r3, #0
 800313a:	d034      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003144:	e02f      	b.n	80031a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	2208      	movs	r2, #8
 800314c:	409a      	lsls	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d028      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x1e8>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d023      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 020e 	bic.w	r2, r2, #14
 800316e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003178:	2101      	movs	r1, #1
 800317a:	fa01 f202 	lsl.w	r2, r1, r2
 800317e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	2b00      	cmp	r3, #0
 800319c:	d004      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	4798      	blx	r3
    }
  }
  return;
 80031a6:	bf00      	nop
 80031a8:	bf00      	nop
}
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40020008 	.word	0x40020008
 80031b4:	4002001c 	.word	0x4002001c
 80031b8:	40020030 	.word	0x40020030
 80031bc:	40020044 	.word	0x40020044
 80031c0:	40020058 	.word	0x40020058
 80031c4:	4002006c 	.word	0x4002006c
 80031c8:	40020000 	.word	0x40020000

080031cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e2:	2101      	movs	r1, #1
 80031e4:	fa01 f202 	lsl.w	r2, r1, r2
 80031e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d108      	bne.n	800320c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800320a:	e007      	b.n	800321c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	60da      	str	r2, [r3, #12]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr
	...

08003228 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003228:	b480      	push	{r7}
 800322a:	b08b      	sub	sp, #44	; 0x2c
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003232:	2300      	movs	r3, #0
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003236:	2300      	movs	r3, #0
 8003238:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800323a:	e169      	b.n	8003510 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800323c:	2201      	movs	r2, #1
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	429a      	cmp	r2, r3
 8003256:	f040 8158 	bne.w	800350a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	4a9a      	ldr	r2, [pc, #616]	; (80034c8 <HAL_GPIO_Init+0x2a0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d05e      	beq.n	8003322 <HAL_GPIO_Init+0xfa>
 8003264:	4a98      	ldr	r2, [pc, #608]	; (80034c8 <HAL_GPIO_Init+0x2a0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d875      	bhi.n	8003356 <HAL_GPIO_Init+0x12e>
 800326a:	4a98      	ldr	r2, [pc, #608]	; (80034cc <HAL_GPIO_Init+0x2a4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d058      	beq.n	8003322 <HAL_GPIO_Init+0xfa>
 8003270:	4a96      	ldr	r2, [pc, #600]	; (80034cc <HAL_GPIO_Init+0x2a4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d86f      	bhi.n	8003356 <HAL_GPIO_Init+0x12e>
 8003276:	4a96      	ldr	r2, [pc, #600]	; (80034d0 <HAL_GPIO_Init+0x2a8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d052      	beq.n	8003322 <HAL_GPIO_Init+0xfa>
 800327c:	4a94      	ldr	r2, [pc, #592]	; (80034d0 <HAL_GPIO_Init+0x2a8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d869      	bhi.n	8003356 <HAL_GPIO_Init+0x12e>
 8003282:	4a94      	ldr	r2, [pc, #592]	; (80034d4 <HAL_GPIO_Init+0x2ac>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d04c      	beq.n	8003322 <HAL_GPIO_Init+0xfa>
 8003288:	4a92      	ldr	r2, [pc, #584]	; (80034d4 <HAL_GPIO_Init+0x2ac>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d863      	bhi.n	8003356 <HAL_GPIO_Init+0x12e>
 800328e:	4a92      	ldr	r2, [pc, #584]	; (80034d8 <HAL_GPIO_Init+0x2b0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d046      	beq.n	8003322 <HAL_GPIO_Init+0xfa>
 8003294:	4a90      	ldr	r2, [pc, #576]	; (80034d8 <HAL_GPIO_Init+0x2b0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d85d      	bhi.n	8003356 <HAL_GPIO_Init+0x12e>
 800329a:	2b12      	cmp	r3, #18
 800329c:	d82a      	bhi.n	80032f4 <HAL_GPIO_Init+0xcc>
 800329e:	2b12      	cmp	r3, #18
 80032a0:	d859      	bhi.n	8003356 <HAL_GPIO_Init+0x12e>
 80032a2:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <HAL_GPIO_Init+0x80>)
 80032a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a8:	08003323 	.word	0x08003323
 80032ac:	080032fd 	.word	0x080032fd
 80032b0:	0800330f 	.word	0x0800330f
 80032b4:	08003351 	.word	0x08003351
 80032b8:	08003357 	.word	0x08003357
 80032bc:	08003357 	.word	0x08003357
 80032c0:	08003357 	.word	0x08003357
 80032c4:	08003357 	.word	0x08003357
 80032c8:	08003357 	.word	0x08003357
 80032cc:	08003357 	.word	0x08003357
 80032d0:	08003357 	.word	0x08003357
 80032d4:	08003357 	.word	0x08003357
 80032d8:	08003357 	.word	0x08003357
 80032dc:	08003357 	.word	0x08003357
 80032e0:	08003357 	.word	0x08003357
 80032e4:	08003357 	.word	0x08003357
 80032e8:	08003357 	.word	0x08003357
 80032ec:	08003305 	.word	0x08003305
 80032f0:	08003319 	.word	0x08003319
 80032f4:	4a79      	ldr	r2, [pc, #484]	; (80034dc <HAL_GPIO_Init+0x2b4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032fa:	e02c      	b.n	8003356 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	623b      	str	r3, [r7, #32]
          break;
 8003302:	e029      	b.n	8003358 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	3304      	adds	r3, #4
 800330a:	623b      	str	r3, [r7, #32]
          break;
 800330c:	e024      	b.n	8003358 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	3308      	adds	r3, #8
 8003314:	623b      	str	r3, [r7, #32]
          break;
 8003316:	e01f      	b.n	8003358 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	330c      	adds	r3, #12
 800331e:	623b      	str	r3, [r7, #32]
          break;
 8003320:	e01a      	b.n	8003358 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d102      	bne.n	8003330 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800332a:	2304      	movs	r3, #4
 800332c:	623b      	str	r3, [r7, #32]
          break;
 800332e:	e013      	b.n	8003358 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d105      	bne.n	8003344 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003338:	2308      	movs	r3, #8
 800333a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	611a      	str	r2, [r3, #16]
          break;
 8003342:	e009      	b.n	8003358 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003344:	2308      	movs	r3, #8
 8003346:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69fa      	ldr	r2, [r7, #28]
 800334c:	615a      	str	r2, [r3, #20]
          break;
 800334e:	e003      	b.n	8003358 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003350:	2300      	movs	r3, #0
 8003352:	623b      	str	r3, [r7, #32]
          break;
 8003354:	e000      	b.n	8003358 <HAL_GPIO_Init+0x130>
          break;
 8003356:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2bff      	cmp	r3, #255	; 0xff
 800335c:	d801      	bhi.n	8003362 <HAL_GPIO_Init+0x13a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	e001      	b.n	8003366 <HAL_GPIO_Init+0x13e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2bff      	cmp	r3, #255	; 0xff
 800336c:	d802      	bhi.n	8003374 <HAL_GPIO_Init+0x14c>
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	e002      	b.n	800337a <HAL_GPIO_Init+0x152>
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	3b08      	subs	r3, #8
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	210f      	movs	r1, #15
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	fa01 f303 	lsl.w	r3, r1, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	401a      	ands	r2, r3
 800338c:	6a39      	ldr	r1, [r7, #32]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	fa01 f303 	lsl.w	r3, r1, r3
 8003394:	431a      	orrs	r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80b1 	beq.w	800350a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033a8:	4b4d      	ldr	r3, [pc, #308]	; (80034e0 <HAL_GPIO_Init+0x2b8>)
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	4a4c      	ldr	r2, [pc, #304]	; (80034e0 <HAL_GPIO_Init+0x2b8>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6193      	str	r3, [r2, #24]
 80033b4:	4b4a      	ldr	r3, [pc, #296]	; (80034e0 <HAL_GPIO_Init+0x2b8>)
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033c0:	4a48      	ldr	r2, [pc, #288]	; (80034e4 <HAL_GPIO_Init+0x2bc>)
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	089b      	lsrs	r3, r3, #2
 80033c6:	3302      	adds	r3, #2
 80033c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	220f      	movs	r2, #15
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4013      	ands	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a40      	ldr	r2, [pc, #256]	; (80034e8 <HAL_GPIO_Init+0x2c0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d013      	beq.n	8003414 <HAL_GPIO_Init+0x1ec>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a3f      	ldr	r2, [pc, #252]	; (80034ec <HAL_GPIO_Init+0x2c4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00d      	beq.n	8003410 <HAL_GPIO_Init+0x1e8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a3e      	ldr	r2, [pc, #248]	; (80034f0 <HAL_GPIO_Init+0x2c8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d007      	beq.n	800340c <HAL_GPIO_Init+0x1e4>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a3d      	ldr	r2, [pc, #244]	; (80034f4 <HAL_GPIO_Init+0x2cc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d101      	bne.n	8003408 <HAL_GPIO_Init+0x1e0>
 8003404:	2303      	movs	r3, #3
 8003406:	e006      	b.n	8003416 <HAL_GPIO_Init+0x1ee>
 8003408:	2304      	movs	r3, #4
 800340a:	e004      	b.n	8003416 <HAL_GPIO_Init+0x1ee>
 800340c:	2302      	movs	r3, #2
 800340e:	e002      	b.n	8003416 <HAL_GPIO_Init+0x1ee>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <HAL_GPIO_Init+0x1ee>
 8003414:	2300      	movs	r3, #0
 8003416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003418:	f002 0203 	and.w	r2, r2, #3
 800341c:	0092      	lsls	r2, r2, #2
 800341e:	4093      	lsls	r3, r2
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003426:	492f      	ldr	r1, [pc, #188]	; (80034e4 <HAL_GPIO_Init+0x2bc>)
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	089b      	lsrs	r3, r3, #2
 800342c:	3302      	adds	r3, #2
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d006      	beq.n	800344e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003440:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <HAL_GPIO_Init+0x2d0>)
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	492c      	ldr	r1, [pc, #176]	; (80034f8 <HAL_GPIO_Init+0x2d0>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	608b      	str	r3, [r1, #8]
 800344c:	e006      	b.n	800345c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800344e:	4b2a      	ldr	r3, [pc, #168]	; (80034f8 <HAL_GPIO_Init+0x2d0>)
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	43db      	mvns	r3, r3
 8003456:	4928      	ldr	r1, [pc, #160]	; (80034f8 <HAL_GPIO_Init+0x2d0>)
 8003458:	4013      	ands	r3, r2
 800345a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d006      	beq.n	8003476 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003468:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <HAL_GPIO_Init+0x2d0>)
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	4922      	ldr	r1, [pc, #136]	; (80034f8 <HAL_GPIO_Init+0x2d0>)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	60cb      	str	r3, [r1, #12]
 8003474:	e006      	b.n	8003484 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_GPIO_Init+0x2d0>)
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	43db      	mvns	r3, r3
 800347e:	491e      	ldr	r1, [pc, #120]	; (80034f8 <HAL_GPIO_Init+0x2d0>)
 8003480:	4013      	ands	r3, r2
 8003482:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d006      	beq.n	800349e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003490:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <HAL_GPIO_Init+0x2d0>)
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	4918      	ldr	r1, [pc, #96]	; (80034f8 <HAL_GPIO_Init+0x2d0>)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
 800349c:	e006      	b.n	80034ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800349e:	4b16      	ldr	r3, [pc, #88]	; (80034f8 <HAL_GPIO_Init+0x2d0>)
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	43db      	mvns	r3, r3
 80034a6:	4914      	ldr	r1, [pc, #80]	; (80034f8 <HAL_GPIO_Init+0x2d0>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d021      	beq.n	80034fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <HAL_GPIO_Init+0x2d0>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	490e      	ldr	r1, [pc, #56]	; (80034f8 <HAL_GPIO_Init+0x2d0>)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]
 80034c4:	e021      	b.n	800350a <HAL_GPIO_Init+0x2e2>
 80034c6:	bf00      	nop
 80034c8:	10320000 	.word	0x10320000
 80034cc:	10310000 	.word	0x10310000
 80034d0:	10220000 	.word	0x10220000
 80034d4:	10210000 	.word	0x10210000
 80034d8:	10120000 	.word	0x10120000
 80034dc:	10110000 	.word	0x10110000
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40010000 	.word	0x40010000
 80034e8:	40010800 	.word	0x40010800
 80034ec:	40010c00 	.word	0x40010c00
 80034f0:	40011000 	.word	0x40011000
 80034f4:	40011400 	.word	0x40011400
 80034f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_GPIO_Init+0x304>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	43db      	mvns	r3, r3
 8003504:	4909      	ldr	r1, [pc, #36]	; (800352c <HAL_GPIO_Init+0x304>)
 8003506:	4013      	ands	r3, r2
 8003508:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	3301      	adds	r3, #1
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	fa22 f303 	lsr.w	r3, r2, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	f47f ae8e 	bne.w	800323c <HAL_GPIO_Init+0x14>
  }
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	372c      	adds	r7, #44	; 0x2c
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	40010400 	.word	0x40010400

08003530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	807b      	strh	r3, [r7, #2]
 800353c:	4613      	mov	r3, r2
 800353e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003540:	787b      	ldrb	r3, [r7, #1]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800354c:	e003      	b.n	8003556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800354e:	887b      	ldrh	r3, [r7, #2]
 8003550:	041a      	lsls	r2, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	611a      	str	r2, [r3, #16]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr

08003560 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003572:	887a      	ldrh	r2, [r7, #2]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4013      	ands	r3, r2
 8003578:	041a      	lsls	r2, r3, #16
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	43d9      	mvns	r1, r3
 800357e:	887b      	ldrh	r3, [r7, #2]
 8003580:	400b      	ands	r3, r1
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	611a      	str	r2, [r3, #16]
}
 8003588:	bf00      	nop
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr
	...

08003594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e272      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 8087 	beq.w	80036c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035b4:	4b92      	ldr	r3, [pc, #584]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d00c      	beq.n	80035da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035c0:	4b8f      	ldr	r3, [pc, #572]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 030c 	and.w	r3, r3, #12
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d112      	bne.n	80035f2 <HAL_RCC_OscConfig+0x5e>
 80035cc:	4b8c      	ldr	r3, [pc, #560]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d8:	d10b      	bne.n	80035f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035da:	4b89      	ldr	r3, [pc, #548]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d06c      	beq.n	80036c0 <HAL_RCC_OscConfig+0x12c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d168      	bne.n	80036c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e24c      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fa:	d106      	bne.n	800360a <HAL_RCC_OscConfig+0x76>
 80035fc:	4b80      	ldr	r3, [pc, #512]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a7f      	ldr	r2, [pc, #508]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	e02e      	b.n	8003668 <HAL_RCC_OscConfig+0xd4>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10c      	bne.n	800362c <HAL_RCC_OscConfig+0x98>
 8003612:	4b7b      	ldr	r3, [pc, #492]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a7a      	ldr	r2, [pc, #488]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	4b78      	ldr	r3, [pc, #480]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a77      	ldr	r2, [pc, #476]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003624:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	e01d      	b.n	8003668 <HAL_RCC_OscConfig+0xd4>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003634:	d10c      	bne.n	8003650 <HAL_RCC_OscConfig+0xbc>
 8003636:	4b72      	ldr	r3, [pc, #456]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a71      	ldr	r2, [pc, #452]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 800363c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	4b6f      	ldr	r3, [pc, #444]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a6e      	ldr	r2, [pc, #440]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	e00b      	b.n	8003668 <HAL_RCC_OscConfig+0xd4>
 8003650:	4b6b      	ldr	r3, [pc, #428]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a6a      	ldr	r2, [pc, #424]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	4b68      	ldr	r3, [pc, #416]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a67      	ldr	r2, [pc, #412]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003666:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d013      	beq.n	8003698 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7ff f9fc 	bl	8002a6c <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003678:	f7ff f9f8 	bl	8002a6c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b64      	cmp	r3, #100	; 0x64
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e200      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	4b5d      	ldr	r3, [pc, #372]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0xe4>
 8003696:	e014      	b.n	80036c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7ff f9e8 	bl	8002a6c <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a0:	f7ff f9e4 	bl	8002a6c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e1ec      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b2:	4b53      	ldr	r3, [pc, #332]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x10c>
 80036be:	e000      	b.n	80036c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d063      	beq.n	8003796 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036ce:	4b4c      	ldr	r3, [pc, #304]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00b      	beq.n	80036f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036da:	4b49      	ldr	r3, [pc, #292]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d11c      	bne.n	8003720 <HAL_RCC_OscConfig+0x18c>
 80036e6:	4b46      	ldr	r3, [pc, #280]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d116      	bne.n	8003720 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f2:	4b43      	ldr	r3, [pc, #268]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <HAL_RCC_OscConfig+0x176>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d001      	beq.n	800370a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e1c0      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370a:	4b3d      	ldr	r3, [pc, #244]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4939      	ldr	r1, [pc, #228]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371e:	e03a      	b.n	8003796 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d020      	beq.n	800376a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003728:	4b36      	ldr	r3, [pc, #216]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 800372a:	2201      	movs	r2, #1
 800372c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372e:	f7ff f99d 	bl	8002a6c <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003736:	f7ff f999 	bl	8002a6c <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e1a1      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003748:	4b2d      	ldr	r3, [pc, #180]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003754:	4b2a      	ldr	r3, [pc, #168]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4927      	ldr	r1, [pc, #156]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003764:	4313      	orrs	r3, r2
 8003766:	600b      	str	r3, [r1, #0]
 8003768:	e015      	b.n	8003796 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800376a:	4b26      	ldr	r3, [pc, #152]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003770:	f7ff f97c 	bl	8002a6c <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003778:	f7ff f978 	bl	8002a6c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e180      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d03a      	beq.n	8003818 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d019      	beq.n	80037de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037aa:	4b17      	ldr	r3, [pc, #92]	; (8003808 <HAL_RCC_OscConfig+0x274>)
 80037ac:	2201      	movs	r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b0:	f7ff f95c 	bl	8002a6c <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b8:	f7ff f958 	bl	8002a6c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e160      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037d6:	2001      	movs	r0, #1
 80037d8:	f000 fa9a 	bl	8003d10 <RCC_Delay>
 80037dc:	e01c      	b.n	8003818 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037de:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <HAL_RCC_OscConfig+0x274>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e4:	f7ff f942 	bl	8002a6c <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ea:	e00f      	b.n	800380c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ec:	f7ff f93e 	bl	8002a6c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d908      	bls.n	800380c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e146      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	42420000 	.word	0x42420000
 8003808:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380c:	4b92      	ldr	r3, [pc, #584]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e9      	bne.n	80037ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80a6 	beq.w	8003972 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800382a:	4b8b      	ldr	r3, [pc, #556]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10d      	bne.n	8003852 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003836:	4b88      	ldr	r3, [pc, #544]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	4a87      	ldr	r2, [pc, #540]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 800383c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003840:	61d3      	str	r3, [r2, #28]
 8003842:	4b85      	ldr	r3, [pc, #532]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384e:	2301      	movs	r3, #1
 8003850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	4b82      	ldr	r3, [pc, #520]	; (8003a5c <HAL_RCC_OscConfig+0x4c8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d118      	bne.n	8003890 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385e:	4b7f      	ldr	r3, [pc, #508]	; (8003a5c <HAL_RCC_OscConfig+0x4c8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a7e      	ldr	r2, [pc, #504]	; (8003a5c <HAL_RCC_OscConfig+0x4c8>)
 8003864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386a:	f7ff f8ff 	bl	8002a6c <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003872:	f7ff f8fb 	bl	8002a6c <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b64      	cmp	r3, #100	; 0x64
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e103      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003884:	4b75      	ldr	r3, [pc, #468]	; (8003a5c <HAL_RCC_OscConfig+0x4c8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d106      	bne.n	80038a6 <HAL_RCC_OscConfig+0x312>
 8003898:	4b6f      	ldr	r3, [pc, #444]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	4a6e      	ldr	r2, [pc, #440]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6213      	str	r3, [r2, #32]
 80038a4:	e02d      	b.n	8003902 <HAL_RCC_OscConfig+0x36e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x334>
 80038ae:	4b6a      	ldr	r3, [pc, #424]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	4a69      	ldr	r2, [pc, #420]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	6213      	str	r3, [r2, #32]
 80038ba:	4b67      	ldr	r3, [pc, #412]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	4a66      	ldr	r2, [pc, #408]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038c0:	f023 0304 	bic.w	r3, r3, #4
 80038c4:	6213      	str	r3, [r2, #32]
 80038c6:	e01c      	b.n	8003902 <HAL_RCC_OscConfig+0x36e>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b05      	cmp	r3, #5
 80038ce:	d10c      	bne.n	80038ea <HAL_RCC_OscConfig+0x356>
 80038d0:	4b61      	ldr	r3, [pc, #388]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	4a60      	ldr	r2, [pc, #384]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038d6:	f043 0304 	orr.w	r3, r3, #4
 80038da:	6213      	str	r3, [r2, #32]
 80038dc:	4b5e      	ldr	r3, [pc, #376]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	4a5d      	ldr	r2, [pc, #372]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	6213      	str	r3, [r2, #32]
 80038e8:	e00b      	b.n	8003902 <HAL_RCC_OscConfig+0x36e>
 80038ea:	4b5b      	ldr	r3, [pc, #364]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	4a5a      	ldr	r2, [pc, #360]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	6213      	str	r3, [r2, #32]
 80038f6:	4b58      	ldr	r3, [pc, #352]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	4a57      	ldr	r2, [pc, #348]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038fc:	f023 0304 	bic.w	r3, r3, #4
 8003900:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d015      	beq.n	8003936 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390a:	f7ff f8af 	bl	8002a6c <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003910:	e00a      	b.n	8003928 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003912:	f7ff f8ab 	bl	8002a6c <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003920:	4293      	cmp	r3, r2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e0b1      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003928:	4b4b      	ldr	r3, [pc, #300]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0ee      	beq.n	8003912 <HAL_RCC_OscConfig+0x37e>
 8003934:	e014      	b.n	8003960 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003936:	f7ff f899 	bl	8002a6c <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800393c:	e00a      	b.n	8003954 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393e:	f7ff f895 	bl	8002a6c <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	f241 3288 	movw	r2, #5000	; 0x1388
 800394c:	4293      	cmp	r3, r2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e09b      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003954:	4b40      	ldr	r3, [pc, #256]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1ee      	bne.n	800393e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003960:	7dfb      	ldrb	r3, [r7, #23]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d105      	bne.n	8003972 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003966:	4b3c      	ldr	r3, [pc, #240]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	4a3b      	ldr	r2, [pc, #236]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003970:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8087 	beq.w	8003a8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800397c:	4b36      	ldr	r3, [pc, #216]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	2b08      	cmp	r3, #8
 8003986:	d061      	beq.n	8003a4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d146      	bne.n	8003a1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003990:	4b33      	ldr	r3, [pc, #204]	; (8003a60 <HAL_RCC_OscConfig+0x4cc>)
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003996:	f7ff f869 	bl	8002a6c <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399e:	f7ff f865 	bl	8002a6c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e06d      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b0:	4b29      	ldr	r3, [pc, #164]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f0      	bne.n	800399e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c4:	d108      	bne.n	80039d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039c6:	4b24      	ldr	r3, [pc, #144]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	f023 020f 	bic.w	r2, r3, #15
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	4921      	ldr	r1, [pc, #132]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039d8:	4b1f      	ldr	r3, [pc, #124]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a19      	ldr	r1, [r3, #32]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	430b      	orrs	r3, r1
 80039ea:	491b      	ldr	r1, [pc, #108]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f0:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <HAL_RCC_OscConfig+0x4cc>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f6:	f7ff f839 	bl	8002a6c <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fe:	f7ff f835 	bl	8002a6c <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e03d      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a10:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f0      	beq.n	80039fe <HAL_RCC_OscConfig+0x46a>
 8003a1c:	e035      	b.n	8003a8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1e:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <HAL_RCC_OscConfig+0x4cc>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7ff f822 	bl	8002a6c <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2c:	f7ff f81e 	bl	8002a6c <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e026      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f0      	bne.n	8003a2c <HAL_RCC_OscConfig+0x498>
 8003a4a:	e01e      	b.n	8003a8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d107      	bne.n	8003a64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e019      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40007000 	.word	0x40007000
 8003a60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCC_OscConfig+0x500>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d106      	bne.n	8003a86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d001      	beq.n	8003a8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40021000 	.word	0x40021000

08003a98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0a0      	b.n	8003bee <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d020      	beq.n	8003afa <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac4:	4b4c      	ldr	r3, [pc, #304]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4a4b      	ldr	r2, [pc, #300]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003aca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ace:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003adc:	4b46      	ldr	r3, [pc, #280]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4a45      	ldr	r2, [pc, #276]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003ae2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ae6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae8:	4b43      	ldr	r3, [pc, #268]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4940      	ldr	r1, [pc, #256]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d040      	beq.n	8003b88 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b3a      	ldr	r3, [pc, #232]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d115      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e067      	b.n	8003bee <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d107      	bne.n	8003b36 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b26:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e05b      	b.n	8003bee <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b36:	4b30      	ldr	r3, [pc, #192]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e053      	b.n	8003bee <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b46:	4b2c      	ldr	r3, [pc, #176]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f023 0203 	bic.w	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4929      	ldr	r1, [pc, #164]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b58:	f7fe ff88 	bl	8002a6c <HAL_GetTick>
 8003b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5e:	e00a      	b.n	8003b76 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b60:	f7fe ff84 	bl	8002a6c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e03b      	b.n	8003bee <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 020c 	and.w	r2, r3, #12
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d1eb      	bne.n	8003b60 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b94:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4915      	ldr	r1, [pc, #84]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bb2:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	490d      	ldr	r1, [pc, #52]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bc6:	f000 f81f 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <HAL_RCC_ClockConfig+0x160>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	4909      	ldr	r1, [pc, #36]	; (8003bfc <HAL_RCC_ClockConfig+0x164>)
 8003bd8:	5ccb      	ldrb	r3, [r1, r3]
 8003bda:	fa22 f303 	lsr.w	r3, r2, r3
 8003bde:	4a08      	ldr	r2, [pc, #32]	; (8003c00 <HAL_RCC_ClockConfig+0x168>)
 8003be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <HAL_RCC_ClockConfig+0x16c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe fefe 	bl	80029e8 <HAL_InitTick>

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	0800779c 	.word	0x0800779c
 8003c00:	200000a0 	.word	0x200000a0
 8003c04:	200000a4 	.word	0x200000a4

08003c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c22:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x90>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d002      	beq.n	8003c38 <HAL_RCC_GetSysClockFreq+0x30>
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d003      	beq.n	8003c3e <HAL_RCC_GetSysClockFreq+0x36>
 8003c36:	e026      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c38:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x94>)
 8003c3a:	613b      	str	r3, [r7, #16]
      break;
 8003c3c:	e026      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	0c9b      	lsrs	r3, r3, #18
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	4a16      	ldr	r2, [pc, #88]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c48:	5cd3      	ldrb	r3, [r2, r3]
 8003c4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00f      	beq.n	8003c76 <HAL_RCC_GetSysClockFreq+0x6e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x90>)
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	4a11      	ldr	r2, [pc, #68]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c60:	5cd3      	ldrb	r3, [r2, r3]
 8003c62:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a0d      	ldr	r2, [pc, #52]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x94>)
 8003c68:	fb03 f202 	mul.w	r2, r3, r2
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	e004      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x78>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a0b      	ldr	r2, [pc, #44]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c7a:	fb02 f303 	mul.w	r3, r2, r3
 8003c7e:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
      break;
 8003c84:	e002      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x94>)
 8003c88:	613b      	str	r3, [r7, #16]
      break;
 8003c8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c8c:	693b      	ldr	r3, [r7, #16]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	007a1200 	.word	0x007a1200
 8003ca0:	080077b4 	.word	0x080077b4
 8003ca4:	080077c4 	.word	0x080077c4
 8003ca8:	003d0900 	.word	0x003d0900

08003cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb0:	4b02      	ldr	r3, [pc, #8]	; (8003cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr
 8003cbc:	200000a0 	.word	0x200000a0

08003cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cc4:	f7ff fff2 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4903      	ldr	r1, [pc, #12]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	080077ac 	.word	0x080077ac

08003ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cec:	f7ff ffde 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	0adb      	lsrs	r3, r3, #11
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	4903      	ldr	r1, [pc, #12]	; (8003d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cfe:	5ccb      	ldrb	r3, [r1, r3]
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	080077ac 	.word	0x080077ac

08003d10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d18:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <RCC_Delay+0x34>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <RCC_Delay+0x38>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	0a5b      	lsrs	r3, r3, #9
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	fb02 f303 	mul.w	r3, r2, r3
 8003d2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d2c:	bf00      	nop
  }
  while (Delay --);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	60fa      	str	r2, [r7, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f9      	bne.n	8003d2c <RCC_Delay+0x1c>
}
 8003d38:	bf00      	nop
 8003d3a:	bf00      	nop
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr
 8003d44:	200000a0 	.word	0x200000a0
 8003d48:	10624dd3 	.word	0x10624dd3

08003d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e041      	b.n	8003de2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fe fa5a 	bl	800222c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3304      	adds	r3, #4
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	f000 fd3c 	bl	8004808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d001      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e03f      	b.n	8003e84 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1b      	ldr	r2, [pc, #108]	; (8003e90 <HAL_TIM_Base_Start_IT+0xa4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d013      	beq.n	8003e4e <HAL_TIM_Base_Start_IT+0x62>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2e:	d00e      	beq.n	8003e4e <HAL_TIM_Base_Start_IT+0x62>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <HAL_TIM_Base_Start_IT+0xa8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d009      	beq.n	8003e4e <HAL_TIM_Base_Start_IT+0x62>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <HAL_TIM_Base_Start_IT+0xac>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d004      	beq.n	8003e4e <HAL_TIM_Base_Start_IT+0x62>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a14      	ldr	r2, [pc, #80]	; (8003e9c <HAL_TIM_Base_Start_IT+0xb0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d111      	bne.n	8003e72 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b06      	cmp	r3, #6
 8003e5e:	d010      	beq.n	8003e82 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e70:	e007      	b.n	8003e82 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0201 	orr.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40012c00 	.word	0x40012c00
 8003e94:	40000400 	.word	0x40000400
 8003e98:	40000800 	.word	0x40000800
 8003e9c:	40014000 	.word	0x40014000

08003ea0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e041      	b.n	8003f36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fe fa12 	bl	80022f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3304      	adds	r3, #4
 8003edc:	4619      	mov	r1, r3
 8003ede:	4610      	mov	r0, r2
 8003ee0:	f000 fc92 	bl	8004808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <HAL_TIM_PWM_Start+0x24>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	bf14      	ite	ne
 8003f5c:	2301      	movne	r3, #1
 8003f5e:	2300      	moveq	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	e022      	b.n	8003faa <HAL_TIM_PWM_Start+0x6a>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d109      	bne.n	8003f7e <HAL_TIM_PWM_Start+0x3e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	bf14      	ite	ne
 8003f76:	2301      	movne	r3, #1
 8003f78:	2300      	moveq	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	e015      	b.n	8003faa <HAL_TIM_PWM_Start+0x6a>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d109      	bne.n	8003f98 <HAL_TIM_PWM_Start+0x58>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	bf14      	ite	ne
 8003f90:	2301      	movne	r3, #1
 8003f92:	2300      	moveq	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	e008      	b.n	8003faa <HAL_TIM_PWM_Start+0x6a>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	bf14      	ite	ne
 8003fa4:	2301      	movne	r3, #1
 8003fa6:	2300      	moveq	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e077      	b.n	80040a2 <HAL_TIM_PWM_Start+0x162>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d104      	bne.n	8003fc2 <HAL_TIM_PWM_Start+0x82>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fc0:	e013      	b.n	8003fea <HAL_TIM_PWM_Start+0xaa>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d104      	bne.n	8003fd2 <HAL_TIM_PWM_Start+0x92>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd0:	e00b      	b.n	8003fea <HAL_TIM_PWM_Start+0xaa>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d104      	bne.n	8003fe2 <HAL_TIM_PWM_Start+0xa2>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe0:	e003      	b.n	8003fea <HAL_TIM_PWM_Start+0xaa>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	6839      	ldr	r1, [r7, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f001 f80d 	bl	8005012 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a2b      	ldr	r2, [pc, #172]	; (80040ac <HAL_TIM_PWM_Start+0x16c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00e      	beq.n	8004020 <HAL_TIM_PWM_Start+0xe0>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a2a      	ldr	r2, [pc, #168]	; (80040b0 <HAL_TIM_PWM_Start+0x170>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d009      	beq.n	8004020 <HAL_TIM_PWM_Start+0xe0>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a28      	ldr	r2, [pc, #160]	; (80040b4 <HAL_TIM_PWM_Start+0x174>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d004      	beq.n	8004020 <HAL_TIM_PWM_Start+0xe0>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a27      	ldr	r2, [pc, #156]	; (80040b8 <HAL_TIM_PWM_Start+0x178>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d101      	bne.n	8004024 <HAL_TIM_PWM_Start+0xe4>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <HAL_TIM_PWM_Start+0xe6>
 8004024:	2300      	movs	r3, #0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d007      	beq.n	800403a <HAL_TIM_PWM_Start+0xfa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004038:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1b      	ldr	r2, [pc, #108]	; (80040ac <HAL_TIM_PWM_Start+0x16c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d013      	beq.n	800406c <HAL_TIM_PWM_Start+0x12c>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404c:	d00e      	beq.n	800406c <HAL_TIM_PWM_Start+0x12c>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a1a      	ldr	r2, [pc, #104]	; (80040bc <HAL_TIM_PWM_Start+0x17c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d009      	beq.n	800406c <HAL_TIM_PWM_Start+0x12c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a18      	ldr	r2, [pc, #96]	; (80040c0 <HAL_TIM_PWM_Start+0x180>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d004      	beq.n	800406c <HAL_TIM_PWM_Start+0x12c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a12      	ldr	r2, [pc, #72]	; (80040b0 <HAL_TIM_PWM_Start+0x170>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d111      	bne.n	8004090 <HAL_TIM_PWM_Start+0x150>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b06      	cmp	r3, #6
 800407c:	d010      	beq.n	80040a0 <HAL_TIM_PWM_Start+0x160>
    {
      __HAL_TIM_ENABLE(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0201 	orr.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800408e:	e007      	b.n	80040a0 <HAL_TIM_PWM_Start+0x160>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0201 	orr.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40012c00 	.word	0x40012c00
 80040b0:	40014000 	.word	0x40014000
 80040b4:	40014400 	.word	0x40014400
 80040b8:	40014800 	.word	0x40014800
 80040bc:	40000400 	.word	0x40000400
 80040c0:	40000800 	.word	0x40000800

080040c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e041      	b.n	800415a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fe f944 	bl	8002378 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3304      	adds	r3, #4
 8004100:	4619      	mov	r1, r3
 8004102:	4610      	mov	r0, r2
 8004104:	f000 fb80 	bl	8004808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b02      	cmp	r3, #2
 8004176:	d122      	bne.n	80041be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b02      	cmp	r3, #2
 8004184:	d11b      	bne.n	80041be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f06f 0202 	mvn.w	r2, #2
 800418e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fb13 	bl	80047d0 <HAL_TIM_IC_CaptureCallback>
 80041aa:	e005      	b.n	80041b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fb06 	bl	80047be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fb15 	bl	80047e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d122      	bne.n	8004212 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d11b      	bne.n	8004212 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f06f 0204 	mvn.w	r2, #4
 80041e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fae9 	bl	80047d0 <HAL_TIM_IC_CaptureCallback>
 80041fe:	e005      	b.n	800420c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fadc 	bl	80047be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 faeb 	bl	80047e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b08      	cmp	r3, #8
 800421e:	d122      	bne.n	8004266 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b08      	cmp	r3, #8
 800422c:	d11b      	bne.n	8004266 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f06f 0208 	mvn.w	r2, #8
 8004236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2204      	movs	r2, #4
 800423c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fabf 	bl	80047d0 <HAL_TIM_IC_CaptureCallback>
 8004252:	e005      	b.n	8004260 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fab2 	bl	80047be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fac1 	bl	80047e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b10      	cmp	r3, #16
 8004272:	d122      	bne.n	80042ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b10      	cmp	r3, #16
 8004280:	d11b      	bne.n	80042ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f06f 0210 	mvn.w	r2, #16
 800428a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2208      	movs	r2, #8
 8004290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fa95 	bl	80047d0 <HAL_TIM_IC_CaptureCallback>
 80042a6:	e005      	b.n	80042b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fa88 	bl	80047be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fa97 	bl	80047e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d10e      	bne.n	80042e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d107      	bne.n	80042e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f06f 0201 	mvn.w	r2, #1
 80042de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7fc fe31 	bl	8000f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f0:	2b80      	cmp	r3, #128	; 0x80
 80042f2:	d10e      	bne.n	8004312 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fe:	2b80      	cmp	r3, #128	; 0x80
 8004300:	d107      	bne.n	8004312 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800430a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 ff65 	bl	80051dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	d10e      	bne.n	800433e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432a:	2b40      	cmp	r3, #64	; 0x40
 800432c:	d107      	bne.n	800433e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fa5b 	bl	80047f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b20      	cmp	r3, #32
 800434a:	d10e      	bne.n	800436a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b20      	cmp	r3, #32
 8004358:	d107      	bne.n	800436a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f06f 0220 	mvn.w	r2, #32
 8004362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 ff30 	bl	80051ca <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b086      	sub	sp, #24
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_TIM_IC_ConfigChannel+0x1e>
 800438c:	2302      	movs	r3, #2
 800438e:	e088      	b.n	80044a2 <HAL_TIM_IC_ConfigChannel+0x130>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d11b      	bne.n	80043d6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80043ae:	f000 fc87 	bl	8004cc0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 020c 	bic.w	r2, r2, #12
 80043c0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6999      	ldr	r1, [r3, #24]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	619a      	str	r2, [r3, #24]
 80043d4:	e060      	b.n	8004498 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d11c      	bne.n	8004416 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80043ec:	f000 fcf6 	bl	8004ddc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043fe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6999      	ldr	r1, [r3, #24]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	021a      	lsls	r2, r3, #8
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	619a      	str	r2, [r3, #24]
 8004414:	e040      	b.n	8004498 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b08      	cmp	r3, #8
 800441a:	d11b      	bne.n	8004454 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800442c:	f000 fd41 	bl	8004eb2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 020c 	bic.w	r2, r2, #12
 800443e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69d9      	ldr	r1, [r3, #28]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	61da      	str	r2, [r3, #28]
 8004452:	e021      	b.n	8004498 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b0c      	cmp	r3, #12
 8004458:	d11c      	bne.n	8004494 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800446a:	f000 fd5d 	bl	8004f28 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800447c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69d9      	ldr	r1, [r3, #28]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	021a      	lsls	r2, r3, #8
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	61da      	str	r2, [r3, #28]
 8004492:	e001      	b.n	8004498 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e0ae      	b.n	8004628 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b0c      	cmp	r3, #12
 80044d6:	f200 809f 	bhi.w	8004618 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044da:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	08004515 	.word	0x08004515
 80044e4:	08004619 	.word	0x08004619
 80044e8:	08004619 	.word	0x08004619
 80044ec:	08004619 	.word	0x08004619
 80044f0:	08004555 	.word	0x08004555
 80044f4:	08004619 	.word	0x08004619
 80044f8:	08004619 	.word	0x08004619
 80044fc:	08004619 	.word	0x08004619
 8004500:	08004597 	.word	0x08004597
 8004504:	08004619 	.word	0x08004619
 8004508:	08004619 	.word	0x08004619
 800450c:	08004619 	.word	0x08004619
 8004510:	080045d7 	.word	0x080045d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	4618      	mov	r0, r3
 800451c:	f000 f9f4 	bl	8004908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0208 	orr.w	r2, r2, #8
 800452e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0204 	bic.w	r2, r2, #4
 800453e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6999      	ldr	r1, [r3, #24]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	619a      	str	r2, [r3, #24]
      break;
 8004552:	e064      	b.n	800461e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68b9      	ldr	r1, [r7, #8]
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fa58 	bl	8004a10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800456e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699a      	ldr	r2, [r3, #24]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6999      	ldr	r1, [r3, #24]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	021a      	lsls	r2, r3, #8
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	619a      	str	r2, [r3, #24]
      break;
 8004594:	e043      	b.n	800461e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fab3 	bl	8004b08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0208 	orr.w	r2, r2, #8
 80045b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0204 	bic.w	r2, r2, #4
 80045c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69d9      	ldr	r1, [r3, #28]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	61da      	str	r2, [r3, #28]
      break;
 80045d4:	e023      	b.n	800461e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fb0f 	bl	8004c00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69da      	ldr	r2, [r3, #28]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69d9      	ldr	r1, [r3, #28]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	021a      	lsls	r2, r3, #8
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	61da      	str	r2, [r3, #28]
      break;
 8004616:	e002      	b.n	800461e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	75fb      	strb	r3, [r7, #23]
      break;
 800461c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004626:	7dfb      	ldrb	r3, [r7, #23]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_TIM_ConfigClockSource+0x1c>
 8004648:	2302      	movs	r3, #2
 800464a:	e0b4      	b.n	80047b6 <HAL_TIM_ConfigClockSource+0x186>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800466a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004684:	d03e      	beq.n	8004704 <HAL_TIM_ConfigClockSource+0xd4>
 8004686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468a:	f200 8087 	bhi.w	800479c <HAL_TIM_ConfigClockSource+0x16c>
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004692:	f000 8086 	beq.w	80047a2 <HAL_TIM_ConfigClockSource+0x172>
 8004696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469a:	d87f      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 800469c:	2b70      	cmp	r3, #112	; 0x70
 800469e:	d01a      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0xa6>
 80046a0:	2b70      	cmp	r3, #112	; 0x70
 80046a2:	d87b      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046a4:	2b60      	cmp	r3, #96	; 0x60
 80046a6:	d050      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x11a>
 80046a8:	2b60      	cmp	r3, #96	; 0x60
 80046aa:	d877      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046ac:	2b50      	cmp	r3, #80	; 0x50
 80046ae:	d03c      	beq.n	800472a <HAL_TIM_ConfigClockSource+0xfa>
 80046b0:	2b50      	cmp	r3, #80	; 0x50
 80046b2:	d873      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046b4:	2b40      	cmp	r3, #64	; 0x40
 80046b6:	d058      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x13a>
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	d86f      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046bc:	2b30      	cmp	r3, #48	; 0x30
 80046be:	d064      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x15a>
 80046c0:	2b30      	cmp	r3, #48	; 0x30
 80046c2:	d86b      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d060      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x15a>
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d867      	bhi.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d05c      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x15a>
 80046d0:	2b10      	cmp	r3, #16
 80046d2:	d05a      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x15a>
 80046d4:	e062      	b.n	800479c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046e6:	f000 fc75 	bl	8004fd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	609a      	str	r2, [r3, #8]
      break;
 8004702:	e04f      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004714:	f000 fc5e 	bl	8004fd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004726:	609a      	str	r2, [r3, #8]
      break;
 8004728:	e03c      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004736:	461a      	mov	r2, r3
 8004738:	f000 fb22 	bl	8004d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2150      	movs	r1, #80	; 0x50
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fc2c 	bl	8004fa0 <TIM_ITRx_SetConfig>
      break;
 8004748:	e02c      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004756:	461a      	mov	r2, r3
 8004758:	f000 fb7c 	bl	8004e54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2160      	movs	r1, #96	; 0x60
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fc1c 	bl	8004fa0 <TIM_ITRx_SetConfig>
      break;
 8004768:	e01c      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004776:	461a      	mov	r2, r3
 8004778:	f000 fb02 	bl	8004d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2140      	movs	r1, #64	; 0x40
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fc0c 	bl	8004fa0 <TIM_ITRx_SetConfig>
      break;
 8004788:	e00c      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4619      	mov	r1, r3
 8004794:	4610      	mov	r0, r2
 8004796:	f000 fc03 	bl	8004fa0 <TIM_ITRx_SetConfig>
      break;
 800479a:	e003      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
      break;
 80047a0:	e000      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr

080047d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr
	...

08004808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a35      	ldr	r2, [pc, #212]	; (80048f0 <TIM_Base_SetConfig+0xe8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00b      	beq.n	8004838 <TIM_Base_SetConfig+0x30>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004826:	d007      	beq.n	8004838 <TIM_Base_SetConfig+0x30>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a32      	ldr	r2, [pc, #200]	; (80048f4 <TIM_Base_SetConfig+0xec>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_Base_SetConfig+0x30>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a31      	ldr	r2, [pc, #196]	; (80048f8 <TIM_Base_SetConfig+0xf0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d108      	bne.n	800484a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a28      	ldr	r2, [pc, #160]	; (80048f0 <TIM_Base_SetConfig+0xe8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d017      	beq.n	8004882 <TIM_Base_SetConfig+0x7a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004858:	d013      	beq.n	8004882 <TIM_Base_SetConfig+0x7a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a25      	ldr	r2, [pc, #148]	; (80048f4 <TIM_Base_SetConfig+0xec>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00f      	beq.n	8004882 <TIM_Base_SetConfig+0x7a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a24      	ldr	r2, [pc, #144]	; (80048f8 <TIM_Base_SetConfig+0xf0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00b      	beq.n	8004882 <TIM_Base_SetConfig+0x7a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a23      	ldr	r2, [pc, #140]	; (80048fc <TIM_Base_SetConfig+0xf4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d007      	beq.n	8004882 <TIM_Base_SetConfig+0x7a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a22      	ldr	r2, [pc, #136]	; (8004900 <TIM_Base_SetConfig+0xf8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d003      	beq.n	8004882 <TIM_Base_SetConfig+0x7a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a21      	ldr	r2, [pc, #132]	; (8004904 <TIM_Base_SetConfig+0xfc>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d108      	bne.n	8004894 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a0d      	ldr	r2, [pc, #52]	; (80048f0 <TIM_Base_SetConfig+0xe8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00b      	beq.n	80048d8 <TIM_Base_SetConfig+0xd0>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a0e      	ldr	r2, [pc, #56]	; (80048fc <TIM_Base_SetConfig+0xf4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d007      	beq.n	80048d8 <TIM_Base_SetConfig+0xd0>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a0d      	ldr	r2, [pc, #52]	; (8004900 <TIM_Base_SetConfig+0xf8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d003      	beq.n	80048d8 <TIM_Base_SetConfig+0xd0>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a0c      	ldr	r2, [pc, #48]	; (8004904 <TIM_Base_SetConfig+0xfc>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d103      	bne.n	80048e0 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	615a      	str	r2, [r3, #20]
}
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr
 80048f0:	40012c00 	.word	0x40012c00
 80048f4:	40000400 	.word	0x40000400
 80048f8:	40000800 	.word	0x40000800
 80048fc:	40014000 	.word	0x40014000
 8004900:	40014400 	.word	0x40014400
 8004904:	40014800 	.word	0x40014800

08004908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	f023 0201 	bic.w	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0303 	bic.w	r3, r3, #3
 800493e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f023 0302 	bic.w	r3, r3, #2
 8004950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a28      	ldr	r2, [pc, #160]	; (8004a00 <TIM_OC1_SetConfig+0xf8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00b      	beq.n	800497c <TIM_OC1_SetConfig+0x74>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a27      	ldr	r2, [pc, #156]	; (8004a04 <TIM_OC1_SetConfig+0xfc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d007      	beq.n	800497c <TIM_OC1_SetConfig+0x74>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a26      	ldr	r2, [pc, #152]	; (8004a08 <TIM_OC1_SetConfig+0x100>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_OC1_SetConfig+0x74>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a25      	ldr	r2, [pc, #148]	; (8004a0c <TIM_OC1_SetConfig+0x104>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d10c      	bne.n	8004996 <TIM_OC1_SetConfig+0x8e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f023 0308 	bic.w	r3, r3, #8
 8004982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f023 0304 	bic.w	r3, r3, #4
 8004994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a19      	ldr	r2, [pc, #100]	; (8004a00 <TIM_OC1_SetConfig+0xf8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00b      	beq.n	80049b6 <TIM_OC1_SetConfig+0xae>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a18      	ldr	r2, [pc, #96]	; (8004a04 <TIM_OC1_SetConfig+0xfc>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d007      	beq.n	80049b6 <TIM_OC1_SetConfig+0xae>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a17      	ldr	r2, [pc, #92]	; (8004a08 <TIM_OC1_SetConfig+0x100>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d003      	beq.n	80049b6 <TIM_OC1_SetConfig+0xae>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a16      	ldr	r2, [pc, #88]	; (8004a0c <TIM_OC1_SetConfig+0x104>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d111      	bne.n	80049da <TIM_OC1_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	621a      	str	r2, [r3, #32]
}
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40012c00 	.word	0x40012c00
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40014400 	.word	0x40014400
 8004a0c:	40014800 	.word	0x40014800

08004a10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	f023 0210 	bic.w	r2, r3, #16
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f023 0320 	bic.w	r3, r3, #32
 8004a5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a23      	ldr	r2, [pc, #140]	; (8004af8 <TIM_OC2_SetConfig+0xe8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d10d      	bne.n	8004a8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a1a      	ldr	r2, [pc, #104]	; (8004af8 <TIM_OC2_SetConfig+0xe8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d00b      	beq.n	8004aac <TIM_OC2_SetConfig+0x9c>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a19      	ldr	r2, [pc, #100]	; (8004afc <TIM_OC2_SetConfig+0xec>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d007      	beq.n	8004aac <TIM_OC2_SetConfig+0x9c>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <TIM_OC2_SetConfig+0xf0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d003      	beq.n	8004aac <TIM_OC2_SetConfig+0x9c>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a17      	ldr	r2, [pc, #92]	; (8004b04 <TIM_OC2_SetConfig+0xf4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d113      	bne.n	8004ad4 <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	621a      	str	r2, [r3, #32]
}
 8004aee:	bf00      	nop
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40014000 	.word	0x40014000
 8004b00:	40014400 	.word	0x40014400
 8004b04:	40014800 	.word	0x40014800

08004b08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0303 	bic.w	r3, r3, #3
 8004b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a23      	ldr	r2, [pc, #140]	; (8004bf0 <TIM_OC3_SetConfig+0xe8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d10d      	bne.n	8004b82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	021b      	lsls	r3, r3, #8
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a1a      	ldr	r2, [pc, #104]	; (8004bf0 <TIM_OC3_SetConfig+0xe8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00b      	beq.n	8004ba2 <TIM_OC3_SetConfig+0x9a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a19      	ldr	r2, [pc, #100]	; (8004bf4 <TIM_OC3_SetConfig+0xec>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d007      	beq.n	8004ba2 <TIM_OC3_SetConfig+0x9a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a18      	ldr	r2, [pc, #96]	; (8004bf8 <TIM_OC3_SetConfig+0xf0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d003      	beq.n	8004ba2 <TIM_OC3_SetConfig+0x9a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <TIM_OC3_SetConfig+0xf4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d113      	bne.n	8004bca <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	621a      	str	r2, [r3, #32]
}
 8004be4:	bf00      	nop
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40014000 	.word	0x40014000
 8004bf8:	40014400 	.word	0x40014400
 8004bfc:	40014800 	.word	0x40014800

08004c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	031b      	lsls	r3, r3, #12
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a15      	ldr	r2, [pc, #84]	; (8004cb0 <TIM_OC4_SetConfig+0xb0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d00b      	beq.n	8004c78 <TIM_OC4_SetConfig+0x78>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a14      	ldr	r2, [pc, #80]	; (8004cb4 <TIM_OC4_SetConfig+0xb4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d007      	beq.n	8004c78 <TIM_OC4_SetConfig+0x78>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a13      	ldr	r2, [pc, #76]	; (8004cb8 <TIM_OC4_SetConfig+0xb8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d003      	beq.n	8004c78 <TIM_OC4_SetConfig+0x78>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a12      	ldr	r2, [pc, #72]	; (8004cbc <TIM_OC4_SetConfig+0xbc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d109      	bne.n	8004c8c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	019b      	lsls	r3, r3, #6
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	621a      	str	r2, [r3, #32]
}
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr
 8004cb0:	40012c00 	.word	0x40012c00
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	40014400 	.word	0x40014400
 8004cbc:	40014800 	.word	0x40014800

08004cc0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	f023 0201 	bic.w	r2, r3, #1
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4a21      	ldr	r2, [pc, #132]	; (8004d70 <TIM_TI1_SetConfig+0xb0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00f      	beq.n	8004d0e <TIM_TI1_SetConfig+0x4e>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf4:	d00b      	beq.n	8004d0e <TIM_TI1_SetConfig+0x4e>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4a1e      	ldr	r2, [pc, #120]	; (8004d74 <TIM_TI1_SetConfig+0xb4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d007      	beq.n	8004d0e <TIM_TI1_SetConfig+0x4e>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4a1d      	ldr	r2, [pc, #116]	; (8004d78 <TIM_TI1_SetConfig+0xb8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d003      	beq.n	8004d0e <TIM_TI1_SetConfig+0x4e>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <TIM_TI1_SetConfig+0xbc>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d101      	bne.n	8004d12 <TIM_TI1_SetConfig+0x52>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <TIM_TI1_SetConfig+0x54>
 8004d12:	2300      	movs	r3, #0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f023 0303 	bic.w	r3, r3, #3
 8004d1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e003      	b.n	8004d32 <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f023 030a 	bic.w	r3, r3, #10
 8004d4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f003 030a 	and.w	r3, r3, #10
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	621a      	str	r2, [r3, #32]
}
 8004d66:	bf00      	nop
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr
 8004d70:	40012c00 	.word	0x40012c00
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800
 8004d7c:	40014000 	.word	0x40014000

08004d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	f023 0201 	bic.w	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f023 030a 	bic.w	r3, r3, #10
 8004dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr

08004ddc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f023 0210 	bic.w	r2, r3, #16
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	031b      	lsls	r3, r3, #12
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e2e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	621a      	str	r2, [r3, #32]
}
 8004e4a:	bf00      	nop
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc80      	pop	{r7}
 8004e52:	4770      	bx	lr

08004e54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f023 0210 	bic.w	r2, r3, #16
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	031b      	lsls	r3, r3, #12
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	621a      	str	r2, [r3, #32]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bc80      	pop	{r7}
 8004eb0:	4770      	bx	lr

08004eb2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b087      	sub	sp, #28
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	607a      	str	r2, [r7, #4]
 8004ebe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f023 0303 	bic.w	r3, r3, #3
 8004ede:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f02:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	621a      	str	r2, [r3, #32]
}
 8004f1e:	bf00      	nop
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr

08004f28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	021b      	lsls	r3, r3, #8
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f66:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	031b      	lsls	r3, r3, #12
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f7a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	031b      	lsls	r3, r3, #12
 8004f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	621a      	str	r2, [r3, #32]
}
 8004f96:	bf00      	nop
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr

08004fa0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f043 0307 	orr.w	r3, r3, #7
 8004fc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	609a      	str	r2, [r3, #8]
}
 8004fca:	bf00      	nop
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr

08004fd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	021a      	lsls	r2, r3, #8
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	609a      	str	r2, [r3, #8]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr

08005012 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005012:	b480      	push	{r7}
 8005014:	b087      	sub	sp, #28
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f003 031f 	and.w	r3, r3, #31
 8005024:	2201      	movs	r2, #1
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1a      	ldr	r2, [r3, #32]
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	43db      	mvns	r3, r3
 8005034:	401a      	ands	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a1a      	ldr	r2, [r3, #32]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f003 031f 	and.w	r3, r3, #31
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	fa01 f303 	lsl.w	r3, r1, r3
 800504a:	431a      	orrs	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	621a      	str	r2, [r3, #32]
}
 8005050:	bf00      	nop
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr
	...

0800505c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005070:	2302      	movs	r3, #2
 8005072:	e04b      	b.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a19      	ldr	r2, [pc, #100]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c0:	d00e      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a15      	ldr	r2, [pc, #84]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d009      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a13      	ldr	r2, [pc, #76]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a12      	ldr	r2, [pc, #72]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d10c      	bne.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40012c00 	.word	0x40012c00
 800511c:	40000400 	.word	0x40000400
 8005120:	40000800 	.word	0x40000800
 8005124:	40014000 	.word	0x40014000

08005128 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005140:	2302      	movs	r3, #2
 8005142:	e03d      	b.n	80051c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr

080051ca <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr

080051dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr

080051ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e042      	b.n	8005286 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d106      	bne.n	800521a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7fd fa17 	bl	8002648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2224      	movs	r2, #36	; 0x24
 800521e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005230:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f001 f85e 	bl	80062f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005246:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005256:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005266:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b08a      	sub	sp, #40	; 0x28
 8005292:	af02      	add	r7, sp, #8
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	4613      	mov	r3, r2
 800529c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	d16d      	bne.n	800538a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <HAL_UART_Transmit+0x2c>
 80052b4:	88fb      	ldrh	r3, [r7, #6]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e066      	b.n	800538c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2221      	movs	r2, #33	; 0x21
 80052c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052cc:	f7fd fbce 	bl	8002a6c <HAL_GetTick>
 80052d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	88fa      	ldrh	r2, [r7, #6]
 80052d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	88fa      	ldrh	r2, [r7, #6]
 80052dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e6:	d108      	bne.n	80052fa <HAL_UART_Transmit+0x6c>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d104      	bne.n	80052fa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	e003      	b.n	8005302 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052fe:	2300      	movs	r3, #0
 8005300:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005302:	e02a      	b.n	800535a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2200      	movs	r2, #0
 800530c:	2180      	movs	r1, #128	; 0x80
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 fd26 	bl	8005d60 <UART_WaitOnFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e036      	b.n	800538c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10b      	bne.n	800533c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005332:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	3302      	adds	r3, #2
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	e007      	b.n	800534c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	781a      	ldrb	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	3301      	adds	r3, #1
 800534a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005350:	b29b      	uxth	r3, r3
 8005352:	3b01      	subs	r3, #1
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1cf      	bne.n	8005304 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2200      	movs	r2, #0
 800536c:	2140      	movs	r1, #64	; 0x40
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 fcf6 	bl	8005d60 <UART_WaitOnFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e006      	b.n	800538c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	e000      	b.n	800538c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800538a:	2302      	movs	r3, #2
  }
}
 800538c:	4618      	mov	r0, r3
 800538e:	3720      	adds	r7, #32
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08c      	sub	sp, #48	; 0x30
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	4613      	mov	r3, r2
 80053a0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d156      	bne.n	800545c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <HAL_UART_Transmit_DMA+0x26>
 80053b4:	88fb      	ldrh	r3, [r7, #6]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e04f      	b.n	800545e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	88fa      	ldrh	r2, [r7, #6]
 80053c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	88fa      	ldrh	r2, [r7, #6]
 80053ce:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2221      	movs	r2, #33	; 0x21
 80053da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	4a21      	ldr	r2, [pc, #132]	; (8005468 <HAL_UART_Transmit_DMA+0xd4>)
 80053e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	4a20      	ldr	r2, [pc, #128]	; (800546c <HAL_UART_Transmit_DMA+0xd8>)
 80053ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	4a1f      	ldr	r2, [pc, #124]	; (8005470 <HAL_UART_Transmit_DMA+0xdc>)
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	2200      	movs	r2, #0
 80053fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80053fe:	f107 0308 	add.w	r3, r7, #8
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540a:	6819      	ldr	r1, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3304      	adds	r3, #4
 8005412:	461a      	mov	r2, r3
 8005414:	88fb      	ldrh	r3, [r7, #6]
 8005416:	f7fd fcbf 	bl	8002d98 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005422:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3314      	adds	r3, #20
 800542a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	e853 3f00 	ldrex	r3, [r3]
 8005432:	617b      	str	r3, [r7, #20]
   return(result);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543a:	62bb      	str	r3, [r7, #40]	; 0x28
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3314      	adds	r3, #20
 8005442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005444:	627a      	str	r2, [r7, #36]	; 0x24
 8005446:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	6a39      	ldr	r1, [r7, #32]
 800544a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	61fb      	str	r3, [r7, #28]
   return(result);
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e5      	bne.n	8005424 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	e000      	b.n	800545e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800545c:	2302      	movs	r3, #2
  }
}
 800545e:	4618      	mov	r0, r3
 8005460:	3730      	adds	r7, #48	; 0x30
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	08005aaf 	.word	0x08005aaf
 800546c:	08005b49 	.word	0x08005b49
 8005470:	08005ccd 	.word	0x08005ccd

08005474 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08c      	sub	sp, #48	; 0x30
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	4613      	mov	r3, r2
 8005480:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b20      	cmp	r3, #32
 800548c:	d14a      	bne.n	8005524 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e043      	b.n	8005526 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2201      	movs	r2, #1
 80054a2:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80054aa:	88fb      	ldrh	r3, [r7, #6]
 80054ac:	461a      	mov	r2, r3
 80054ae:	68b9      	ldr	r1, [r7, #8]
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 fcc3 	bl	8005e3c <UART_Start_Receive_DMA>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80054bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d12c      	bne.n	800551e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d125      	bne.n	8005518 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054cc:	2300      	movs	r3, #0
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	613b      	str	r3, [r7, #16]
 80054e0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	330c      	adds	r3, #12
 80054e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	617b      	str	r3, [r7, #20]
   return(result);
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f043 0310 	orr.w	r3, r3, #16
 80054f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	330c      	adds	r3, #12
 8005500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005502:	627a      	str	r2, [r7, #36]	; 0x24
 8005504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	6a39      	ldr	r1, [r7, #32]
 8005508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550a:	e841 2300 	strex	r3, r2, [r1]
 800550e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e5      	bne.n	80054e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005516:	e002      	b.n	800551e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800551e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005522:	e000      	b.n	8005526 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3730      	adds	r7, #48	; 0x30
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b0ba      	sub	sp, #232	; 0xe8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005556:	2300      	movs	r3, #0
 8005558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800555c:	2300      	movs	r3, #0
 800555e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800556e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10f      	bne.n	8005596 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <HAL_UART_IRQHandler+0x66>
 8005582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fdf2 	bl	8006178 <UART_Receive_IT>
      return;
 8005594:	e25b      	b.n	8005a4e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005596:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 80de 	beq.w	800575c <HAL_UART_IRQHandler+0x22c>
 80055a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 80d1 	beq.w	800575c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <HAL_UART_IRQHandler+0xae>
 80055c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d6:	f043 0201 	orr.w	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <HAL_UART_IRQHandler+0xd2>
 80055ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fa:	f043 0202 	orr.w	r2, r3, #2
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <HAL_UART_IRQHandler+0xf6>
 800560e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561e:	f043 0204 	orr.w	r2, r3, #4
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d011      	beq.n	8005656 <HAL_UART_IRQHandler+0x126>
 8005632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d105      	bne.n	800564a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800563e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d005      	beq.n	8005656 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564e:	f043 0208 	orr.w	r2, r3, #8
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 81f2 	beq.w	8005a44 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d008      	beq.n	800567e <HAL_UART_IRQHandler+0x14e>
 800566c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fd7d 	bl	8006178 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	bf14      	ite	ne
 800568c:	2301      	movne	r3, #1
 800568e:	2300      	moveq	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d103      	bne.n	80056aa <HAL_UART_IRQHandler+0x17a>
 80056a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d04f      	beq.n	800574a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fc87 	bl	8005fbe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d041      	beq.n	8005742 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3314      	adds	r3, #20
 80056c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056cc:	e853 3f00 	ldrex	r3, [r3]
 80056d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3314      	adds	r3, #20
 80056e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1d9      	bne.n	80056be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d013      	beq.n	800573a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005716:	4a7e      	ldr	r2, [pc, #504]	; (8005910 <HAL_UART_IRQHandler+0x3e0>)
 8005718:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571e:	4618      	mov	r0, r3
 8005720:	f7fd fbd6 	bl	8002ed0 <HAL_DMA_Abort_IT>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d016      	beq.n	8005758 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005734:	4610      	mov	r0, r2
 8005736:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005738:	e00e      	b.n	8005758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f9ae 	bl	8005a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	e00a      	b.n	8005758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f9aa 	bl	8005a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005748:	e006      	b.n	8005758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f9a6 	bl	8005a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005756:	e175      	b.n	8005a44 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005758:	bf00      	nop
    return;
 800575a:	e173      	b.n	8005a44 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	2b01      	cmp	r3, #1
 8005762:	f040 814f 	bne.w	8005a04 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800576a:	f003 0310 	and.w	r3, r3, #16
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 8148 	beq.w	8005a04 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 8141 	beq.w	8005a04 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005782:	2300      	movs	r3, #0
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 80b6 	beq.w	8005914 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 8145 	beq.w	8005a48 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057c6:	429a      	cmp	r2, r3
 80057c8:	f080 813e 	bcs.w	8005a48 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	2b20      	cmp	r3, #32
 80057dc:	f000 8088 	beq.w	80058f0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	330c      	adds	r3, #12
 80057e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	330c      	adds	r3, #12
 8005808:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800580c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005810:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005814:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005818:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800581c:	e841 2300 	strex	r3, r2, [r1]
 8005820:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005824:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1d9      	bne.n	80057e0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3314      	adds	r3, #20
 8005832:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005836:	e853 3f00 	ldrex	r3, [r3]
 800583a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800583c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800583e:	f023 0301 	bic.w	r3, r3, #1
 8005842:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3314      	adds	r3, #20
 800584c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005850:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005854:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005858:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e1      	bne.n	800582c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3314      	adds	r3, #20
 800586e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005872:	e853 3f00 	ldrex	r3, [r3]
 8005876:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800587a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800587e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3314      	adds	r3, #20
 8005888:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800588c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800588e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005892:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800589a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e3      	bne.n	8005868 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	330c      	adds	r3, #12
 80058b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b8:	e853 3f00 	ldrex	r3, [r3]
 80058bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c0:	f023 0310 	bic.w	r3, r3, #16
 80058c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	330c      	adds	r3, #12
 80058ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80058d4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e3      	bne.n	80058ae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fd fab4 	bl	8002e58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058fe:	b29b      	uxth	r3, r3
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	b29b      	uxth	r3, r3
 8005904:	4619      	mov	r1, r3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fb faa8 	bl	8000e5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800590c:	e09c      	b.n	8005a48 <HAL_UART_IRQHandler+0x518>
 800590e:	bf00      	nop
 8005910:	08006083 	.word	0x08006083
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800591c:	b29b      	uxth	r3, r3
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 808e 	beq.w	8005a4c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005930:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8089 	beq.w	8005a4c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	330c      	adds	r3, #12
 8005940:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800594a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	330c      	adds	r3, #12
 800595a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800595e:	647a      	str	r2, [r7, #68]	; 0x44
 8005960:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005964:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800596c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e3      	bne.n	800593a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3314      	adds	r3, #20
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	e853 3f00 	ldrex	r3, [r3]
 8005980:	623b      	str	r3, [r7, #32]
   return(result);
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	f023 0301 	bic.w	r3, r3, #1
 8005988:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3314      	adds	r3, #20
 8005992:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005996:	633a      	str	r2, [r7, #48]	; 0x30
 8005998:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800599c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800599e:	e841 2300 	strex	r3, r2, [r1]
 80059a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1e3      	bne.n	8005972 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	330c      	adds	r3, #12
 80059be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	e853 3f00 	ldrex	r3, [r3]
 80059c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0310 	bic.w	r3, r3, #16
 80059ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	330c      	adds	r3, #12
 80059d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059dc:	61fa      	str	r2, [r7, #28]
 80059de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	69b9      	ldr	r1, [r7, #24]
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	617b      	str	r3, [r7, #20]
   return(result);
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e3      	bne.n	80059b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059fa:	4619      	mov	r1, r3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7fb fa2d 	bl	8000e5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a02:	e023      	b.n	8005a4c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d009      	beq.n	8005a24 <HAL_UART_IRQHandler+0x4f4>
 8005a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fb44 	bl	80060aa <UART_Transmit_IT>
    return;
 8005a22:	e014      	b.n	8005a4e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00e      	beq.n	8005a4e <HAL_UART_IRQHandler+0x51e>
 8005a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d008      	beq.n	8005a4e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fb83 	bl	8006148 <UART_EndTransmit_IT>
    return;
 8005a42:	e004      	b.n	8005a4e <HAL_UART_IRQHandler+0x51e>
    return;
 8005a44:	bf00      	nop
 8005a46:	e002      	b.n	8005a4e <HAL_UART_IRQHandler+0x51e>
      return;
 8005a48:	bf00      	nop
 8005a4a:	e000      	b.n	8005a4e <HAL_UART_IRQHandler+0x51e>
      return;
 8005a4c:	bf00      	nop
  }
}
 8005a4e:	37e8      	adds	r7, #232	; 0xe8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bc80      	pop	{r7}
 8005a64:	4770      	bx	lr

08005a66 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr

08005a78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bc80      	pop	{r7}
 8005a88:	4770      	bx	lr

08005a8a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005a92:	bf00      	nop
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr

08005a9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bc80      	pop	{r7}
 8005aac:	4770      	bx	lr

08005aae <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b090      	sub	sp, #64	; 0x40
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0320 	and.w	r3, r3, #32
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d137      	bne.n	8005b3a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005acc:	2200      	movs	r2, #0
 8005ace:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3314      	adds	r3, #20
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	e853 3f00 	ldrex	r3, [r3]
 8005ade:	623b      	str	r3, [r7, #32]
   return(result);
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3314      	adds	r3, #20
 8005aee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005af0:	633a      	str	r2, [r7, #48]	; 0x30
 8005af2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e5      	bne.n	8005ad0 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	330c      	adds	r3, #12
 8005b22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b24:	61fa      	str	r2, [r7, #28]
 8005b26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	69b9      	ldr	r1, [r7, #24]
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	617b      	str	r3, [r7, #20]
   return(result);
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e5      	bne.n	8005b04 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b38:	e002      	b.n	8005b40 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005b3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005b3c:	f7ff ff8a 	bl	8005a54 <HAL_UART_TxCpltCallback>
}
 8005b40:	bf00      	nop
 8005b42:	3740      	adds	r7, #64	; 0x40
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7ff ff85 	bl	8005a66 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b5c:	bf00      	nop
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b09c      	sub	sp, #112	; 0x70
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d172      	bne.n	8005c66 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b82:	2200      	movs	r2, #0
 8005b84:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	330c      	adds	r3, #12
 8005b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ba6:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ba8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e5      	bne.n	8005b86 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3314      	adds	r3, #20
 8005bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bcc:	f023 0301 	bic.w	r3, r3, #1
 8005bd0:	667b      	str	r3, [r7, #100]	; 0x64
 8005bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3314      	adds	r3, #20
 8005bd8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005bda:	647a      	str	r2, [r7, #68]	; 0x44
 8005bdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005be0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e5      	bne.n	8005bba <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3314      	adds	r3, #20
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	623b      	str	r3, [r7, #32]
   return(result);
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c04:	663b      	str	r3, [r7, #96]	; 0x60
 8005c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3314      	adds	r3, #20
 8005c0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c0e:	633a      	str	r2, [r7, #48]	; 0x30
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e5      	bne.n	8005bee <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d119      	bne.n	8005c66 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	330c      	adds	r3, #12
 8005c38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f023 0310 	bic.w	r3, r3, #16
 8005c48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	330c      	adds	r3, #12
 8005c50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c52:	61fa      	str	r2, [r7, #28]
 8005c54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	69b9      	ldr	r1, [r7, #24]
 8005c58:	69fa      	ldr	r2, [r7, #28]
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e5      	bne.n	8005c32 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c68:	2200      	movs	r2, #0
 8005c6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d106      	bne.n	8005c82 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c78:	4619      	mov	r1, r3
 8005c7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c7c:	f7fb f8ee 	bl	8000e5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c80:	e002      	b.n	8005c88 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005c82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c84:	f7ff fef8 	bl	8005a78 <HAL_UART_RxCpltCallback>
}
 8005c88:	bf00      	nop
 8005c8a:	3770      	adds	r7, #112	; 0x70
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d108      	bne.n	8005cbe <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cb0:	085b      	lsrs	r3, r3, #1
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f7fb f8d0 	bl	8000e5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cbc:	e002      	b.n	8005cc4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff fee3 	bl	8005a8a <HAL_UART_RxHalfCpltCallback>
}
 8005cc4:	bf00      	nop
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	bf14      	ite	ne
 8005cec:	2301      	movne	r3, #1
 8005cee:	2300      	moveq	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b21      	cmp	r3, #33	; 0x21
 8005cfe:	d108      	bne.n	8005d12 <UART_DMAError+0x46>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005d0c:	68b8      	ldr	r0, [r7, #8]
 8005d0e:	f000 f92f 	bl	8005f70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	bf14      	ite	ne
 8005d20:	2301      	movne	r3, #1
 8005d22:	2300      	moveq	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b22      	cmp	r3, #34	; 0x22
 8005d32:	d108      	bne.n	8005d46 <UART_DMAError+0x7a>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d005      	beq.n	8005d46 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005d40:	68b8      	ldr	r0, [r7, #8]
 8005d42:	f000 f93c 	bl	8005fbe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4a:	f043 0210 	orr.w	r2, r3, #16
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d52:	68b8      	ldr	r0, [r7, #8]
 8005d54:	f7ff fea2 	bl	8005a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d58:	bf00      	nop
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b090      	sub	sp, #64	; 0x40
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	603b      	str	r3, [r7, #0]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d70:	e050      	b.n	8005e14 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d78:	d04c      	beq.n	8005e14 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d80:	f7fc fe74 	bl	8002a6c <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d241      	bcs.n	8005e14 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	e853 3f00 	ldrex	r3, [r3]
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	330c      	adds	r3, #12
 8005dae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005db0:	637a      	str	r2, [r7, #52]	; 0x34
 8005db2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005db8:	e841 2300 	strex	r3, r2, [r1]
 8005dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e5      	bne.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3314      	adds	r3, #20
 8005dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	e853 3f00 	ldrex	r3, [r3]
 8005dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f023 0301 	bic.w	r3, r3, #1
 8005dda:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3314      	adds	r3, #20
 8005de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005de4:	623a      	str	r2, [r7, #32]
 8005de6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de8:	69f9      	ldr	r1, [r7, #28]
 8005dea:	6a3a      	ldr	r2, [r7, #32]
 8005dec:	e841 2300 	strex	r3, r2, [r1]
 8005df0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1e5      	bne.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e00f      	b.n	8005e34 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	bf0c      	ite	eq
 8005e24:	2301      	moveq	r3, #1
 8005e26:	2300      	movne	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	79fb      	ldrb	r3, [r7, #7]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d09f      	beq.n	8005d72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3740      	adds	r7, #64	; 0x40
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b098      	sub	sp, #96	; 0x60
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	4613      	mov	r3, r2
 8005e48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	88fa      	ldrh	r2, [r7, #6]
 8005e54:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2222      	movs	r2, #34	; 0x22
 8005e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e68:	4a3e      	ldr	r2, [pc, #248]	; (8005f64 <UART_Start_Receive_DMA+0x128>)
 8005e6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e70:	4a3d      	ldr	r2, [pc, #244]	; (8005f68 <UART_Start_Receive_DMA+0x12c>)
 8005e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e78:	4a3c      	ldr	r2, [pc, #240]	; (8005f6c <UART_Start_Receive_DMA+0x130>)
 8005e7a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e80:	2200      	movs	r2, #0
 8005e82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005e84:	f107 0308 	add.w	r3, r7, #8
 8005e88:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3304      	adds	r3, #4
 8005e94:	4619      	mov	r1, r3
 8005e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	88fb      	ldrh	r3, [r7, #6]
 8005e9c:	f7fc ff7c 	bl	8002d98 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	613b      	str	r3, [r7, #16]
 8005eb4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d019      	beq.n	8005ef2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	330c      	adds	r3, #12
 8005ec4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	330c      	adds	r3, #12
 8005edc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ede:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005ee0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005ee4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e5      	bne.n	8005ebe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3314      	adds	r3, #20
 8005ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	f043 0301 	orr.w	r3, r3, #1
 8005f08:	657b      	str	r3, [r7, #84]	; 0x54
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3314      	adds	r3, #20
 8005f10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f12:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f1a:	e841 2300 	strex	r3, r2, [r1]
 8005f1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1e5      	bne.n	8005ef2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3314      	adds	r3, #20
 8005f2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	617b      	str	r3, [r7, #20]
   return(result);
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f3c:	653b      	str	r3, [r7, #80]	; 0x50
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3314      	adds	r3, #20
 8005f44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f46:	627a      	str	r2, [r7, #36]	; 0x24
 8005f48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	6a39      	ldr	r1, [r7, #32]
 8005f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e5      	bne.n	8005f26 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3760      	adds	r7, #96	; 0x60
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	08005b65 	.word	0x08005b65
 8005f68:	08005c91 	.word	0x08005c91
 8005f6c:	08005ccd 	.word	0x08005ccd

08005f70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b089      	sub	sp, #36	; 0x24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	330c      	adds	r3, #12
 8005f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	e853 3f00 	ldrex	r3, [r3]
 8005f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f8e:	61fb      	str	r3, [r7, #28]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	330c      	adds	r3, #12
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	61ba      	str	r2, [r7, #24]
 8005f9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	6979      	ldr	r1, [r7, #20]
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	e841 2300 	strex	r3, r2, [r1]
 8005fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e5      	bne.n	8005f78 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005fb4:	bf00      	nop
 8005fb6:	3724      	adds	r7, #36	; 0x24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bc80      	pop	{r7}
 8005fbc:	4770      	bx	lr

08005fbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b095      	sub	sp, #84	; 0x54
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	330c      	adds	r3, #12
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	330c      	adds	r3, #12
 8005fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fe6:	643a      	str	r2, [r7, #64]	; 0x40
 8005fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e5      	bne.n	8005fc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3314      	adds	r3, #20
 8006000:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	61fb      	str	r3, [r7, #28]
   return(result);
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	f023 0301 	bic.w	r3, r3, #1
 8006010:	64bb      	str	r3, [r7, #72]	; 0x48
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3314      	adds	r3, #20
 8006018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800601a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e5      	bne.n	8005ffa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006032:	2b01      	cmp	r3, #1
 8006034:	d119      	bne.n	800606a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	330c      	adds	r3, #12
 800603c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	60bb      	str	r3, [r7, #8]
   return(result);
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f023 0310 	bic.w	r3, r3, #16
 800604c:	647b      	str	r3, [r7, #68]	; 0x44
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	330c      	adds	r3, #12
 8006054:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006056:	61ba      	str	r2, [r7, #24]
 8006058:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	6979      	ldr	r1, [r7, #20]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	613b      	str	r3, [r7, #16]
   return(result);
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e5      	bne.n	8006036 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006078:	bf00      	nop
 800607a:	3754      	adds	r7, #84	; 0x54
 800607c:	46bd      	mov	sp, r7
 800607e:	bc80      	pop	{r7}
 8006080:	4770      	bx	lr

08006082 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f7ff fcfd 	bl	8005a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b085      	sub	sp, #20
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b21      	cmp	r3, #33	; 0x21
 80060bc:	d13e      	bne.n	800613c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c6:	d114      	bne.n	80060f2 <UART_Transmit_IT+0x48>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d110      	bne.n	80060f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	1c9a      	adds	r2, r3, #2
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	621a      	str	r2, [r3, #32]
 80060f0:	e008      	b.n	8006104 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	1c59      	adds	r1, r3, #1
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	6211      	str	r1, [r2, #32]
 80060fc:	781a      	ldrb	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29b      	uxth	r3, r3
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	4619      	mov	r1, r3
 8006112:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10f      	bne.n	8006138 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006126:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006136:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	e000      	b.n	800613e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800613c:	2302      	movs	r3, #2
  }
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr

08006148 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800615e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff fc73 	bl	8005a54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08c      	sub	sp, #48	; 0x30
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b22      	cmp	r3, #34	; 0x22
 800618a:	f040 80ae 	bne.w	80062ea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006196:	d117      	bne.n	80061c8 <UART_Receive_IT+0x50>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d113      	bne.n	80061c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061a0:	2300      	movs	r3, #0
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c0:	1c9a      	adds	r2, r3, #2
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	629a      	str	r2, [r3, #40]	; 0x28
 80061c6:	e026      	b.n	8006216 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061da:	d007      	beq.n	80061ec <UART_Receive_IT+0x74>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10a      	bne.n	80061fa <UART_Receive_IT+0x82>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d106      	bne.n	80061fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	e008      	b.n	800620c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006206:	b2da      	uxtb	r2, r3
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29b      	uxth	r3, r3
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	4619      	mov	r1, r3
 8006224:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006226:	2b00      	cmp	r3, #0
 8006228:	d15d      	bne.n	80062e6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0220 	bic.w	r2, r2, #32
 8006238:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68da      	ldr	r2, [r3, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006248:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	695a      	ldr	r2, [r3, #20]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0201 	bic.w	r2, r2, #1
 8006258:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2220      	movs	r2, #32
 800625e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626c:	2b01      	cmp	r3, #1
 800626e:	d135      	bne.n	80062dc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	613b      	str	r3, [r7, #16]
   return(result);
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f023 0310 	bic.w	r3, r3, #16
 800628c:	627b      	str	r3, [r7, #36]	; 0x24
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	330c      	adds	r3, #12
 8006294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006296:	623a      	str	r2, [r7, #32]
 8006298:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629a:	69f9      	ldr	r1, [r7, #28]
 800629c:	6a3a      	ldr	r2, [r7, #32]
 800629e:	e841 2300 	strex	r3, r2, [r1]
 80062a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1e5      	bne.n	8006276 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0310 	and.w	r3, r3, #16
 80062b4:	2b10      	cmp	r3, #16
 80062b6:	d10a      	bne.n	80062ce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062b8:	2300      	movs	r3, #0
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7fa fdc1 	bl	8000e5c <HAL_UARTEx_RxEventCallback>
 80062da:	e002      	b.n	80062e2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7ff fbcb 	bl	8005a78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	e002      	b.n	80062ec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	e000      	b.n	80062ec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80062ea:	2302      	movs	r3, #2
  }
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3730      	adds	r7, #48	; 0x30
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	431a      	orrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	4313      	orrs	r3, r2
 8006328:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006334:	f023 030c 	bic.w	r3, r3, #12
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6812      	ldr	r2, [r2, #0]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	430b      	orrs	r3, r1
 8006340:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699a      	ldr	r2, [r3, #24]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a55      	ldr	r2, [pc, #340]	; (80064b4 <UART_SetConfig+0x1c0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d103      	bne.n	800636a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006362:	f7fd fcc1 	bl	8003ce8 <HAL_RCC_GetPCLK2Freq>
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	e002      	b.n	8006370 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800636a:	f7fd fca9 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 800636e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006378:	d14c      	bne.n	8006414 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4613      	mov	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	009a      	lsls	r2, r3, #2
 8006384:	441a      	add	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006390:	4a49      	ldr	r2, [pc, #292]	; (80064b8 <UART_SetConfig+0x1c4>)
 8006392:	fba2 2303 	umull	r2, r3, r2, r3
 8006396:	095b      	lsrs	r3, r3, #5
 8006398:	0119      	lsls	r1, r3, #4
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	009a      	lsls	r2, r3, #2
 80063a4:	441a      	add	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80063b0:	4b41      	ldr	r3, [pc, #260]	; (80064b8 <UART_SetConfig+0x1c4>)
 80063b2:	fba3 0302 	umull	r0, r3, r3, r2
 80063b6:	095b      	lsrs	r3, r3, #5
 80063b8:	2064      	movs	r0, #100	; 0x64
 80063ba:	fb00 f303 	mul.w	r3, r0, r3
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	3332      	adds	r3, #50	; 0x32
 80063c4:	4a3c      	ldr	r2, [pc, #240]	; (80064b8 <UART_SetConfig+0x1c4>)
 80063c6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063d2:	4419      	add	r1, r3
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	009a      	lsls	r2, r3, #2
 80063de:	441a      	add	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80063ea:	4b33      	ldr	r3, [pc, #204]	; (80064b8 <UART_SetConfig+0x1c4>)
 80063ec:	fba3 0302 	umull	r0, r3, r3, r2
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	2064      	movs	r0, #100	; 0x64
 80063f4:	fb00 f303 	mul.w	r3, r0, r3
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	3332      	adds	r3, #50	; 0x32
 80063fe:	4a2e      	ldr	r2, [pc, #184]	; (80064b8 <UART_SetConfig+0x1c4>)
 8006400:	fba2 2303 	umull	r2, r3, r2, r3
 8006404:	095b      	lsrs	r3, r3, #5
 8006406:	f003 0207 	and.w	r2, r3, #7
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	440a      	add	r2, r1
 8006410:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 8006412:	e04a      	b.n	80064aa <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4613      	mov	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	009a      	lsls	r2, r3, #2
 800641e:	441a      	add	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	fbb2 f3f3 	udiv	r3, r2, r3
 800642a:	4a23      	ldr	r2, [pc, #140]	; (80064b8 <UART_SetConfig+0x1c4>)
 800642c:	fba2 2303 	umull	r2, r3, r2, r3
 8006430:	095b      	lsrs	r3, r3, #5
 8006432:	0119      	lsls	r1, r3, #4
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	4613      	mov	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	009a      	lsls	r2, r3, #2
 800643e:	441a      	add	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	fbb2 f2f3 	udiv	r2, r2, r3
 800644a:	4b1b      	ldr	r3, [pc, #108]	; (80064b8 <UART_SetConfig+0x1c4>)
 800644c:	fba3 0302 	umull	r0, r3, r3, r2
 8006450:	095b      	lsrs	r3, r3, #5
 8006452:	2064      	movs	r0, #100	; 0x64
 8006454:	fb00 f303 	mul.w	r3, r0, r3
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	3332      	adds	r3, #50	; 0x32
 800645e:	4a16      	ldr	r2, [pc, #88]	; (80064b8 <UART_SetConfig+0x1c4>)
 8006460:	fba2 2303 	umull	r2, r3, r2, r3
 8006464:	095b      	lsrs	r3, r3, #5
 8006466:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800646a:	4419      	add	r1, r3
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	4613      	mov	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	009a      	lsls	r2, r3, #2
 8006476:	441a      	add	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006482:	4b0d      	ldr	r3, [pc, #52]	; (80064b8 <UART_SetConfig+0x1c4>)
 8006484:	fba3 0302 	umull	r0, r3, r3, r2
 8006488:	095b      	lsrs	r3, r3, #5
 800648a:	2064      	movs	r0, #100	; 0x64
 800648c:	fb00 f303 	mul.w	r3, r0, r3
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	011b      	lsls	r3, r3, #4
 8006494:	3332      	adds	r3, #50	; 0x32
 8006496:	4a08      	ldr	r2, [pc, #32]	; (80064b8 <UART_SetConfig+0x1c4>)
 8006498:	fba2 2303 	umull	r2, r3, r2, r3
 800649c:	095b      	lsrs	r3, r3, #5
 800649e:	f003 020f 	and.w	r2, r3, #15
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	440a      	add	r2, r1
 80064a8:	609a      	str	r2, [r3, #8]
}
 80064aa:	bf00      	nop
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40013800 	.word	0x40013800
 80064b8:	51eb851f 	.word	0x51eb851f

080064bc <std>:
 80064bc:	2300      	movs	r3, #0
 80064be:	b510      	push	{r4, lr}
 80064c0:	4604      	mov	r4, r0
 80064c2:	e9c0 3300 	strd	r3, r3, [r0]
 80064c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064ca:	6083      	str	r3, [r0, #8]
 80064cc:	8181      	strh	r1, [r0, #12]
 80064ce:	6643      	str	r3, [r0, #100]	; 0x64
 80064d0:	81c2      	strh	r2, [r0, #14]
 80064d2:	6183      	str	r3, [r0, #24]
 80064d4:	4619      	mov	r1, r3
 80064d6:	2208      	movs	r2, #8
 80064d8:	305c      	adds	r0, #92	; 0x5c
 80064da:	f000 f926 	bl	800672a <memset>
 80064de:	4b0d      	ldr	r3, [pc, #52]	; (8006514 <std+0x58>)
 80064e0:	6224      	str	r4, [r4, #32]
 80064e2:	6263      	str	r3, [r4, #36]	; 0x24
 80064e4:	4b0c      	ldr	r3, [pc, #48]	; (8006518 <std+0x5c>)
 80064e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80064e8:	4b0c      	ldr	r3, [pc, #48]	; (800651c <std+0x60>)
 80064ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064ec:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <std+0x64>)
 80064ee:	6323      	str	r3, [r4, #48]	; 0x30
 80064f0:	4b0c      	ldr	r3, [pc, #48]	; (8006524 <std+0x68>)
 80064f2:	429c      	cmp	r4, r3
 80064f4:	d006      	beq.n	8006504 <std+0x48>
 80064f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80064fa:	4294      	cmp	r4, r2
 80064fc:	d002      	beq.n	8006504 <std+0x48>
 80064fe:	33d0      	adds	r3, #208	; 0xd0
 8006500:	429c      	cmp	r4, r3
 8006502:	d105      	bne.n	8006510 <std+0x54>
 8006504:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800650c:	f000 b986 	b.w	800681c <__retarget_lock_init_recursive>
 8006510:	bd10      	pop	{r4, pc}
 8006512:	bf00      	nop
 8006514:	080066a5 	.word	0x080066a5
 8006518:	080066c7 	.word	0x080066c7
 800651c:	080066ff 	.word	0x080066ff
 8006520:	08006723 	.word	0x08006723
 8006524:	200009f4 	.word	0x200009f4

08006528 <stdio_exit_handler>:
 8006528:	4a02      	ldr	r2, [pc, #8]	; (8006534 <stdio_exit_handler+0xc>)
 800652a:	4903      	ldr	r1, [pc, #12]	; (8006538 <stdio_exit_handler+0x10>)
 800652c:	4803      	ldr	r0, [pc, #12]	; (800653c <stdio_exit_handler+0x14>)
 800652e:	f000 b869 	b.w	8006604 <_fwalk_sglue>
 8006532:	bf00      	nop
 8006534:	200000ac 	.word	0x200000ac
 8006538:	08007389 	.word	0x08007389
 800653c:	200000b8 	.word	0x200000b8

08006540 <cleanup_stdio>:
 8006540:	6841      	ldr	r1, [r0, #4]
 8006542:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <cleanup_stdio+0x34>)
 8006544:	b510      	push	{r4, lr}
 8006546:	4299      	cmp	r1, r3
 8006548:	4604      	mov	r4, r0
 800654a:	d001      	beq.n	8006550 <cleanup_stdio+0x10>
 800654c:	f000 ff1c 	bl	8007388 <_fflush_r>
 8006550:	68a1      	ldr	r1, [r4, #8]
 8006552:	4b09      	ldr	r3, [pc, #36]	; (8006578 <cleanup_stdio+0x38>)
 8006554:	4299      	cmp	r1, r3
 8006556:	d002      	beq.n	800655e <cleanup_stdio+0x1e>
 8006558:	4620      	mov	r0, r4
 800655a:	f000 ff15 	bl	8007388 <_fflush_r>
 800655e:	68e1      	ldr	r1, [r4, #12]
 8006560:	4b06      	ldr	r3, [pc, #24]	; (800657c <cleanup_stdio+0x3c>)
 8006562:	4299      	cmp	r1, r3
 8006564:	d004      	beq.n	8006570 <cleanup_stdio+0x30>
 8006566:	4620      	mov	r0, r4
 8006568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800656c:	f000 bf0c 	b.w	8007388 <_fflush_r>
 8006570:	bd10      	pop	{r4, pc}
 8006572:	bf00      	nop
 8006574:	200009f4 	.word	0x200009f4
 8006578:	20000a5c 	.word	0x20000a5c
 800657c:	20000ac4 	.word	0x20000ac4

08006580 <global_stdio_init.part.0>:
 8006580:	b510      	push	{r4, lr}
 8006582:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <global_stdio_init.part.0+0x30>)
 8006584:	4c0b      	ldr	r4, [pc, #44]	; (80065b4 <global_stdio_init.part.0+0x34>)
 8006586:	4a0c      	ldr	r2, [pc, #48]	; (80065b8 <global_stdio_init.part.0+0x38>)
 8006588:	4620      	mov	r0, r4
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	2104      	movs	r1, #4
 800658e:	2200      	movs	r2, #0
 8006590:	f7ff ff94 	bl	80064bc <std>
 8006594:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006598:	2201      	movs	r2, #1
 800659a:	2109      	movs	r1, #9
 800659c:	f7ff ff8e 	bl	80064bc <std>
 80065a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80065a4:	2202      	movs	r2, #2
 80065a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065aa:	2112      	movs	r1, #18
 80065ac:	f7ff bf86 	b.w	80064bc <std>
 80065b0:	20000b2c 	.word	0x20000b2c
 80065b4:	200009f4 	.word	0x200009f4
 80065b8:	08006529 	.word	0x08006529

080065bc <__sfp_lock_acquire>:
 80065bc:	4801      	ldr	r0, [pc, #4]	; (80065c4 <__sfp_lock_acquire+0x8>)
 80065be:	f000 b92e 	b.w	800681e <__retarget_lock_acquire_recursive>
 80065c2:	bf00      	nop
 80065c4:	20000b35 	.word	0x20000b35

080065c8 <__sfp_lock_release>:
 80065c8:	4801      	ldr	r0, [pc, #4]	; (80065d0 <__sfp_lock_release+0x8>)
 80065ca:	f000 b929 	b.w	8006820 <__retarget_lock_release_recursive>
 80065ce:	bf00      	nop
 80065d0:	20000b35 	.word	0x20000b35

080065d4 <__sinit>:
 80065d4:	b510      	push	{r4, lr}
 80065d6:	4604      	mov	r4, r0
 80065d8:	f7ff fff0 	bl	80065bc <__sfp_lock_acquire>
 80065dc:	6a23      	ldr	r3, [r4, #32]
 80065de:	b11b      	cbz	r3, 80065e8 <__sinit+0x14>
 80065e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065e4:	f7ff bff0 	b.w	80065c8 <__sfp_lock_release>
 80065e8:	4b04      	ldr	r3, [pc, #16]	; (80065fc <__sinit+0x28>)
 80065ea:	6223      	str	r3, [r4, #32]
 80065ec:	4b04      	ldr	r3, [pc, #16]	; (8006600 <__sinit+0x2c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1f5      	bne.n	80065e0 <__sinit+0xc>
 80065f4:	f7ff ffc4 	bl	8006580 <global_stdio_init.part.0>
 80065f8:	e7f2      	b.n	80065e0 <__sinit+0xc>
 80065fa:	bf00      	nop
 80065fc:	08006541 	.word	0x08006541
 8006600:	20000b2c 	.word	0x20000b2c

08006604 <_fwalk_sglue>:
 8006604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006608:	4607      	mov	r7, r0
 800660a:	4688      	mov	r8, r1
 800660c:	4614      	mov	r4, r2
 800660e:	2600      	movs	r6, #0
 8006610:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006614:	f1b9 0901 	subs.w	r9, r9, #1
 8006618:	d505      	bpl.n	8006626 <_fwalk_sglue+0x22>
 800661a:	6824      	ldr	r4, [r4, #0]
 800661c:	2c00      	cmp	r4, #0
 800661e:	d1f7      	bne.n	8006610 <_fwalk_sglue+0xc>
 8006620:	4630      	mov	r0, r6
 8006622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006626:	89ab      	ldrh	r3, [r5, #12]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d907      	bls.n	800663c <_fwalk_sglue+0x38>
 800662c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006630:	3301      	adds	r3, #1
 8006632:	d003      	beq.n	800663c <_fwalk_sglue+0x38>
 8006634:	4629      	mov	r1, r5
 8006636:	4638      	mov	r0, r7
 8006638:	47c0      	blx	r8
 800663a:	4306      	orrs	r6, r0
 800663c:	3568      	adds	r5, #104	; 0x68
 800663e:	e7e9      	b.n	8006614 <_fwalk_sglue+0x10>

08006640 <iprintf>:
 8006640:	b40f      	push	{r0, r1, r2, r3}
 8006642:	b507      	push	{r0, r1, r2, lr}
 8006644:	4906      	ldr	r1, [pc, #24]	; (8006660 <iprintf+0x20>)
 8006646:	ab04      	add	r3, sp, #16
 8006648:	6808      	ldr	r0, [r1, #0]
 800664a:	f853 2b04 	ldr.w	r2, [r3], #4
 800664e:	6881      	ldr	r1, [r0, #8]
 8006650:	9301      	str	r3, [sp, #4]
 8006652:	f000 fb69 	bl	8006d28 <_vfiprintf_r>
 8006656:	b003      	add	sp, #12
 8006658:	f85d eb04 	ldr.w	lr, [sp], #4
 800665c:	b004      	add	sp, #16
 800665e:	4770      	bx	lr
 8006660:	20000104 	.word	0x20000104

08006664 <siprintf>:
 8006664:	b40e      	push	{r1, r2, r3}
 8006666:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800666a:	b500      	push	{lr}
 800666c:	b09c      	sub	sp, #112	; 0x70
 800666e:	ab1d      	add	r3, sp, #116	; 0x74
 8006670:	9002      	str	r0, [sp, #8]
 8006672:	9006      	str	r0, [sp, #24]
 8006674:	9107      	str	r1, [sp, #28]
 8006676:	9104      	str	r1, [sp, #16]
 8006678:	4808      	ldr	r0, [pc, #32]	; (800669c <siprintf+0x38>)
 800667a:	4909      	ldr	r1, [pc, #36]	; (80066a0 <siprintf+0x3c>)
 800667c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006680:	9105      	str	r1, [sp, #20]
 8006682:	6800      	ldr	r0, [r0, #0]
 8006684:	a902      	add	r1, sp, #8
 8006686:	9301      	str	r3, [sp, #4]
 8006688:	f000 fa28 	bl	8006adc <_svfiprintf_r>
 800668c:	2200      	movs	r2, #0
 800668e:	9b02      	ldr	r3, [sp, #8]
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	b01c      	add	sp, #112	; 0x70
 8006694:	f85d eb04 	ldr.w	lr, [sp], #4
 8006698:	b003      	add	sp, #12
 800669a:	4770      	bx	lr
 800669c:	20000104 	.word	0x20000104
 80066a0:	ffff0208 	.word	0xffff0208

080066a4 <__sread>:
 80066a4:	b510      	push	{r4, lr}
 80066a6:	460c      	mov	r4, r1
 80066a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ac:	f000 f868 	bl	8006780 <_read_r>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	bfab      	itete	ge
 80066b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066b6:	89a3      	ldrhlt	r3, [r4, #12]
 80066b8:	181b      	addge	r3, r3, r0
 80066ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066be:	bfac      	ite	ge
 80066c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80066c2:	81a3      	strhlt	r3, [r4, #12]
 80066c4:	bd10      	pop	{r4, pc}

080066c6 <__swrite>:
 80066c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ca:	461f      	mov	r7, r3
 80066cc:	898b      	ldrh	r3, [r1, #12]
 80066ce:	4605      	mov	r5, r0
 80066d0:	05db      	lsls	r3, r3, #23
 80066d2:	460c      	mov	r4, r1
 80066d4:	4616      	mov	r6, r2
 80066d6:	d505      	bpl.n	80066e4 <__swrite+0x1e>
 80066d8:	2302      	movs	r3, #2
 80066da:	2200      	movs	r2, #0
 80066dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066e0:	f000 f83c 	bl	800675c <_lseek_r>
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	4632      	mov	r2, r6
 80066e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066ec:	81a3      	strh	r3, [r4, #12]
 80066ee:	4628      	mov	r0, r5
 80066f0:	463b      	mov	r3, r7
 80066f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066fa:	f000 b853 	b.w	80067a4 <_write_r>

080066fe <__sseek>:
 80066fe:	b510      	push	{r4, lr}
 8006700:	460c      	mov	r4, r1
 8006702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006706:	f000 f829 	bl	800675c <_lseek_r>
 800670a:	1c43      	adds	r3, r0, #1
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	bf15      	itete	ne
 8006710:	6560      	strne	r0, [r4, #84]	; 0x54
 8006712:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006716:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800671a:	81a3      	strheq	r3, [r4, #12]
 800671c:	bf18      	it	ne
 800671e:	81a3      	strhne	r3, [r4, #12]
 8006720:	bd10      	pop	{r4, pc}

08006722 <__sclose>:
 8006722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006726:	f000 b809 	b.w	800673c <_close_r>

0800672a <memset>:
 800672a:	4603      	mov	r3, r0
 800672c:	4402      	add	r2, r0
 800672e:	4293      	cmp	r3, r2
 8006730:	d100      	bne.n	8006734 <memset+0xa>
 8006732:	4770      	bx	lr
 8006734:	f803 1b01 	strb.w	r1, [r3], #1
 8006738:	e7f9      	b.n	800672e <memset+0x4>
	...

0800673c <_close_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	2300      	movs	r3, #0
 8006740:	4d05      	ldr	r5, [pc, #20]	; (8006758 <_close_r+0x1c>)
 8006742:	4604      	mov	r4, r0
 8006744:	4608      	mov	r0, r1
 8006746:	602b      	str	r3, [r5, #0]
 8006748:	f7fc f8af 	bl	80028aa <_close>
 800674c:	1c43      	adds	r3, r0, #1
 800674e:	d102      	bne.n	8006756 <_close_r+0x1a>
 8006750:	682b      	ldr	r3, [r5, #0]
 8006752:	b103      	cbz	r3, 8006756 <_close_r+0x1a>
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	bd38      	pop	{r3, r4, r5, pc}
 8006758:	20000b30 	.word	0x20000b30

0800675c <_lseek_r>:
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	4604      	mov	r4, r0
 8006760:	4608      	mov	r0, r1
 8006762:	4611      	mov	r1, r2
 8006764:	2200      	movs	r2, #0
 8006766:	4d05      	ldr	r5, [pc, #20]	; (800677c <_lseek_r+0x20>)
 8006768:	602a      	str	r2, [r5, #0]
 800676a:	461a      	mov	r2, r3
 800676c:	f7fc f8c1 	bl	80028f2 <_lseek>
 8006770:	1c43      	adds	r3, r0, #1
 8006772:	d102      	bne.n	800677a <_lseek_r+0x1e>
 8006774:	682b      	ldr	r3, [r5, #0]
 8006776:	b103      	cbz	r3, 800677a <_lseek_r+0x1e>
 8006778:	6023      	str	r3, [r4, #0]
 800677a:	bd38      	pop	{r3, r4, r5, pc}
 800677c:	20000b30 	.word	0x20000b30

08006780 <_read_r>:
 8006780:	b538      	push	{r3, r4, r5, lr}
 8006782:	4604      	mov	r4, r0
 8006784:	4608      	mov	r0, r1
 8006786:	4611      	mov	r1, r2
 8006788:	2200      	movs	r2, #0
 800678a:	4d05      	ldr	r5, [pc, #20]	; (80067a0 <_read_r+0x20>)
 800678c:	602a      	str	r2, [r5, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	f7fc f852 	bl	8002838 <_read>
 8006794:	1c43      	adds	r3, r0, #1
 8006796:	d102      	bne.n	800679e <_read_r+0x1e>
 8006798:	682b      	ldr	r3, [r5, #0]
 800679a:	b103      	cbz	r3, 800679e <_read_r+0x1e>
 800679c:	6023      	str	r3, [r4, #0]
 800679e:	bd38      	pop	{r3, r4, r5, pc}
 80067a0:	20000b30 	.word	0x20000b30

080067a4 <_write_r>:
 80067a4:	b538      	push	{r3, r4, r5, lr}
 80067a6:	4604      	mov	r4, r0
 80067a8:	4608      	mov	r0, r1
 80067aa:	4611      	mov	r1, r2
 80067ac:	2200      	movs	r2, #0
 80067ae:	4d05      	ldr	r5, [pc, #20]	; (80067c4 <_write_r+0x20>)
 80067b0:	602a      	str	r2, [r5, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	f7fc f85d 	bl	8002872 <_write>
 80067b8:	1c43      	adds	r3, r0, #1
 80067ba:	d102      	bne.n	80067c2 <_write_r+0x1e>
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	b103      	cbz	r3, 80067c2 <_write_r+0x1e>
 80067c0:	6023      	str	r3, [r4, #0]
 80067c2:	bd38      	pop	{r3, r4, r5, pc}
 80067c4:	20000b30 	.word	0x20000b30

080067c8 <__errno>:
 80067c8:	4b01      	ldr	r3, [pc, #4]	; (80067d0 <__errno+0x8>)
 80067ca:	6818      	ldr	r0, [r3, #0]
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	20000104 	.word	0x20000104

080067d4 <__libc_init_array>:
 80067d4:	b570      	push	{r4, r5, r6, lr}
 80067d6:	2600      	movs	r6, #0
 80067d8:	4d0c      	ldr	r5, [pc, #48]	; (800680c <__libc_init_array+0x38>)
 80067da:	4c0d      	ldr	r4, [pc, #52]	; (8006810 <__libc_init_array+0x3c>)
 80067dc:	1b64      	subs	r4, r4, r5
 80067de:	10a4      	asrs	r4, r4, #2
 80067e0:	42a6      	cmp	r6, r4
 80067e2:	d109      	bne.n	80067f8 <__libc_init_array+0x24>
 80067e4:	f000 ff80 	bl	80076e8 <_init>
 80067e8:	2600      	movs	r6, #0
 80067ea:	4d0a      	ldr	r5, [pc, #40]	; (8006814 <__libc_init_array+0x40>)
 80067ec:	4c0a      	ldr	r4, [pc, #40]	; (8006818 <__libc_init_array+0x44>)
 80067ee:	1b64      	subs	r4, r4, r5
 80067f0:	10a4      	asrs	r4, r4, #2
 80067f2:	42a6      	cmp	r6, r4
 80067f4:	d105      	bne.n	8006802 <__libc_init_array+0x2e>
 80067f6:	bd70      	pop	{r4, r5, r6, pc}
 80067f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067fc:	4798      	blx	r3
 80067fe:	3601      	adds	r6, #1
 8006800:	e7ee      	b.n	80067e0 <__libc_init_array+0xc>
 8006802:	f855 3b04 	ldr.w	r3, [r5], #4
 8006806:	4798      	blx	r3
 8006808:	3601      	adds	r6, #1
 800680a:	e7f2      	b.n	80067f2 <__libc_init_array+0x1e>
 800680c:	08007808 	.word	0x08007808
 8006810:	08007808 	.word	0x08007808
 8006814:	08007808 	.word	0x08007808
 8006818:	0800780c 	.word	0x0800780c

0800681c <__retarget_lock_init_recursive>:
 800681c:	4770      	bx	lr

0800681e <__retarget_lock_acquire_recursive>:
 800681e:	4770      	bx	lr

08006820 <__retarget_lock_release_recursive>:
 8006820:	4770      	bx	lr

08006822 <memcpy>:
 8006822:	440a      	add	r2, r1
 8006824:	4291      	cmp	r1, r2
 8006826:	f100 33ff 	add.w	r3, r0, #4294967295
 800682a:	d100      	bne.n	800682e <memcpy+0xc>
 800682c:	4770      	bx	lr
 800682e:	b510      	push	{r4, lr}
 8006830:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006834:	4291      	cmp	r1, r2
 8006836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800683a:	d1f9      	bne.n	8006830 <memcpy+0xe>
 800683c:	bd10      	pop	{r4, pc}
	...

08006840 <_free_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4605      	mov	r5, r0
 8006844:	2900      	cmp	r1, #0
 8006846:	d040      	beq.n	80068ca <_free_r+0x8a>
 8006848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800684c:	1f0c      	subs	r4, r1, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	bfb8      	it	lt
 8006852:	18e4      	addlt	r4, r4, r3
 8006854:	f000 f8dc 	bl	8006a10 <__malloc_lock>
 8006858:	4a1c      	ldr	r2, [pc, #112]	; (80068cc <_free_r+0x8c>)
 800685a:	6813      	ldr	r3, [r2, #0]
 800685c:	b933      	cbnz	r3, 800686c <_free_r+0x2c>
 800685e:	6063      	str	r3, [r4, #4]
 8006860:	6014      	str	r4, [r2, #0]
 8006862:	4628      	mov	r0, r5
 8006864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006868:	f000 b8d8 	b.w	8006a1c <__malloc_unlock>
 800686c:	42a3      	cmp	r3, r4
 800686e:	d908      	bls.n	8006882 <_free_r+0x42>
 8006870:	6820      	ldr	r0, [r4, #0]
 8006872:	1821      	adds	r1, r4, r0
 8006874:	428b      	cmp	r3, r1
 8006876:	bf01      	itttt	eq
 8006878:	6819      	ldreq	r1, [r3, #0]
 800687a:	685b      	ldreq	r3, [r3, #4]
 800687c:	1809      	addeq	r1, r1, r0
 800687e:	6021      	streq	r1, [r4, #0]
 8006880:	e7ed      	b.n	800685e <_free_r+0x1e>
 8006882:	461a      	mov	r2, r3
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	b10b      	cbz	r3, 800688c <_free_r+0x4c>
 8006888:	42a3      	cmp	r3, r4
 800688a:	d9fa      	bls.n	8006882 <_free_r+0x42>
 800688c:	6811      	ldr	r1, [r2, #0]
 800688e:	1850      	adds	r0, r2, r1
 8006890:	42a0      	cmp	r0, r4
 8006892:	d10b      	bne.n	80068ac <_free_r+0x6c>
 8006894:	6820      	ldr	r0, [r4, #0]
 8006896:	4401      	add	r1, r0
 8006898:	1850      	adds	r0, r2, r1
 800689a:	4283      	cmp	r3, r0
 800689c:	6011      	str	r1, [r2, #0]
 800689e:	d1e0      	bne.n	8006862 <_free_r+0x22>
 80068a0:	6818      	ldr	r0, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	4408      	add	r0, r1
 80068a6:	6010      	str	r0, [r2, #0]
 80068a8:	6053      	str	r3, [r2, #4]
 80068aa:	e7da      	b.n	8006862 <_free_r+0x22>
 80068ac:	d902      	bls.n	80068b4 <_free_r+0x74>
 80068ae:	230c      	movs	r3, #12
 80068b0:	602b      	str	r3, [r5, #0]
 80068b2:	e7d6      	b.n	8006862 <_free_r+0x22>
 80068b4:	6820      	ldr	r0, [r4, #0]
 80068b6:	1821      	adds	r1, r4, r0
 80068b8:	428b      	cmp	r3, r1
 80068ba:	bf01      	itttt	eq
 80068bc:	6819      	ldreq	r1, [r3, #0]
 80068be:	685b      	ldreq	r3, [r3, #4]
 80068c0:	1809      	addeq	r1, r1, r0
 80068c2:	6021      	streq	r1, [r4, #0]
 80068c4:	6063      	str	r3, [r4, #4]
 80068c6:	6054      	str	r4, [r2, #4]
 80068c8:	e7cb      	b.n	8006862 <_free_r+0x22>
 80068ca:	bd38      	pop	{r3, r4, r5, pc}
 80068cc:	20000b38 	.word	0x20000b38

080068d0 <sbrk_aligned>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	4e0e      	ldr	r6, [pc, #56]	; (800690c <sbrk_aligned+0x3c>)
 80068d4:	460c      	mov	r4, r1
 80068d6:	6831      	ldr	r1, [r6, #0]
 80068d8:	4605      	mov	r5, r0
 80068da:	b911      	cbnz	r1, 80068e2 <sbrk_aligned+0x12>
 80068dc:	f000 fe2c 	bl	8007538 <_sbrk_r>
 80068e0:	6030      	str	r0, [r6, #0]
 80068e2:	4621      	mov	r1, r4
 80068e4:	4628      	mov	r0, r5
 80068e6:	f000 fe27 	bl	8007538 <_sbrk_r>
 80068ea:	1c43      	adds	r3, r0, #1
 80068ec:	d00a      	beq.n	8006904 <sbrk_aligned+0x34>
 80068ee:	1cc4      	adds	r4, r0, #3
 80068f0:	f024 0403 	bic.w	r4, r4, #3
 80068f4:	42a0      	cmp	r0, r4
 80068f6:	d007      	beq.n	8006908 <sbrk_aligned+0x38>
 80068f8:	1a21      	subs	r1, r4, r0
 80068fa:	4628      	mov	r0, r5
 80068fc:	f000 fe1c 	bl	8007538 <_sbrk_r>
 8006900:	3001      	adds	r0, #1
 8006902:	d101      	bne.n	8006908 <sbrk_aligned+0x38>
 8006904:	f04f 34ff 	mov.w	r4, #4294967295
 8006908:	4620      	mov	r0, r4
 800690a:	bd70      	pop	{r4, r5, r6, pc}
 800690c:	20000b3c 	.word	0x20000b3c

08006910 <_malloc_r>:
 8006910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006914:	1ccd      	adds	r5, r1, #3
 8006916:	f025 0503 	bic.w	r5, r5, #3
 800691a:	3508      	adds	r5, #8
 800691c:	2d0c      	cmp	r5, #12
 800691e:	bf38      	it	cc
 8006920:	250c      	movcc	r5, #12
 8006922:	2d00      	cmp	r5, #0
 8006924:	4607      	mov	r7, r0
 8006926:	db01      	blt.n	800692c <_malloc_r+0x1c>
 8006928:	42a9      	cmp	r1, r5
 800692a:	d905      	bls.n	8006938 <_malloc_r+0x28>
 800692c:	230c      	movs	r3, #12
 800692e:	2600      	movs	r6, #0
 8006930:	603b      	str	r3, [r7, #0]
 8006932:	4630      	mov	r0, r6
 8006934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006938:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a0c <_malloc_r+0xfc>
 800693c:	f000 f868 	bl	8006a10 <__malloc_lock>
 8006940:	f8d8 3000 	ldr.w	r3, [r8]
 8006944:	461c      	mov	r4, r3
 8006946:	bb5c      	cbnz	r4, 80069a0 <_malloc_r+0x90>
 8006948:	4629      	mov	r1, r5
 800694a:	4638      	mov	r0, r7
 800694c:	f7ff ffc0 	bl	80068d0 <sbrk_aligned>
 8006950:	1c43      	adds	r3, r0, #1
 8006952:	4604      	mov	r4, r0
 8006954:	d155      	bne.n	8006a02 <_malloc_r+0xf2>
 8006956:	f8d8 4000 	ldr.w	r4, [r8]
 800695a:	4626      	mov	r6, r4
 800695c:	2e00      	cmp	r6, #0
 800695e:	d145      	bne.n	80069ec <_malloc_r+0xdc>
 8006960:	2c00      	cmp	r4, #0
 8006962:	d048      	beq.n	80069f6 <_malloc_r+0xe6>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	4631      	mov	r1, r6
 8006968:	4638      	mov	r0, r7
 800696a:	eb04 0903 	add.w	r9, r4, r3
 800696e:	f000 fde3 	bl	8007538 <_sbrk_r>
 8006972:	4581      	cmp	r9, r0
 8006974:	d13f      	bne.n	80069f6 <_malloc_r+0xe6>
 8006976:	6821      	ldr	r1, [r4, #0]
 8006978:	4638      	mov	r0, r7
 800697a:	1a6d      	subs	r5, r5, r1
 800697c:	4629      	mov	r1, r5
 800697e:	f7ff ffa7 	bl	80068d0 <sbrk_aligned>
 8006982:	3001      	adds	r0, #1
 8006984:	d037      	beq.n	80069f6 <_malloc_r+0xe6>
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	442b      	add	r3, r5
 800698a:	6023      	str	r3, [r4, #0]
 800698c:	f8d8 3000 	ldr.w	r3, [r8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d038      	beq.n	8006a06 <_malloc_r+0xf6>
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	42a2      	cmp	r2, r4
 8006998:	d12b      	bne.n	80069f2 <_malloc_r+0xe2>
 800699a:	2200      	movs	r2, #0
 800699c:	605a      	str	r2, [r3, #4]
 800699e:	e00f      	b.n	80069c0 <_malloc_r+0xb0>
 80069a0:	6822      	ldr	r2, [r4, #0]
 80069a2:	1b52      	subs	r2, r2, r5
 80069a4:	d41f      	bmi.n	80069e6 <_malloc_r+0xd6>
 80069a6:	2a0b      	cmp	r2, #11
 80069a8:	d917      	bls.n	80069da <_malloc_r+0xca>
 80069aa:	1961      	adds	r1, r4, r5
 80069ac:	42a3      	cmp	r3, r4
 80069ae:	6025      	str	r5, [r4, #0]
 80069b0:	bf18      	it	ne
 80069b2:	6059      	strne	r1, [r3, #4]
 80069b4:	6863      	ldr	r3, [r4, #4]
 80069b6:	bf08      	it	eq
 80069b8:	f8c8 1000 	streq.w	r1, [r8]
 80069bc:	5162      	str	r2, [r4, r5]
 80069be:	604b      	str	r3, [r1, #4]
 80069c0:	4638      	mov	r0, r7
 80069c2:	f104 060b 	add.w	r6, r4, #11
 80069c6:	f000 f829 	bl	8006a1c <__malloc_unlock>
 80069ca:	f026 0607 	bic.w	r6, r6, #7
 80069ce:	1d23      	adds	r3, r4, #4
 80069d0:	1af2      	subs	r2, r6, r3
 80069d2:	d0ae      	beq.n	8006932 <_malloc_r+0x22>
 80069d4:	1b9b      	subs	r3, r3, r6
 80069d6:	50a3      	str	r3, [r4, r2]
 80069d8:	e7ab      	b.n	8006932 <_malloc_r+0x22>
 80069da:	42a3      	cmp	r3, r4
 80069dc:	6862      	ldr	r2, [r4, #4]
 80069de:	d1dd      	bne.n	800699c <_malloc_r+0x8c>
 80069e0:	f8c8 2000 	str.w	r2, [r8]
 80069e4:	e7ec      	b.n	80069c0 <_malloc_r+0xb0>
 80069e6:	4623      	mov	r3, r4
 80069e8:	6864      	ldr	r4, [r4, #4]
 80069ea:	e7ac      	b.n	8006946 <_malloc_r+0x36>
 80069ec:	4634      	mov	r4, r6
 80069ee:	6876      	ldr	r6, [r6, #4]
 80069f0:	e7b4      	b.n	800695c <_malloc_r+0x4c>
 80069f2:	4613      	mov	r3, r2
 80069f4:	e7cc      	b.n	8006990 <_malloc_r+0x80>
 80069f6:	230c      	movs	r3, #12
 80069f8:	4638      	mov	r0, r7
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	f000 f80e 	bl	8006a1c <__malloc_unlock>
 8006a00:	e797      	b.n	8006932 <_malloc_r+0x22>
 8006a02:	6025      	str	r5, [r4, #0]
 8006a04:	e7dc      	b.n	80069c0 <_malloc_r+0xb0>
 8006a06:	605b      	str	r3, [r3, #4]
 8006a08:	deff      	udf	#255	; 0xff
 8006a0a:	bf00      	nop
 8006a0c:	20000b38 	.word	0x20000b38

08006a10 <__malloc_lock>:
 8006a10:	4801      	ldr	r0, [pc, #4]	; (8006a18 <__malloc_lock+0x8>)
 8006a12:	f7ff bf04 	b.w	800681e <__retarget_lock_acquire_recursive>
 8006a16:	bf00      	nop
 8006a18:	20000b34 	.word	0x20000b34

08006a1c <__malloc_unlock>:
 8006a1c:	4801      	ldr	r0, [pc, #4]	; (8006a24 <__malloc_unlock+0x8>)
 8006a1e:	f7ff beff 	b.w	8006820 <__retarget_lock_release_recursive>
 8006a22:	bf00      	nop
 8006a24:	20000b34 	.word	0x20000b34

08006a28 <__ssputs_r>:
 8006a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a2c:	461f      	mov	r7, r3
 8006a2e:	688e      	ldr	r6, [r1, #8]
 8006a30:	4682      	mov	sl, r0
 8006a32:	42be      	cmp	r6, r7
 8006a34:	460c      	mov	r4, r1
 8006a36:	4690      	mov	r8, r2
 8006a38:	680b      	ldr	r3, [r1, #0]
 8006a3a:	d82c      	bhi.n	8006a96 <__ssputs_r+0x6e>
 8006a3c:	898a      	ldrh	r2, [r1, #12]
 8006a3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a42:	d026      	beq.n	8006a92 <__ssputs_r+0x6a>
 8006a44:	6965      	ldr	r5, [r4, #20]
 8006a46:	6909      	ldr	r1, [r1, #16]
 8006a48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a4c:	eba3 0901 	sub.w	r9, r3, r1
 8006a50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a54:	1c7b      	adds	r3, r7, #1
 8006a56:	444b      	add	r3, r9
 8006a58:	106d      	asrs	r5, r5, #1
 8006a5a:	429d      	cmp	r5, r3
 8006a5c:	bf38      	it	cc
 8006a5e:	461d      	movcc	r5, r3
 8006a60:	0553      	lsls	r3, r2, #21
 8006a62:	d527      	bpl.n	8006ab4 <__ssputs_r+0x8c>
 8006a64:	4629      	mov	r1, r5
 8006a66:	f7ff ff53 	bl	8006910 <_malloc_r>
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	b360      	cbz	r0, 8006ac8 <__ssputs_r+0xa0>
 8006a6e:	464a      	mov	r2, r9
 8006a70:	6921      	ldr	r1, [r4, #16]
 8006a72:	f7ff fed6 	bl	8006822 <memcpy>
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a80:	81a3      	strh	r3, [r4, #12]
 8006a82:	6126      	str	r6, [r4, #16]
 8006a84:	444e      	add	r6, r9
 8006a86:	6026      	str	r6, [r4, #0]
 8006a88:	463e      	mov	r6, r7
 8006a8a:	6165      	str	r5, [r4, #20]
 8006a8c:	eba5 0509 	sub.w	r5, r5, r9
 8006a90:	60a5      	str	r5, [r4, #8]
 8006a92:	42be      	cmp	r6, r7
 8006a94:	d900      	bls.n	8006a98 <__ssputs_r+0x70>
 8006a96:	463e      	mov	r6, r7
 8006a98:	4632      	mov	r2, r6
 8006a9a:	4641      	mov	r1, r8
 8006a9c:	6820      	ldr	r0, [r4, #0]
 8006a9e:	f000 fd31 	bl	8007504 <memmove>
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	68a3      	ldr	r3, [r4, #8]
 8006aa6:	1b9b      	subs	r3, r3, r6
 8006aa8:	60a3      	str	r3, [r4, #8]
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	4433      	add	r3, r6
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab4:	462a      	mov	r2, r5
 8006ab6:	f000 fd5d 	bl	8007574 <_realloc_r>
 8006aba:	4606      	mov	r6, r0
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d1e0      	bne.n	8006a82 <__ssputs_r+0x5a>
 8006ac0:	4650      	mov	r0, sl
 8006ac2:	6921      	ldr	r1, [r4, #16]
 8006ac4:	f7ff febc 	bl	8006840 <_free_r>
 8006ac8:	230c      	movs	r3, #12
 8006aca:	f8ca 3000 	str.w	r3, [sl]
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ad8:	81a3      	strh	r3, [r4, #12]
 8006ada:	e7e9      	b.n	8006ab0 <__ssputs_r+0x88>

08006adc <_svfiprintf_r>:
 8006adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae0:	4698      	mov	r8, r3
 8006ae2:	898b      	ldrh	r3, [r1, #12]
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	061b      	lsls	r3, r3, #24
 8006ae8:	460d      	mov	r5, r1
 8006aea:	4614      	mov	r4, r2
 8006aec:	b09d      	sub	sp, #116	; 0x74
 8006aee:	d50e      	bpl.n	8006b0e <_svfiprintf_r+0x32>
 8006af0:	690b      	ldr	r3, [r1, #16]
 8006af2:	b963      	cbnz	r3, 8006b0e <_svfiprintf_r+0x32>
 8006af4:	2140      	movs	r1, #64	; 0x40
 8006af6:	f7ff ff0b 	bl	8006910 <_malloc_r>
 8006afa:	6028      	str	r0, [r5, #0]
 8006afc:	6128      	str	r0, [r5, #16]
 8006afe:	b920      	cbnz	r0, 8006b0a <_svfiprintf_r+0x2e>
 8006b00:	230c      	movs	r3, #12
 8006b02:	603b      	str	r3, [r7, #0]
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295
 8006b08:	e0d0      	b.n	8006cac <_svfiprintf_r+0x1d0>
 8006b0a:	2340      	movs	r3, #64	; 0x40
 8006b0c:	616b      	str	r3, [r5, #20]
 8006b0e:	2300      	movs	r3, #0
 8006b10:	9309      	str	r3, [sp, #36]	; 0x24
 8006b12:	2320      	movs	r3, #32
 8006b14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b18:	2330      	movs	r3, #48	; 0x30
 8006b1a:	f04f 0901 	mov.w	r9, #1
 8006b1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b22:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006cc4 <_svfiprintf_r+0x1e8>
 8006b26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b2a:	4623      	mov	r3, r4
 8006b2c:	469a      	mov	sl, r3
 8006b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b32:	b10a      	cbz	r2, 8006b38 <_svfiprintf_r+0x5c>
 8006b34:	2a25      	cmp	r2, #37	; 0x25
 8006b36:	d1f9      	bne.n	8006b2c <_svfiprintf_r+0x50>
 8006b38:	ebba 0b04 	subs.w	fp, sl, r4
 8006b3c:	d00b      	beq.n	8006b56 <_svfiprintf_r+0x7a>
 8006b3e:	465b      	mov	r3, fp
 8006b40:	4622      	mov	r2, r4
 8006b42:	4629      	mov	r1, r5
 8006b44:	4638      	mov	r0, r7
 8006b46:	f7ff ff6f 	bl	8006a28 <__ssputs_r>
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	f000 80a9 	beq.w	8006ca2 <_svfiprintf_r+0x1c6>
 8006b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b52:	445a      	add	r2, fp
 8006b54:	9209      	str	r2, [sp, #36]	; 0x24
 8006b56:	f89a 3000 	ldrb.w	r3, [sl]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 80a1 	beq.w	8006ca2 <_svfiprintf_r+0x1c6>
 8006b60:	2300      	movs	r3, #0
 8006b62:	f04f 32ff 	mov.w	r2, #4294967295
 8006b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b6a:	f10a 0a01 	add.w	sl, sl, #1
 8006b6e:	9304      	str	r3, [sp, #16]
 8006b70:	9307      	str	r3, [sp, #28]
 8006b72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b76:	931a      	str	r3, [sp, #104]	; 0x68
 8006b78:	4654      	mov	r4, sl
 8006b7a:	2205      	movs	r2, #5
 8006b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b80:	4850      	ldr	r0, [pc, #320]	; (8006cc4 <_svfiprintf_r+0x1e8>)
 8006b82:	f000 fce9 	bl	8007558 <memchr>
 8006b86:	9a04      	ldr	r2, [sp, #16]
 8006b88:	b9d8      	cbnz	r0, 8006bc2 <_svfiprintf_r+0xe6>
 8006b8a:	06d0      	lsls	r0, r2, #27
 8006b8c:	bf44      	itt	mi
 8006b8e:	2320      	movmi	r3, #32
 8006b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b94:	0711      	lsls	r1, r2, #28
 8006b96:	bf44      	itt	mi
 8006b98:	232b      	movmi	r3, #43	; 0x2b
 8006b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8006ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ba4:	d015      	beq.n	8006bd2 <_svfiprintf_r+0xf6>
 8006ba6:	4654      	mov	r4, sl
 8006ba8:	2000      	movs	r0, #0
 8006baa:	f04f 0c0a 	mov.w	ip, #10
 8006bae:	9a07      	ldr	r2, [sp, #28]
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bb6:	3b30      	subs	r3, #48	; 0x30
 8006bb8:	2b09      	cmp	r3, #9
 8006bba:	d94d      	bls.n	8006c58 <_svfiprintf_r+0x17c>
 8006bbc:	b1b0      	cbz	r0, 8006bec <_svfiprintf_r+0x110>
 8006bbe:	9207      	str	r2, [sp, #28]
 8006bc0:	e014      	b.n	8006bec <_svfiprintf_r+0x110>
 8006bc2:	eba0 0308 	sub.w	r3, r0, r8
 8006bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	46a2      	mov	sl, r4
 8006bce:	9304      	str	r3, [sp, #16]
 8006bd0:	e7d2      	b.n	8006b78 <_svfiprintf_r+0x9c>
 8006bd2:	9b03      	ldr	r3, [sp, #12]
 8006bd4:	1d19      	adds	r1, r3, #4
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	9103      	str	r1, [sp, #12]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	bfbb      	ittet	lt
 8006bde:	425b      	neglt	r3, r3
 8006be0:	f042 0202 	orrlt.w	r2, r2, #2
 8006be4:	9307      	strge	r3, [sp, #28]
 8006be6:	9307      	strlt	r3, [sp, #28]
 8006be8:	bfb8      	it	lt
 8006bea:	9204      	strlt	r2, [sp, #16]
 8006bec:	7823      	ldrb	r3, [r4, #0]
 8006bee:	2b2e      	cmp	r3, #46	; 0x2e
 8006bf0:	d10c      	bne.n	8006c0c <_svfiprintf_r+0x130>
 8006bf2:	7863      	ldrb	r3, [r4, #1]
 8006bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8006bf6:	d134      	bne.n	8006c62 <_svfiprintf_r+0x186>
 8006bf8:	9b03      	ldr	r3, [sp, #12]
 8006bfa:	3402      	adds	r4, #2
 8006bfc:	1d1a      	adds	r2, r3, #4
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	9203      	str	r2, [sp, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	bfb8      	it	lt
 8006c06:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c0a:	9305      	str	r3, [sp, #20]
 8006c0c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006cc8 <_svfiprintf_r+0x1ec>
 8006c10:	2203      	movs	r2, #3
 8006c12:	4650      	mov	r0, sl
 8006c14:	7821      	ldrb	r1, [r4, #0]
 8006c16:	f000 fc9f 	bl	8007558 <memchr>
 8006c1a:	b138      	cbz	r0, 8006c2c <_svfiprintf_r+0x150>
 8006c1c:	2240      	movs	r2, #64	; 0x40
 8006c1e:	9b04      	ldr	r3, [sp, #16]
 8006c20:	eba0 000a 	sub.w	r0, r0, sl
 8006c24:	4082      	lsls	r2, r0
 8006c26:	4313      	orrs	r3, r2
 8006c28:	3401      	adds	r4, #1
 8006c2a:	9304      	str	r3, [sp, #16]
 8006c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c30:	2206      	movs	r2, #6
 8006c32:	4826      	ldr	r0, [pc, #152]	; (8006ccc <_svfiprintf_r+0x1f0>)
 8006c34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c38:	f000 fc8e 	bl	8007558 <memchr>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	d038      	beq.n	8006cb2 <_svfiprintf_r+0x1d6>
 8006c40:	4b23      	ldr	r3, [pc, #140]	; (8006cd0 <_svfiprintf_r+0x1f4>)
 8006c42:	bb1b      	cbnz	r3, 8006c8c <_svfiprintf_r+0x1b0>
 8006c44:	9b03      	ldr	r3, [sp, #12]
 8006c46:	3307      	adds	r3, #7
 8006c48:	f023 0307 	bic.w	r3, r3, #7
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	9303      	str	r3, [sp, #12]
 8006c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c52:	4433      	add	r3, r6
 8006c54:	9309      	str	r3, [sp, #36]	; 0x24
 8006c56:	e768      	b.n	8006b2a <_svfiprintf_r+0x4e>
 8006c58:	460c      	mov	r4, r1
 8006c5a:	2001      	movs	r0, #1
 8006c5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c60:	e7a6      	b.n	8006bb0 <_svfiprintf_r+0xd4>
 8006c62:	2300      	movs	r3, #0
 8006c64:	f04f 0c0a 	mov.w	ip, #10
 8006c68:	4619      	mov	r1, r3
 8006c6a:	3401      	adds	r4, #1
 8006c6c:	9305      	str	r3, [sp, #20]
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c74:	3a30      	subs	r2, #48	; 0x30
 8006c76:	2a09      	cmp	r2, #9
 8006c78:	d903      	bls.n	8006c82 <_svfiprintf_r+0x1a6>
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0c6      	beq.n	8006c0c <_svfiprintf_r+0x130>
 8006c7e:	9105      	str	r1, [sp, #20]
 8006c80:	e7c4      	b.n	8006c0c <_svfiprintf_r+0x130>
 8006c82:	4604      	mov	r4, r0
 8006c84:	2301      	movs	r3, #1
 8006c86:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c8a:	e7f0      	b.n	8006c6e <_svfiprintf_r+0x192>
 8006c8c:	ab03      	add	r3, sp, #12
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	462a      	mov	r2, r5
 8006c92:	4638      	mov	r0, r7
 8006c94:	4b0f      	ldr	r3, [pc, #60]	; (8006cd4 <_svfiprintf_r+0x1f8>)
 8006c96:	a904      	add	r1, sp, #16
 8006c98:	f3af 8000 	nop.w
 8006c9c:	1c42      	adds	r2, r0, #1
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	d1d6      	bne.n	8006c50 <_svfiprintf_r+0x174>
 8006ca2:	89ab      	ldrh	r3, [r5, #12]
 8006ca4:	065b      	lsls	r3, r3, #25
 8006ca6:	f53f af2d 	bmi.w	8006b04 <_svfiprintf_r+0x28>
 8006caa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cac:	b01d      	add	sp, #116	; 0x74
 8006cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb2:	ab03      	add	r3, sp, #12
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	462a      	mov	r2, r5
 8006cb8:	4638      	mov	r0, r7
 8006cba:	4b06      	ldr	r3, [pc, #24]	; (8006cd4 <_svfiprintf_r+0x1f8>)
 8006cbc:	a904      	add	r1, sp, #16
 8006cbe:	f000 f9bf 	bl	8007040 <_printf_i>
 8006cc2:	e7eb      	b.n	8006c9c <_svfiprintf_r+0x1c0>
 8006cc4:	080077d4 	.word	0x080077d4
 8006cc8:	080077da 	.word	0x080077da
 8006ccc:	080077de 	.word	0x080077de
 8006cd0:	00000000 	.word	0x00000000
 8006cd4:	08006a29 	.word	0x08006a29

08006cd8 <__sfputc_r>:
 8006cd8:	6893      	ldr	r3, [r2, #8]
 8006cda:	b410      	push	{r4}
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	6093      	str	r3, [r2, #8]
 8006ce2:	da07      	bge.n	8006cf4 <__sfputc_r+0x1c>
 8006ce4:	6994      	ldr	r4, [r2, #24]
 8006ce6:	42a3      	cmp	r3, r4
 8006ce8:	db01      	blt.n	8006cee <__sfputc_r+0x16>
 8006cea:	290a      	cmp	r1, #10
 8006cec:	d102      	bne.n	8006cf4 <__sfputc_r+0x1c>
 8006cee:	bc10      	pop	{r4}
 8006cf0:	f000 bb72 	b.w	80073d8 <__swbuf_r>
 8006cf4:	6813      	ldr	r3, [r2, #0]
 8006cf6:	1c58      	adds	r0, r3, #1
 8006cf8:	6010      	str	r0, [r2, #0]
 8006cfa:	7019      	strb	r1, [r3, #0]
 8006cfc:	4608      	mov	r0, r1
 8006cfe:	bc10      	pop	{r4}
 8006d00:	4770      	bx	lr

08006d02 <__sfputs_r>:
 8006d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d04:	4606      	mov	r6, r0
 8006d06:	460f      	mov	r7, r1
 8006d08:	4614      	mov	r4, r2
 8006d0a:	18d5      	adds	r5, r2, r3
 8006d0c:	42ac      	cmp	r4, r5
 8006d0e:	d101      	bne.n	8006d14 <__sfputs_r+0x12>
 8006d10:	2000      	movs	r0, #0
 8006d12:	e007      	b.n	8006d24 <__sfputs_r+0x22>
 8006d14:	463a      	mov	r2, r7
 8006d16:	4630      	mov	r0, r6
 8006d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d1c:	f7ff ffdc 	bl	8006cd8 <__sfputc_r>
 8006d20:	1c43      	adds	r3, r0, #1
 8006d22:	d1f3      	bne.n	8006d0c <__sfputs_r+0xa>
 8006d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d28 <_vfiprintf_r>:
 8006d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2c:	460d      	mov	r5, r1
 8006d2e:	4614      	mov	r4, r2
 8006d30:	4698      	mov	r8, r3
 8006d32:	4606      	mov	r6, r0
 8006d34:	b09d      	sub	sp, #116	; 0x74
 8006d36:	b118      	cbz	r0, 8006d40 <_vfiprintf_r+0x18>
 8006d38:	6a03      	ldr	r3, [r0, #32]
 8006d3a:	b90b      	cbnz	r3, 8006d40 <_vfiprintf_r+0x18>
 8006d3c:	f7ff fc4a 	bl	80065d4 <__sinit>
 8006d40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d42:	07d9      	lsls	r1, r3, #31
 8006d44:	d405      	bmi.n	8006d52 <_vfiprintf_r+0x2a>
 8006d46:	89ab      	ldrh	r3, [r5, #12]
 8006d48:	059a      	lsls	r2, r3, #22
 8006d4a:	d402      	bmi.n	8006d52 <_vfiprintf_r+0x2a>
 8006d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d4e:	f7ff fd66 	bl	800681e <__retarget_lock_acquire_recursive>
 8006d52:	89ab      	ldrh	r3, [r5, #12]
 8006d54:	071b      	lsls	r3, r3, #28
 8006d56:	d501      	bpl.n	8006d5c <_vfiprintf_r+0x34>
 8006d58:	692b      	ldr	r3, [r5, #16]
 8006d5a:	b99b      	cbnz	r3, 8006d84 <_vfiprintf_r+0x5c>
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	4630      	mov	r0, r6
 8006d60:	f000 fb78 	bl	8007454 <__swsetup_r>
 8006d64:	b170      	cbz	r0, 8006d84 <_vfiprintf_r+0x5c>
 8006d66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d68:	07dc      	lsls	r4, r3, #31
 8006d6a:	d504      	bpl.n	8006d76 <_vfiprintf_r+0x4e>
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	b01d      	add	sp, #116	; 0x74
 8006d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d76:	89ab      	ldrh	r3, [r5, #12]
 8006d78:	0598      	lsls	r0, r3, #22
 8006d7a:	d4f7      	bmi.n	8006d6c <_vfiprintf_r+0x44>
 8006d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d7e:	f7ff fd4f 	bl	8006820 <__retarget_lock_release_recursive>
 8006d82:	e7f3      	b.n	8006d6c <_vfiprintf_r+0x44>
 8006d84:	2300      	movs	r3, #0
 8006d86:	9309      	str	r3, [sp, #36]	; 0x24
 8006d88:	2320      	movs	r3, #32
 8006d8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d8e:	2330      	movs	r3, #48	; 0x30
 8006d90:	f04f 0901 	mov.w	r9, #1
 8006d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d98:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006f48 <_vfiprintf_r+0x220>
 8006d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006da0:	4623      	mov	r3, r4
 8006da2:	469a      	mov	sl, r3
 8006da4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006da8:	b10a      	cbz	r2, 8006dae <_vfiprintf_r+0x86>
 8006daa:	2a25      	cmp	r2, #37	; 0x25
 8006dac:	d1f9      	bne.n	8006da2 <_vfiprintf_r+0x7a>
 8006dae:	ebba 0b04 	subs.w	fp, sl, r4
 8006db2:	d00b      	beq.n	8006dcc <_vfiprintf_r+0xa4>
 8006db4:	465b      	mov	r3, fp
 8006db6:	4622      	mov	r2, r4
 8006db8:	4629      	mov	r1, r5
 8006dba:	4630      	mov	r0, r6
 8006dbc:	f7ff ffa1 	bl	8006d02 <__sfputs_r>
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	f000 80a9 	beq.w	8006f18 <_vfiprintf_r+0x1f0>
 8006dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dc8:	445a      	add	r2, fp
 8006dca:	9209      	str	r2, [sp, #36]	; 0x24
 8006dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 80a1 	beq.w	8006f18 <_vfiprintf_r+0x1f0>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ddc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006de0:	f10a 0a01 	add.w	sl, sl, #1
 8006de4:	9304      	str	r3, [sp, #16]
 8006de6:	9307      	str	r3, [sp, #28]
 8006de8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dec:	931a      	str	r3, [sp, #104]	; 0x68
 8006dee:	4654      	mov	r4, sl
 8006df0:	2205      	movs	r2, #5
 8006df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006df6:	4854      	ldr	r0, [pc, #336]	; (8006f48 <_vfiprintf_r+0x220>)
 8006df8:	f000 fbae 	bl	8007558 <memchr>
 8006dfc:	9a04      	ldr	r2, [sp, #16]
 8006dfe:	b9d8      	cbnz	r0, 8006e38 <_vfiprintf_r+0x110>
 8006e00:	06d1      	lsls	r1, r2, #27
 8006e02:	bf44      	itt	mi
 8006e04:	2320      	movmi	r3, #32
 8006e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e0a:	0713      	lsls	r3, r2, #28
 8006e0c:	bf44      	itt	mi
 8006e0e:	232b      	movmi	r3, #43	; 0x2b
 8006e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e14:	f89a 3000 	ldrb.w	r3, [sl]
 8006e18:	2b2a      	cmp	r3, #42	; 0x2a
 8006e1a:	d015      	beq.n	8006e48 <_vfiprintf_r+0x120>
 8006e1c:	4654      	mov	r4, sl
 8006e1e:	2000      	movs	r0, #0
 8006e20:	f04f 0c0a 	mov.w	ip, #10
 8006e24:	9a07      	ldr	r2, [sp, #28]
 8006e26:	4621      	mov	r1, r4
 8006e28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e2c:	3b30      	subs	r3, #48	; 0x30
 8006e2e:	2b09      	cmp	r3, #9
 8006e30:	d94d      	bls.n	8006ece <_vfiprintf_r+0x1a6>
 8006e32:	b1b0      	cbz	r0, 8006e62 <_vfiprintf_r+0x13a>
 8006e34:	9207      	str	r2, [sp, #28]
 8006e36:	e014      	b.n	8006e62 <_vfiprintf_r+0x13a>
 8006e38:	eba0 0308 	sub.w	r3, r0, r8
 8006e3c:	fa09 f303 	lsl.w	r3, r9, r3
 8006e40:	4313      	orrs	r3, r2
 8006e42:	46a2      	mov	sl, r4
 8006e44:	9304      	str	r3, [sp, #16]
 8006e46:	e7d2      	b.n	8006dee <_vfiprintf_r+0xc6>
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	1d19      	adds	r1, r3, #4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	9103      	str	r1, [sp, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	bfbb      	ittet	lt
 8006e54:	425b      	neglt	r3, r3
 8006e56:	f042 0202 	orrlt.w	r2, r2, #2
 8006e5a:	9307      	strge	r3, [sp, #28]
 8006e5c:	9307      	strlt	r3, [sp, #28]
 8006e5e:	bfb8      	it	lt
 8006e60:	9204      	strlt	r2, [sp, #16]
 8006e62:	7823      	ldrb	r3, [r4, #0]
 8006e64:	2b2e      	cmp	r3, #46	; 0x2e
 8006e66:	d10c      	bne.n	8006e82 <_vfiprintf_r+0x15a>
 8006e68:	7863      	ldrb	r3, [r4, #1]
 8006e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e6c:	d134      	bne.n	8006ed8 <_vfiprintf_r+0x1b0>
 8006e6e:	9b03      	ldr	r3, [sp, #12]
 8006e70:	3402      	adds	r4, #2
 8006e72:	1d1a      	adds	r2, r3, #4
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	9203      	str	r2, [sp, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	bfb8      	it	lt
 8006e7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e80:	9305      	str	r3, [sp, #20]
 8006e82:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f4c <_vfiprintf_r+0x224>
 8006e86:	2203      	movs	r2, #3
 8006e88:	4650      	mov	r0, sl
 8006e8a:	7821      	ldrb	r1, [r4, #0]
 8006e8c:	f000 fb64 	bl	8007558 <memchr>
 8006e90:	b138      	cbz	r0, 8006ea2 <_vfiprintf_r+0x17a>
 8006e92:	2240      	movs	r2, #64	; 0x40
 8006e94:	9b04      	ldr	r3, [sp, #16]
 8006e96:	eba0 000a 	sub.w	r0, r0, sl
 8006e9a:	4082      	lsls	r2, r0
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	3401      	adds	r4, #1
 8006ea0:	9304      	str	r3, [sp, #16]
 8006ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ea6:	2206      	movs	r2, #6
 8006ea8:	4829      	ldr	r0, [pc, #164]	; (8006f50 <_vfiprintf_r+0x228>)
 8006eaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006eae:	f000 fb53 	bl	8007558 <memchr>
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d03f      	beq.n	8006f36 <_vfiprintf_r+0x20e>
 8006eb6:	4b27      	ldr	r3, [pc, #156]	; (8006f54 <_vfiprintf_r+0x22c>)
 8006eb8:	bb1b      	cbnz	r3, 8006f02 <_vfiprintf_r+0x1da>
 8006eba:	9b03      	ldr	r3, [sp, #12]
 8006ebc:	3307      	adds	r3, #7
 8006ebe:	f023 0307 	bic.w	r3, r3, #7
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	9303      	str	r3, [sp, #12]
 8006ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec8:	443b      	add	r3, r7
 8006eca:	9309      	str	r3, [sp, #36]	; 0x24
 8006ecc:	e768      	b.n	8006da0 <_vfiprintf_r+0x78>
 8006ece:	460c      	mov	r4, r1
 8006ed0:	2001      	movs	r0, #1
 8006ed2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ed6:	e7a6      	b.n	8006e26 <_vfiprintf_r+0xfe>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f04f 0c0a 	mov.w	ip, #10
 8006ede:	4619      	mov	r1, r3
 8006ee0:	3401      	adds	r4, #1
 8006ee2:	9305      	str	r3, [sp, #20]
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eea:	3a30      	subs	r2, #48	; 0x30
 8006eec:	2a09      	cmp	r2, #9
 8006eee:	d903      	bls.n	8006ef8 <_vfiprintf_r+0x1d0>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d0c6      	beq.n	8006e82 <_vfiprintf_r+0x15a>
 8006ef4:	9105      	str	r1, [sp, #20]
 8006ef6:	e7c4      	b.n	8006e82 <_vfiprintf_r+0x15a>
 8006ef8:	4604      	mov	r4, r0
 8006efa:	2301      	movs	r3, #1
 8006efc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f00:	e7f0      	b.n	8006ee4 <_vfiprintf_r+0x1bc>
 8006f02:	ab03      	add	r3, sp, #12
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	462a      	mov	r2, r5
 8006f08:	4630      	mov	r0, r6
 8006f0a:	4b13      	ldr	r3, [pc, #76]	; (8006f58 <_vfiprintf_r+0x230>)
 8006f0c:	a904      	add	r1, sp, #16
 8006f0e:	f3af 8000 	nop.w
 8006f12:	4607      	mov	r7, r0
 8006f14:	1c78      	adds	r0, r7, #1
 8006f16:	d1d6      	bne.n	8006ec6 <_vfiprintf_r+0x19e>
 8006f18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f1a:	07d9      	lsls	r1, r3, #31
 8006f1c:	d405      	bmi.n	8006f2a <_vfiprintf_r+0x202>
 8006f1e:	89ab      	ldrh	r3, [r5, #12]
 8006f20:	059a      	lsls	r2, r3, #22
 8006f22:	d402      	bmi.n	8006f2a <_vfiprintf_r+0x202>
 8006f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f26:	f7ff fc7b 	bl	8006820 <__retarget_lock_release_recursive>
 8006f2a:	89ab      	ldrh	r3, [r5, #12]
 8006f2c:	065b      	lsls	r3, r3, #25
 8006f2e:	f53f af1d 	bmi.w	8006d6c <_vfiprintf_r+0x44>
 8006f32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f34:	e71c      	b.n	8006d70 <_vfiprintf_r+0x48>
 8006f36:	ab03      	add	r3, sp, #12
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	462a      	mov	r2, r5
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <_vfiprintf_r+0x230>)
 8006f40:	a904      	add	r1, sp, #16
 8006f42:	f000 f87d 	bl	8007040 <_printf_i>
 8006f46:	e7e4      	b.n	8006f12 <_vfiprintf_r+0x1ea>
 8006f48:	080077d4 	.word	0x080077d4
 8006f4c:	080077da 	.word	0x080077da
 8006f50:	080077de 	.word	0x080077de
 8006f54:	00000000 	.word	0x00000000
 8006f58:	08006d03 	.word	0x08006d03

08006f5c <_printf_common>:
 8006f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f60:	4616      	mov	r6, r2
 8006f62:	4699      	mov	r9, r3
 8006f64:	688a      	ldr	r2, [r1, #8]
 8006f66:	690b      	ldr	r3, [r1, #16]
 8006f68:	4607      	mov	r7, r0
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	bfb8      	it	lt
 8006f6e:	4613      	movlt	r3, r2
 8006f70:	6033      	str	r3, [r6, #0]
 8006f72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f76:	460c      	mov	r4, r1
 8006f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f7c:	b10a      	cbz	r2, 8006f82 <_printf_common+0x26>
 8006f7e:	3301      	adds	r3, #1
 8006f80:	6033      	str	r3, [r6, #0]
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	0699      	lsls	r1, r3, #26
 8006f86:	bf42      	ittt	mi
 8006f88:	6833      	ldrmi	r3, [r6, #0]
 8006f8a:	3302      	addmi	r3, #2
 8006f8c:	6033      	strmi	r3, [r6, #0]
 8006f8e:	6825      	ldr	r5, [r4, #0]
 8006f90:	f015 0506 	ands.w	r5, r5, #6
 8006f94:	d106      	bne.n	8006fa4 <_printf_common+0x48>
 8006f96:	f104 0a19 	add.w	sl, r4, #25
 8006f9a:	68e3      	ldr	r3, [r4, #12]
 8006f9c:	6832      	ldr	r2, [r6, #0]
 8006f9e:	1a9b      	subs	r3, r3, r2
 8006fa0:	42ab      	cmp	r3, r5
 8006fa2:	dc2b      	bgt.n	8006ffc <_printf_common+0xa0>
 8006fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fa8:	1e13      	subs	r3, r2, #0
 8006faa:	6822      	ldr	r2, [r4, #0]
 8006fac:	bf18      	it	ne
 8006fae:	2301      	movne	r3, #1
 8006fb0:	0692      	lsls	r2, r2, #26
 8006fb2:	d430      	bmi.n	8007016 <_printf_common+0xba>
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fbc:	47c0      	blx	r8
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	d023      	beq.n	800700a <_printf_common+0xae>
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	6922      	ldr	r2, [r4, #16]
 8006fc6:	f003 0306 	and.w	r3, r3, #6
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	bf14      	ite	ne
 8006fce:	2500      	movne	r5, #0
 8006fd0:	6833      	ldreq	r3, [r6, #0]
 8006fd2:	f04f 0600 	mov.w	r6, #0
 8006fd6:	bf08      	it	eq
 8006fd8:	68e5      	ldreq	r5, [r4, #12]
 8006fda:	f104 041a 	add.w	r4, r4, #26
 8006fde:	bf08      	it	eq
 8006fe0:	1aed      	subeq	r5, r5, r3
 8006fe2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006fe6:	bf08      	it	eq
 8006fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fec:	4293      	cmp	r3, r2
 8006fee:	bfc4      	itt	gt
 8006ff0:	1a9b      	subgt	r3, r3, r2
 8006ff2:	18ed      	addgt	r5, r5, r3
 8006ff4:	42b5      	cmp	r5, r6
 8006ff6:	d11a      	bne.n	800702e <_printf_common+0xd2>
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	e008      	b.n	800700e <_printf_common+0xb2>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	4652      	mov	r2, sl
 8007000:	4649      	mov	r1, r9
 8007002:	4638      	mov	r0, r7
 8007004:	47c0      	blx	r8
 8007006:	3001      	adds	r0, #1
 8007008:	d103      	bne.n	8007012 <_printf_common+0xb6>
 800700a:	f04f 30ff 	mov.w	r0, #4294967295
 800700e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007012:	3501      	adds	r5, #1
 8007014:	e7c1      	b.n	8006f9a <_printf_common+0x3e>
 8007016:	2030      	movs	r0, #48	; 0x30
 8007018:	18e1      	adds	r1, r4, r3
 800701a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007024:	4422      	add	r2, r4
 8007026:	3302      	adds	r3, #2
 8007028:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800702c:	e7c2      	b.n	8006fb4 <_printf_common+0x58>
 800702e:	2301      	movs	r3, #1
 8007030:	4622      	mov	r2, r4
 8007032:	4649      	mov	r1, r9
 8007034:	4638      	mov	r0, r7
 8007036:	47c0      	blx	r8
 8007038:	3001      	adds	r0, #1
 800703a:	d0e6      	beq.n	800700a <_printf_common+0xae>
 800703c:	3601      	adds	r6, #1
 800703e:	e7d9      	b.n	8006ff4 <_printf_common+0x98>

08007040 <_printf_i>:
 8007040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007044:	7e0f      	ldrb	r7, [r1, #24]
 8007046:	4691      	mov	r9, r2
 8007048:	2f78      	cmp	r7, #120	; 0x78
 800704a:	4680      	mov	r8, r0
 800704c:	460c      	mov	r4, r1
 800704e:	469a      	mov	sl, r3
 8007050:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007052:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007056:	d807      	bhi.n	8007068 <_printf_i+0x28>
 8007058:	2f62      	cmp	r7, #98	; 0x62
 800705a:	d80a      	bhi.n	8007072 <_printf_i+0x32>
 800705c:	2f00      	cmp	r7, #0
 800705e:	f000 80d5 	beq.w	800720c <_printf_i+0x1cc>
 8007062:	2f58      	cmp	r7, #88	; 0x58
 8007064:	f000 80c1 	beq.w	80071ea <_printf_i+0x1aa>
 8007068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800706c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007070:	e03a      	b.n	80070e8 <_printf_i+0xa8>
 8007072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007076:	2b15      	cmp	r3, #21
 8007078:	d8f6      	bhi.n	8007068 <_printf_i+0x28>
 800707a:	a101      	add	r1, pc, #4	; (adr r1, 8007080 <_printf_i+0x40>)
 800707c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007080:	080070d9 	.word	0x080070d9
 8007084:	080070ed 	.word	0x080070ed
 8007088:	08007069 	.word	0x08007069
 800708c:	08007069 	.word	0x08007069
 8007090:	08007069 	.word	0x08007069
 8007094:	08007069 	.word	0x08007069
 8007098:	080070ed 	.word	0x080070ed
 800709c:	08007069 	.word	0x08007069
 80070a0:	08007069 	.word	0x08007069
 80070a4:	08007069 	.word	0x08007069
 80070a8:	08007069 	.word	0x08007069
 80070ac:	080071f3 	.word	0x080071f3
 80070b0:	08007119 	.word	0x08007119
 80070b4:	080071ad 	.word	0x080071ad
 80070b8:	08007069 	.word	0x08007069
 80070bc:	08007069 	.word	0x08007069
 80070c0:	08007215 	.word	0x08007215
 80070c4:	08007069 	.word	0x08007069
 80070c8:	08007119 	.word	0x08007119
 80070cc:	08007069 	.word	0x08007069
 80070d0:	08007069 	.word	0x08007069
 80070d4:	080071b5 	.word	0x080071b5
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	1d1a      	adds	r2, r3, #4
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	602a      	str	r2, [r5, #0]
 80070e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070e8:	2301      	movs	r3, #1
 80070ea:	e0a0      	b.n	800722e <_printf_i+0x1ee>
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	682b      	ldr	r3, [r5, #0]
 80070f0:	0607      	lsls	r7, r0, #24
 80070f2:	f103 0104 	add.w	r1, r3, #4
 80070f6:	6029      	str	r1, [r5, #0]
 80070f8:	d501      	bpl.n	80070fe <_printf_i+0xbe>
 80070fa:	681e      	ldr	r6, [r3, #0]
 80070fc:	e003      	b.n	8007106 <_printf_i+0xc6>
 80070fe:	0646      	lsls	r6, r0, #25
 8007100:	d5fb      	bpl.n	80070fa <_printf_i+0xba>
 8007102:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007106:	2e00      	cmp	r6, #0
 8007108:	da03      	bge.n	8007112 <_printf_i+0xd2>
 800710a:	232d      	movs	r3, #45	; 0x2d
 800710c:	4276      	negs	r6, r6
 800710e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007112:	230a      	movs	r3, #10
 8007114:	4859      	ldr	r0, [pc, #356]	; (800727c <_printf_i+0x23c>)
 8007116:	e012      	b.n	800713e <_printf_i+0xfe>
 8007118:	682b      	ldr	r3, [r5, #0]
 800711a:	6820      	ldr	r0, [r4, #0]
 800711c:	1d19      	adds	r1, r3, #4
 800711e:	6029      	str	r1, [r5, #0]
 8007120:	0605      	lsls	r5, r0, #24
 8007122:	d501      	bpl.n	8007128 <_printf_i+0xe8>
 8007124:	681e      	ldr	r6, [r3, #0]
 8007126:	e002      	b.n	800712e <_printf_i+0xee>
 8007128:	0641      	lsls	r1, r0, #25
 800712a:	d5fb      	bpl.n	8007124 <_printf_i+0xe4>
 800712c:	881e      	ldrh	r6, [r3, #0]
 800712e:	2f6f      	cmp	r7, #111	; 0x6f
 8007130:	bf0c      	ite	eq
 8007132:	2308      	moveq	r3, #8
 8007134:	230a      	movne	r3, #10
 8007136:	4851      	ldr	r0, [pc, #324]	; (800727c <_printf_i+0x23c>)
 8007138:	2100      	movs	r1, #0
 800713a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800713e:	6865      	ldr	r5, [r4, #4]
 8007140:	2d00      	cmp	r5, #0
 8007142:	bfa8      	it	ge
 8007144:	6821      	ldrge	r1, [r4, #0]
 8007146:	60a5      	str	r5, [r4, #8]
 8007148:	bfa4      	itt	ge
 800714a:	f021 0104 	bicge.w	r1, r1, #4
 800714e:	6021      	strge	r1, [r4, #0]
 8007150:	b90e      	cbnz	r6, 8007156 <_printf_i+0x116>
 8007152:	2d00      	cmp	r5, #0
 8007154:	d04b      	beq.n	80071ee <_printf_i+0x1ae>
 8007156:	4615      	mov	r5, r2
 8007158:	fbb6 f1f3 	udiv	r1, r6, r3
 800715c:	fb03 6711 	mls	r7, r3, r1, r6
 8007160:	5dc7      	ldrb	r7, [r0, r7]
 8007162:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007166:	4637      	mov	r7, r6
 8007168:	42bb      	cmp	r3, r7
 800716a:	460e      	mov	r6, r1
 800716c:	d9f4      	bls.n	8007158 <_printf_i+0x118>
 800716e:	2b08      	cmp	r3, #8
 8007170:	d10b      	bne.n	800718a <_printf_i+0x14a>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	07de      	lsls	r6, r3, #31
 8007176:	d508      	bpl.n	800718a <_printf_i+0x14a>
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	6861      	ldr	r1, [r4, #4]
 800717c:	4299      	cmp	r1, r3
 800717e:	bfde      	ittt	le
 8007180:	2330      	movle	r3, #48	; 0x30
 8007182:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007186:	f105 35ff 	addle.w	r5, r5, #4294967295
 800718a:	1b52      	subs	r2, r2, r5
 800718c:	6122      	str	r2, [r4, #16]
 800718e:	464b      	mov	r3, r9
 8007190:	4621      	mov	r1, r4
 8007192:	4640      	mov	r0, r8
 8007194:	f8cd a000 	str.w	sl, [sp]
 8007198:	aa03      	add	r2, sp, #12
 800719a:	f7ff fedf 	bl	8006f5c <_printf_common>
 800719e:	3001      	adds	r0, #1
 80071a0:	d14a      	bne.n	8007238 <_printf_i+0x1f8>
 80071a2:	f04f 30ff 	mov.w	r0, #4294967295
 80071a6:	b004      	add	sp, #16
 80071a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ac:	6823      	ldr	r3, [r4, #0]
 80071ae:	f043 0320 	orr.w	r3, r3, #32
 80071b2:	6023      	str	r3, [r4, #0]
 80071b4:	2778      	movs	r7, #120	; 0x78
 80071b6:	4832      	ldr	r0, [pc, #200]	; (8007280 <_printf_i+0x240>)
 80071b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	6829      	ldr	r1, [r5, #0]
 80071c0:	061f      	lsls	r7, r3, #24
 80071c2:	f851 6b04 	ldr.w	r6, [r1], #4
 80071c6:	d402      	bmi.n	80071ce <_printf_i+0x18e>
 80071c8:	065f      	lsls	r7, r3, #25
 80071ca:	bf48      	it	mi
 80071cc:	b2b6      	uxthmi	r6, r6
 80071ce:	07df      	lsls	r7, r3, #31
 80071d0:	bf48      	it	mi
 80071d2:	f043 0320 	orrmi.w	r3, r3, #32
 80071d6:	6029      	str	r1, [r5, #0]
 80071d8:	bf48      	it	mi
 80071da:	6023      	strmi	r3, [r4, #0]
 80071dc:	b91e      	cbnz	r6, 80071e6 <_printf_i+0x1a6>
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	f023 0320 	bic.w	r3, r3, #32
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	2310      	movs	r3, #16
 80071e8:	e7a6      	b.n	8007138 <_printf_i+0xf8>
 80071ea:	4824      	ldr	r0, [pc, #144]	; (800727c <_printf_i+0x23c>)
 80071ec:	e7e4      	b.n	80071b8 <_printf_i+0x178>
 80071ee:	4615      	mov	r5, r2
 80071f0:	e7bd      	b.n	800716e <_printf_i+0x12e>
 80071f2:	682b      	ldr	r3, [r5, #0]
 80071f4:	6826      	ldr	r6, [r4, #0]
 80071f6:	1d18      	adds	r0, r3, #4
 80071f8:	6961      	ldr	r1, [r4, #20]
 80071fa:	6028      	str	r0, [r5, #0]
 80071fc:	0635      	lsls	r5, r6, #24
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	d501      	bpl.n	8007206 <_printf_i+0x1c6>
 8007202:	6019      	str	r1, [r3, #0]
 8007204:	e002      	b.n	800720c <_printf_i+0x1cc>
 8007206:	0670      	lsls	r0, r6, #25
 8007208:	d5fb      	bpl.n	8007202 <_printf_i+0x1c2>
 800720a:	8019      	strh	r1, [r3, #0]
 800720c:	2300      	movs	r3, #0
 800720e:	4615      	mov	r5, r2
 8007210:	6123      	str	r3, [r4, #16]
 8007212:	e7bc      	b.n	800718e <_printf_i+0x14e>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	2100      	movs	r1, #0
 8007218:	1d1a      	adds	r2, r3, #4
 800721a:	602a      	str	r2, [r5, #0]
 800721c:	681d      	ldr	r5, [r3, #0]
 800721e:	6862      	ldr	r2, [r4, #4]
 8007220:	4628      	mov	r0, r5
 8007222:	f000 f999 	bl	8007558 <memchr>
 8007226:	b108      	cbz	r0, 800722c <_printf_i+0x1ec>
 8007228:	1b40      	subs	r0, r0, r5
 800722a:	6060      	str	r0, [r4, #4]
 800722c:	6863      	ldr	r3, [r4, #4]
 800722e:	6123      	str	r3, [r4, #16]
 8007230:	2300      	movs	r3, #0
 8007232:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007236:	e7aa      	b.n	800718e <_printf_i+0x14e>
 8007238:	462a      	mov	r2, r5
 800723a:	4649      	mov	r1, r9
 800723c:	4640      	mov	r0, r8
 800723e:	6923      	ldr	r3, [r4, #16]
 8007240:	47d0      	blx	sl
 8007242:	3001      	adds	r0, #1
 8007244:	d0ad      	beq.n	80071a2 <_printf_i+0x162>
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	079b      	lsls	r3, r3, #30
 800724a:	d413      	bmi.n	8007274 <_printf_i+0x234>
 800724c:	68e0      	ldr	r0, [r4, #12]
 800724e:	9b03      	ldr	r3, [sp, #12]
 8007250:	4298      	cmp	r0, r3
 8007252:	bfb8      	it	lt
 8007254:	4618      	movlt	r0, r3
 8007256:	e7a6      	b.n	80071a6 <_printf_i+0x166>
 8007258:	2301      	movs	r3, #1
 800725a:	4632      	mov	r2, r6
 800725c:	4649      	mov	r1, r9
 800725e:	4640      	mov	r0, r8
 8007260:	47d0      	blx	sl
 8007262:	3001      	adds	r0, #1
 8007264:	d09d      	beq.n	80071a2 <_printf_i+0x162>
 8007266:	3501      	adds	r5, #1
 8007268:	68e3      	ldr	r3, [r4, #12]
 800726a:	9903      	ldr	r1, [sp, #12]
 800726c:	1a5b      	subs	r3, r3, r1
 800726e:	42ab      	cmp	r3, r5
 8007270:	dcf2      	bgt.n	8007258 <_printf_i+0x218>
 8007272:	e7eb      	b.n	800724c <_printf_i+0x20c>
 8007274:	2500      	movs	r5, #0
 8007276:	f104 0619 	add.w	r6, r4, #25
 800727a:	e7f5      	b.n	8007268 <_printf_i+0x228>
 800727c:	080077e5 	.word	0x080077e5
 8007280:	080077f6 	.word	0x080077f6

08007284 <__sflush_r>:
 8007284:	898a      	ldrh	r2, [r1, #12]
 8007286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007288:	4605      	mov	r5, r0
 800728a:	0710      	lsls	r0, r2, #28
 800728c:	460c      	mov	r4, r1
 800728e:	d457      	bmi.n	8007340 <__sflush_r+0xbc>
 8007290:	684b      	ldr	r3, [r1, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	dc04      	bgt.n	80072a0 <__sflush_r+0x1c>
 8007296:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007298:	2b00      	cmp	r3, #0
 800729a:	dc01      	bgt.n	80072a0 <__sflush_r+0x1c>
 800729c:	2000      	movs	r0, #0
 800729e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072a2:	2e00      	cmp	r6, #0
 80072a4:	d0fa      	beq.n	800729c <__sflush_r+0x18>
 80072a6:	2300      	movs	r3, #0
 80072a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072ac:	682f      	ldr	r7, [r5, #0]
 80072ae:	6a21      	ldr	r1, [r4, #32]
 80072b0:	602b      	str	r3, [r5, #0]
 80072b2:	d032      	beq.n	800731a <__sflush_r+0x96>
 80072b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072b6:	89a3      	ldrh	r3, [r4, #12]
 80072b8:	075a      	lsls	r2, r3, #29
 80072ba:	d505      	bpl.n	80072c8 <__sflush_r+0x44>
 80072bc:	6863      	ldr	r3, [r4, #4]
 80072be:	1ac0      	subs	r0, r0, r3
 80072c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072c2:	b10b      	cbz	r3, 80072c8 <__sflush_r+0x44>
 80072c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072c6:	1ac0      	subs	r0, r0, r3
 80072c8:	2300      	movs	r3, #0
 80072ca:	4602      	mov	r2, r0
 80072cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072ce:	4628      	mov	r0, r5
 80072d0:	6a21      	ldr	r1, [r4, #32]
 80072d2:	47b0      	blx	r6
 80072d4:	1c43      	adds	r3, r0, #1
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	d106      	bne.n	80072e8 <__sflush_r+0x64>
 80072da:	6829      	ldr	r1, [r5, #0]
 80072dc:	291d      	cmp	r1, #29
 80072de:	d82b      	bhi.n	8007338 <__sflush_r+0xb4>
 80072e0:	4a28      	ldr	r2, [pc, #160]	; (8007384 <__sflush_r+0x100>)
 80072e2:	410a      	asrs	r2, r1
 80072e4:	07d6      	lsls	r6, r2, #31
 80072e6:	d427      	bmi.n	8007338 <__sflush_r+0xb4>
 80072e8:	2200      	movs	r2, #0
 80072ea:	6062      	str	r2, [r4, #4]
 80072ec:	6922      	ldr	r2, [r4, #16]
 80072ee:	04d9      	lsls	r1, r3, #19
 80072f0:	6022      	str	r2, [r4, #0]
 80072f2:	d504      	bpl.n	80072fe <__sflush_r+0x7a>
 80072f4:	1c42      	adds	r2, r0, #1
 80072f6:	d101      	bne.n	80072fc <__sflush_r+0x78>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	b903      	cbnz	r3, 80072fe <__sflush_r+0x7a>
 80072fc:	6560      	str	r0, [r4, #84]	; 0x54
 80072fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007300:	602f      	str	r7, [r5, #0]
 8007302:	2900      	cmp	r1, #0
 8007304:	d0ca      	beq.n	800729c <__sflush_r+0x18>
 8007306:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800730a:	4299      	cmp	r1, r3
 800730c:	d002      	beq.n	8007314 <__sflush_r+0x90>
 800730e:	4628      	mov	r0, r5
 8007310:	f7ff fa96 	bl	8006840 <_free_r>
 8007314:	2000      	movs	r0, #0
 8007316:	6360      	str	r0, [r4, #52]	; 0x34
 8007318:	e7c1      	b.n	800729e <__sflush_r+0x1a>
 800731a:	2301      	movs	r3, #1
 800731c:	4628      	mov	r0, r5
 800731e:	47b0      	blx	r6
 8007320:	1c41      	adds	r1, r0, #1
 8007322:	d1c8      	bne.n	80072b6 <__sflush_r+0x32>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0c5      	beq.n	80072b6 <__sflush_r+0x32>
 800732a:	2b1d      	cmp	r3, #29
 800732c:	d001      	beq.n	8007332 <__sflush_r+0xae>
 800732e:	2b16      	cmp	r3, #22
 8007330:	d101      	bne.n	8007336 <__sflush_r+0xb2>
 8007332:	602f      	str	r7, [r5, #0]
 8007334:	e7b2      	b.n	800729c <__sflush_r+0x18>
 8007336:	89a3      	ldrh	r3, [r4, #12]
 8007338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800733c:	81a3      	strh	r3, [r4, #12]
 800733e:	e7ae      	b.n	800729e <__sflush_r+0x1a>
 8007340:	690f      	ldr	r7, [r1, #16]
 8007342:	2f00      	cmp	r7, #0
 8007344:	d0aa      	beq.n	800729c <__sflush_r+0x18>
 8007346:	0793      	lsls	r3, r2, #30
 8007348:	bf18      	it	ne
 800734a:	2300      	movne	r3, #0
 800734c:	680e      	ldr	r6, [r1, #0]
 800734e:	bf08      	it	eq
 8007350:	694b      	ldreq	r3, [r1, #20]
 8007352:	1bf6      	subs	r6, r6, r7
 8007354:	600f      	str	r7, [r1, #0]
 8007356:	608b      	str	r3, [r1, #8]
 8007358:	2e00      	cmp	r6, #0
 800735a:	dd9f      	ble.n	800729c <__sflush_r+0x18>
 800735c:	4633      	mov	r3, r6
 800735e:	463a      	mov	r2, r7
 8007360:	4628      	mov	r0, r5
 8007362:	6a21      	ldr	r1, [r4, #32]
 8007364:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007368:	47e0      	blx	ip
 800736a:	2800      	cmp	r0, #0
 800736c:	dc06      	bgt.n	800737c <__sflush_r+0xf8>
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	f04f 30ff 	mov.w	r0, #4294967295
 8007374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007378:	81a3      	strh	r3, [r4, #12]
 800737a:	e790      	b.n	800729e <__sflush_r+0x1a>
 800737c:	4407      	add	r7, r0
 800737e:	1a36      	subs	r6, r6, r0
 8007380:	e7ea      	b.n	8007358 <__sflush_r+0xd4>
 8007382:	bf00      	nop
 8007384:	dfbffffe 	.word	0xdfbffffe

08007388 <_fflush_r>:
 8007388:	b538      	push	{r3, r4, r5, lr}
 800738a:	690b      	ldr	r3, [r1, #16]
 800738c:	4605      	mov	r5, r0
 800738e:	460c      	mov	r4, r1
 8007390:	b913      	cbnz	r3, 8007398 <_fflush_r+0x10>
 8007392:	2500      	movs	r5, #0
 8007394:	4628      	mov	r0, r5
 8007396:	bd38      	pop	{r3, r4, r5, pc}
 8007398:	b118      	cbz	r0, 80073a2 <_fflush_r+0x1a>
 800739a:	6a03      	ldr	r3, [r0, #32]
 800739c:	b90b      	cbnz	r3, 80073a2 <_fflush_r+0x1a>
 800739e:	f7ff f919 	bl	80065d4 <__sinit>
 80073a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0f3      	beq.n	8007392 <_fflush_r+0xa>
 80073aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073ac:	07d0      	lsls	r0, r2, #31
 80073ae:	d404      	bmi.n	80073ba <_fflush_r+0x32>
 80073b0:	0599      	lsls	r1, r3, #22
 80073b2:	d402      	bmi.n	80073ba <_fflush_r+0x32>
 80073b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073b6:	f7ff fa32 	bl	800681e <__retarget_lock_acquire_recursive>
 80073ba:	4628      	mov	r0, r5
 80073bc:	4621      	mov	r1, r4
 80073be:	f7ff ff61 	bl	8007284 <__sflush_r>
 80073c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073c4:	4605      	mov	r5, r0
 80073c6:	07da      	lsls	r2, r3, #31
 80073c8:	d4e4      	bmi.n	8007394 <_fflush_r+0xc>
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	059b      	lsls	r3, r3, #22
 80073ce:	d4e1      	bmi.n	8007394 <_fflush_r+0xc>
 80073d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073d2:	f7ff fa25 	bl	8006820 <__retarget_lock_release_recursive>
 80073d6:	e7dd      	b.n	8007394 <_fflush_r+0xc>

080073d8 <__swbuf_r>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	460e      	mov	r6, r1
 80073dc:	4614      	mov	r4, r2
 80073de:	4605      	mov	r5, r0
 80073e0:	b118      	cbz	r0, 80073ea <__swbuf_r+0x12>
 80073e2:	6a03      	ldr	r3, [r0, #32]
 80073e4:	b90b      	cbnz	r3, 80073ea <__swbuf_r+0x12>
 80073e6:	f7ff f8f5 	bl	80065d4 <__sinit>
 80073ea:	69a3      	ldr	r3, [r4, #24]
 80073ec:	60a3      	str	r3, [r4, #8]
 80073ee:	89a3      	ldrh	r3, [r4, #12]
 80073f0:	071a      	lsls	r2, r3, #28
 80073f2:	d525      	bpl.n	8007440 <__swbuf_r+0x68>
 80073f4:	6923      	ldr	r3, [r4, #16]
 80073f6:	b31b      	cbz	r3, 8007440 <__swbuf_r+0x68>
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	6922      	ldr	r2, [r4, #16]
 80073fc:	b2f6      	uxtb	r6, r6
 80073fe:	1a98      	subs	r0, r3, r2
 8007400:	6963      	ldr	r3, [r4, #20]
 8007402:	4637      	mov	r7, r6
 8007404:	4283      	cmp	r3, r0
 8007406:	dc04      	bgt.n	8007412 <__swbuf_r+0x3a>
 8007408:	4621      	mov	r1, r4
 800740a:	4628      	mov	r0, r5
 800740c:	f7ff ffbc 	bl	8007388 <_fflush_r>
 8007410:	b9e0      	cbnz	r0, 800744c <__swbuf_r+0x74>
 8007412:	68a3      	ldr	r3, [r4, #8]
 8007414:	3b01      	subs	r3, #1
 8007416:	60a3      	str	r3, [r4, #8]
 8007418:	6823      	ldr	r3, [r4, #0]
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	6022      	str	r2, [r4, #0]
 800741e:	701e      	strb	r6, [r3, #0]
 8007420:	6962      	ldr	r2, [r4, #20]
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	429a      	cmp	r2, r3
 8007426:	d004      	beq.n	8007432 <__swbuf_r+0x5a>
 8007428:	89a3      	ldrh	r3, [r4, #12]
 800742a:	07db      	lsls	r3, r3, #31
 800742c:	d506      	bpl.n	800743c <__swbuf_r+0x64>
 800742e:	2e0a      	cmp	r6, #10
 8007430:	d104      	bne.n	800743c <__swbuf_r+0x64>
 8007432:	4621      	mov	r1, r4
 8007434:	4628      	mov	r0, r5
 8007436:	f7ff ffa7 	bl	8007388 <_fflush_r>
 800743a:	b938      	cbnz	r0, 800744c <__swbuf_r+0x74>
 800743c:	4638      	mov	r0, r7
 800743e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007440:	4621      	mov	r1, r4
 8007442:	4628      	mov	r0, r5
 8007444:	f000 f806 	bl	8007454 <__swsetup_r>
 8007448:	2800      	cmp	r0, #0
 800744a:	d0d5      	beq.n	80073f8 <__swbuf_r+0x20>
 800744c:	f04f 37ff 	mov.w	r7, #4294967295
 8007450:	e7f4      	b.n	800743c <__swbuf_r+0x64>
	...

08007454 <__swsetup_r>:
 8007454:	b538      	push	{r3, r4, r5, lr}
 8007456:	4b2a      	ldr	r3, [pc, #168]	; (8007500 <__swsetup_r+0xac>)
 8007458:	4605      	mov	r5, r0
 800745a:	6818      	ldr	r0, [r3, #0]
 800745c:	460c      	mov	r4, r1
 800745e:	b118      	cbz	r0, 8007468 <__swsetup_r+0x14>
 8007460:	6a03      	ldr	r3, [r0, #32]
 8007462:	b90b      	cbnz	r3, 8007468 <__swsetup_r+0x14>
 8007464:	f7ff f8b6 	bl	80065d4 <__sinit>
 8007468:	89a3      	ldrh	r3, [r4, #12]
 800746a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800746e:	0718      	lsls	r0, r3, #28
 8007470:	d422      	bmi.n	80074b8 <__swsetup_r+0x64>
 8007472:	06d9      	lsls	r1, r3, #27
 8007474:	d407      	bmi.n	8007486 <__swsetup_r+0x32>
 8007476:	2309      	movs	r3, #9
 8007478:	602b      	str	r3, [r5, #0]
 800747a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800747e:	f04f 30ff 	mov.w	r0, #4294967295
 8007482:	81a3      	strh	r3, [r4, #12]
 8007484:	e034      	b.n	80074f0 <__swsetup_r+0x9c>
 8007486:	0758      	lsls	r0, r3, #29
 8007488:	d512      	bpl.n	80074b0 <__swsetup_r+0x5c>
 800748a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800748c:	b141      	cbz	r1, 80074a0 <__swsetup_r+0x4c>
 800748e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007492:	4299      	cmp	r1, r3
 8007494:	d002      	beq.n	800749c <__swsetup_r+0x48>
 8007496:	4628      	mov	r0, r5
 8007498:	f7ff f9d2 	bl	8006840 <_free_r>
 800749c:	2300      	movs	r3, #0
 800749e:	6363      	str	r3, [r4, #52]	; 0x34
 80074a0:	89a3      	ldrh	r3, [r4, #12]
 80074a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074a6:	81a3      	strh	r3, [r4, #12]
 80074a8:	2300      	movs	r3, #0
 80074aa:	6063      	str	r3, [r4, #4]
 80074ac:	6923      	ldr	r3, [r4, #16]
 80074ae:	6023      	str	r3, [r4, #0]
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	f043 0308 	orr.w	r3, r3, #8
 80074b6:	81a3      	strh	r3, [r4, #12]
 80074b8:	6923      	ldr	r3, [r4, #16]
 80074ba:	b94b      	cbnz	r3, 80074d0 <__swsetup_r+0x7c>
 80074bc:	89a3      	ldrh	r3, [r4, #12]
 80074be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074c6:	d003      	beq.n	80074d0 <__swsetup_r+0x7c>
 80074c8:	4621      	mov	r1, r4
 80074ca:	4628      	mov	r0, r5
 80074cc:	f000 f8a6 	bl	800761c <__smakebuf_r>
 80074d0:	89a0      	ldrh	r0, [r4, #12]
 80074d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074d6:	f010 0301 	ands.w	r3, r0, #1
 80074da:	d00a      	beq.n	80074f2 <__swsetup_r+0x9e>
 80074dc:	2300      	movs	r3, #0
 80074de:	60a3      	str	r3, [r4, #8]
 80074e0:	6963      	ldr	r3, [r4, #20]
 80074e2:	425b      	negs	r3, r3
 80074e4:	61a3      	str	r3, [r4, #24]
 80074e6:	6923      	ldr	r3, [r4, #16]
 80074e8:	b943      	cbnz	r3, 80074fc <__swsetup_r+0xa8>
 80074ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074ee:	d1c4      	bne.n	800747a <__swsetup_r+0x26>
 80074f0:	bd38      	pop	{r3, r4, r5, pc}
 80074f2:	0781      	lsls	r1, r0, #30
 80074f4:	bf58      	it	pl
 80074f6:	6963      	ldrpl	r3, [r4, #20]
 80074f8:	60a3      	str	r3, [r4, #8]
 80074fa:	e7f4      	b.n	80074e6 <__swsetup_r+0x92>
 80074fc:	2000      	movs	r0, #0
 80074fe:	e7f7      	b.n	80074f0 <__swsetup_r+0x9c>
 8007500:	20000104 	.word	0x20000104

08007504 <memmove>:
 8007504:	4288      	cmp	r0, r1
 8007506:	b510      	push	{r4, lr}
 8007508:	eb01 0402 	add.w	r4, r1, r2
 800750c:	d902      	bls.n	8007514 <memmove+0x10>
 800750e:	4284      	cmp	r4, r0
 8007510:	4623      	mov	r3, r4
 8007512:	d807      	bhi.n	8007524 <memmove+0x20>
 8007514:	1e43      	subs	r3, r0, #1
 8007516:	42a1      	cmp	r1, r4
 8007518:	d008      	beq.n	800752c <memmove+0x28>
 800751a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800751e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007522:	e7f8      	b.n	8007516 <memmove+0x12>
 8007524:	4601      	mov	r1, r0
 8007526:	4402      	add	r2, r0
 8007528:	428a      	cmp	r2, r1
 800752a:	d100      	bne.n	800752e <memmove+0x2a>
 800752c:	bd10      	pop	{r4, pc}
 800752e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007536:	e7f7      	b.n	8007528 <memmove+0x24>

08007538 <_sbrk_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	2300      	movs	r3, #0
 800753c:	4d05      	ldr	r5, [pc, #20]	; (8007554 <_sbrk_r+0x1c>)
 800753e:	4604      	mov	r4, r0
 8007540:	4608      	mov	r0, r1
 8007542:	602b      	str	r3, [r5, #0]
 8007544:	f7fb f9e2 	bl	800290c <_sbrk>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_sbrk_r+0x1a>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_sbrk_r+0x1a>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	20000b30 	.word	0x20000b30

08007558 <memchr>:
 8007558:	4603      	mov	r3, r0
 800755a:	b510      	push	{r4, lr}
 800755c:	b2c9      	uxtb	r1, r1
 800755e:	4402      	add	r2, r0
 8007560:	4293      	cmp	r3, r2
 8007562:	4618      	mov	r0, r3
 8007564:	d101      	bne.n	800756a <memchr+0x12>
 8007566:	2000      	movs	r0, #0
 8007568:	e003      	b.n	8007572 <memchr+0x1a>
 800756a:	7804      	ldrb	r4, [r0, #0]
 800756c:	3301      	adds	r3, #1
 800756e:	428c      	cmp	r4, r1
 8007570:	d1f6      	bne.n	8007560 <memchr+0x8>
 8007572:	bd10      	pop	{r4, pc}

08007574 <_realloc_r>:
 8007574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007578:	4680      	mov	r8, r0
 800757a:	4614      	mov	r4, r2
 800757c:	460e      	mov	r6, r1
 800757e:	b921      	cbnz	r1, 800758a <_realloc_r+0x16>
 8007580:	4611      	mov	r1, r2
 8007582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007586:	f7ff b9c3 	b.w	8006910 <_malloc_r>
 800758a:	b92a      	cbnz	r2, 8007598 <_realloc_r+0x24>
 800758c:	f7ff f958 	bl	8006840 <_free_r>
 8007590:	4625      	mov	r5, r4
 8007592:	4628      	mov	r0, r5
 8007594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007598:	f000 f89e 	bl	80076d8 <_malloc_usable_size_r>
 800759c:	4284      	cmp	r4, r0
 800759e:	4607      	mov	r7, r0
 80075a0:	d802      	bhi.n	80075a8 <_realloc_r+0x34>
 80075a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075a6:	d812      	bhi.n	80075ce <_realloc_r+0x5a>
 80075a8:	4621      	mov	r1, r4
 80075aa:	4640      	mov	r0, r8
 80075ac:	f7ff f9b0 	bl	8006910 <_malloc_r>
 80075b0:	4605      	mov	r5, r0
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d0ed      	beq.n	8007592 <_realloc_r+0x1e>
 80075b6:	42bc      	cmp	r4, r7
 80075b8:	4622      	mov	r2, r4
 80075ba:	4631      	mov	r1, r6
 80075bc:	bf28      	it	cs
 80075be:	463a      	movcs	r2, r7
 80075c0:	f7ff f92f 	bl	8006822 <memcpy>
 80075c4:	4631      	mov	r1, r6
 80075c6:	4640      	mov	r0, r8
 80075c8:	f7ff f93a 	bl	8006840 <_free_r>
 80075cc:	e7e1      	b.n	8007592 <_realloc_r+0x1e>
 80075ce:	4635      	mov	r5, r6
 80075d0:	e7df      	b.n	8007592 <_realloc_r+0x1e>

080075d2 <__swhatbuf_r>:
 80075d2:	b570      	push	{r4, r5, r6, lr}
 80075d4:	460c      	mov	r4, r1
 80075d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075da:	4615      	mov	r5, r2
 80075dc:	2900      	cmp	r1, #0
 80075de:	461e      	mov	r6, r3
 80075e0:	b096      	sub	sp, #88	; 0x58
 80075e2:	da0c      	bge.n	80075fe <__swhatbuf_r+0x2c>
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	2100      	movs	r1, #0
 80075e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80075ec:	bf0c      	ite	eq
 80075ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80075f2:	2340      	movne	r3, #64	; 0x40
 80075f4:	2000      	movs	r0, #0
 80075f6:	6031      	str	r1, [r6, #0]
 80075f8:	602b      	str	r3, [r5, #0]
 80075fa:	b016      	add	sp, #88	; 0x58
 80075fc:	bd70      	pop	{r4, r5, r6, pc}
 80075fe:	466a      	mov	r2, sp
 8007600:	f000 f848 	bl	8007694 <_fstat_r>
 8007604:	2800      	cmp	r0, #0
 8007606:	dbed      	blt.n	80075e4 <__swhatbuf_r+0x12>
 8007608:	9901      	ldr	r1, [sp, #4]
 800760a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800760e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007612:	4259      	negs	r1, r3
 8007614:	4159      	adcs	r1, r3
 8007616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800761a:	e7eb      	b.n	80075f4 <__swhatbuf_r+0x22>

0800761c <__smakebuf_r>:
 800761c:	898b      	ldrh	r3, [r1, #12]
 800761e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007620:	079d      	lsls	r5, r3, #30
 8007622:	4606      	mov	r6, r0
 8007624:	460c      	mov	r4, r1
 8007626:	d507      	bpl.n	8007638 <__smakebuf_r+0x1c>
 8007628:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800762c:	6023      	str	r3, [r4, #0]
 800762e:	6123      	str	r3, [r4, #16]
 8007630:	2301      	movs	r3, #1
 8007632:	6163      	str	r3, [r4, #20]
 8007634:	b002      	add	sp, #8
 8007636:	bd70      	pop	{r4, r5, r6, pc}
 8007638:	466a      	mov	r2, sp
 800763a:	ab01      	add	r3, sp, #4
 800763c:	f7ff ffc9 	bl	80075d2 <__swhatbuf_r>
 8007640:	9900      	ldr	r1, [sp, #0]
 8007642:	4605      	mov	r5, r0
 8007644:	4630      	mov	r0, r6
 8007646:	f7ff f963 	bl	8006910 <_malloc_r>
 800764a:	b948      	cbnz	r0, 8007660 <__smakebuf_r+0x44>
 800764c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007650:	059a      	lsls	r2, r3, #22
 8007652:	d4ef      	bmi.n	8007634 <__smakebuf_r+0x18>
 8007654:	f023 0303 	bic.w	r3, r3, #3
 8007658:	f043 0302 	orr.w	r3, r3, #2
 800765c:	81a3      	strh	r3, [r4, #12]
 800765e:	e7e3      	b.n	8007628 <__smakebuf_r+0xc>
 8007660:	89a3      	ldrh	r3, [r4, #12]
 8007662:	6020      	str	r0, [r4, #0]
 8007664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007668:	81a3      	strh	r3, [r4, #12]
 800766a:	9b00      	ldr	r3, [sp, #0]
 800766c:	6120      	str	r0, [r4, #16]
 800766e:	6163      	str	r3, [r4, #20]
 8007670:	9b01      	ldr	r3, [sp, #4]
 8007672:	b15b      	cbz	r3, 800768c <__smakebuf_r+0x70>
 8007674:	4630      	mov	r0, r6
 8007676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800767a:	f000 f81d 	bl	80076b8 <_isatty_r>
 800767e:	b128      	cbz	r0, 800768c <__smakebuf_r+0x70>
 8007680:	89a3      	ldrh	r3, [r4, #12]
 8007682:	f023 0303 	bic.w	r3, r3, #3
 8007686:	f043 0301 	orr.w	r3, r3, #1
 800768a:	81a3      	strh	r3, [r4, #12]
 800768c:	89a3      	ldrh	r3, [r4, #12]
 800768e:	431d      	orrs	r5, r3
 8007690:	81a5      	strh	r5, [r4, #12]
 8007692:	e7cf      	b.n	8007634 <__smakebuf_r+0x18>

08007694 <_fstat_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	2300      	movs	r3, #0
 8007698:	4d06      	ldr	r5, [pc, #24]	; (80076b4 <_fstat_r+0x20>)
 800769a:	4604      	mov	r4, r0
 800769c:	4608      	mov	r0, r1
 800769e:	4611      	mov	r1, r2
 80076a0:	602b      	str	r3, [r5, #0]
 80076a2:	f7fb f90d 	bl	80028c0 <_fstat>
 80076a6:	1c43      	adds	r3, r0, #1
 80076a8:	d102      	bne.n	80076b0 <_fstat_r+0x1c>
 80076aa:	682b      	ldr	r3, [r5, #0]
 80076ac:	b103      	cbz	r3, 80076b0 <_fstat_r+0x1c>
 80076ae:	6023      	str	r3, [r4, #0]
 80076b0:	bd38      	pop	{r3, r4, r5, pc}
 80076b2:	bf00      	nop
 80076b4:	20000b30 	.word	0x20000b30

080076b8 <_isatty_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	2300      	movs	r3, #0
 80076bc:	4d05      	ldr	r5, [pc, #20]	; (80076d4 <_isatty_r+0x1c>)
 80076be:	4604      	mov	r4, r0
 80076c0:	4608      	mov	r0, r1
 80076c2:	602b      	str	r3, [r5, #0]
 80076c4:	f7fb f90b 	bl	80028de <_isatty>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d102      	bne.n	80076d2 <_isatty_r+0x1a>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	b103      	cbz	r3, 80076d2 <_isatty_r+0x1a>
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	20000b30 	.word	0x20000b30

080076d8 <_malloc_usable_size_r>:
 80076d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076dc:	1f18      	subs	r0, r3, #4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bfbc      	itt	lt
 80076e2:	580b      	ldrlt	r3, [r1, r0]
 80076e4:	18c0      	addlt	r0, r0, r3
 80076e6:	4770      	bx	lr

080076e8 <_init>:
 80076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ea:	bf00      	nop
 80076ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ee:	bc08      	pop	{r3}
 80076f0:	469e      	mov	lr, r3
 80076f2:	4770      	bx	lr

080076f4 <_fini>:
 80076f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f6:	bf00      	nop
 80076f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076fa:	bc08      	pop	{r3}
 80076fc:	469e      	mov	lr, r3
 80076fe:	4770      	bx	lr
